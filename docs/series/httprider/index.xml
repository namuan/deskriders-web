<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Httprider on deskriders</title>
    <link>/series/httprider/</link>
    <description>Recent content in Httprider on deskriders</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 06 Jun 2020 11:53:52 +0000</lastBuildDate>
    <atom:link href="/series/httprider/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Publishing Notebooks with HttpRider</title>
      <link>/posts/1591444366-httprider-notebook-publishing/</link>
      <pubDate>Sat, 06 Jun 2020 11:53:52 +0000</pubDate>
      <guid>/posts/1591444366-httprider-notebook-publishing/</guid>
      <description>&lt;p&gt;Preliminary design document for implementing notebooks with HttpRider.&lt;/p&gt;&#xA;&lt;p&gt;This feature enables the user to publish interactive API notebooks.&#xA;These interactive API notebooks can be used to document a scenario where an individual API call doesn&amp;rsquo;t make sense without the context around it.&lt;/p&gt;&#xA;&lt;h4 id=&#34;features&#34;&gt;Features&lt;/h4&gt;&#xA;&lt;p&gt;[] Publish API call description in Markdown format&lt;/p&gt;&#xA;&lt;p&gt;[] Publish API call as curl commands&lt;/p&gt;&#xA;&lt;p&gt;[] Allow user of the notebook to run curl commands interactively&lt;/p&gt;&#xA;&lt;p&gt;[] Track the response of the commands and use the output to chain other calls&lt;/p&gt;</description>
    </item>
    <item>
      <title>Performance testing with HttpRider</title>
      <link>/posts/004-httprider-performance-testing/</link>
      <pubDate>Sat, 16 Nov 2019 16:24:01 +0000</pubDate>
      <guid>/posts/004-httprider-performance-testing/</guid>
      <description>&lt;p&gt;The title is a bit misleading as &lt;a href=&#34;https://github.com/namuan/http-rider&#34;&gt;HttpRider&lt;/a&gt; can&amp;rsquo;t run performance tests (as of now), however it can be used to generate performance tests using a couple of different approach.&lt;/p&gt;&#xA;&lt;h4 id=&#34;slow-cooker&#34;&gt;Slow cooker:&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BuoyantIO/slow_cooker&#34;&gt;SlowCooker&lt;/a&gt; is a command line tool for load testing. &lt;a href=&#34;https://buoyant.io/2016/12/10/slow-cooker-load-testing-for-tough-software/&#34;&gt;Here&lt;/a&gt; is an excellent blog post about the background and difference from other similar tools.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/images/004/httprider_slowcooker.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Generating code to run slow cooker is as simple as selecting an API call and click on the export button to generate code. Along with the command, you can find brief documentation on command line arguments and output format.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generating BDD tests with HttpRider</title>
      <link>/posts/003-httprider-generating-bdd-tests/</link>
      <pubDate>Mon, 28 Oct 2019 11:30:47 +0000</pubDate>
      <guid>/posts/003-httprider-generating-bdd-tests/</guid>
      <description>&lt;p&gt;In this post, we&amp;rsquo;ll see how we can easily generate BDD tests with HttpRider.&lt;/p&gt;&#xA;&lt;p&gt;Instead of writing the code behind the REST api calls, we&amp;rsquo;ll use an open source framework called &lt;a href=&#34;https://github.com/apickli/apickli&#34;&gt;Apickli&lt;/a&gt; to do the heavy lifting. Apickli is based on cucumber.js and defines a number of pre-built &lt;a href=&#34;https://github.com/apickli/apickli#gherkin-expressions&#34;&gt;Gherkin expressions&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve also created a &lt;a href=&#34;https://github.com/namuan/apickli_functional_tests&#34;&gt;sample project&lt;/a&gt; using Apicki framework to make it easy to get it up and running.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s start with a few API calls using the &lt;a href=&#34;https://github.com/namuan/http-rider/tree/master/sample&#34;&gt;sample database&lt;/a&gt; provided with source. Once it is loaded, please make sure that you run all the APIs at least once as some of the exporters use the response to generate code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generating Runscope monitoring tests with HttpRider</title>
      <link>/posts/002-httprider-generating-runscope-monitoring-tests/</link>
      <pubDate>Sun, 27 Oct 2019 11:30:15 +0000</pubDate>
      <guid>/posts/002-httprider-generating-runscope-monitoring-tests/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.runscope.com&#34;&gt;Runscope&lt;/a&gt; (Now Part of &lt;a href=&#34;https://www.blazemeter.com&#34;&gt;BlazeMeter&lt;/a&gt;) is a well known service for API Monitoring. This post covers generating Runscope monitoring tests from &lt;a href=&#34;https://github.com/namuan/http-rider&#34;&gt;HttpRider&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We start with API definitions in HttpRider, make sure you run them at least once as some of the exporters use the data from the response.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/images/002/httprider_runscope_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Along with API definitions, it also generates &lt;a href=&#34;https://www.runscope.com/docs/api-testing/environments/&#34;&gt;Runscope environments&lt;/a&gt; with placeholders for any variables used from environment.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/images/002/httprider_runscope_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Once the tests have successfully finished, click on the export/export all button to display the code generator.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generating sequence diagrams with HttpRider</title>
      <link>/posts/001-httprider-generating-sequence-diagrams/</link>
      <pubDate>Sun, 13 Oct 2019 07:45:14 +0000</pubDate>
      <guid>/posts/001-httprider-generating-sequence-diagrams/</guid>
      <description>&lt;p&gt;Most tools consider an HTTP API call as a single request but that is not usually the case. An API call is surrounded by a sequence of other APIs which makes it easy to understand the context of the use case.&lt;/p&gt;&#xA;&lt;p&gt;In HttpRider, I&amp;rsquo;ve recently introduced an exporter for sequence diagrams. So a collection of HTTP calls can be easily exported to sequence diagrams using PlantUML/MermaidJS.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/namuan/http-rider&#34; title=&#34;HttpRider&#34;&gt;HttpRider&lt;/a&gt; is an open source cross platform desktop client for working with JSON APIs&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
