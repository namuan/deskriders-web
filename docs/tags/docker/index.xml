<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on deskriders</title>
    <link>/tags/docker/</link>
    <description>Recent content in docker on deskriders</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 29 Dec 2024 10:10:13 +0000</lastBuildDate><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting Up Alnoda: A Dockerized Development Workspace</title>
      <link>/posts/1735467013-alnoda-workspaces/</link>
      <pubDate>Sun, 29 Dec 2024 10:10:13 +0000</pubDate>
      
      <guid>/posts/1735467013-alnoda-workspaces/</guid>
      <description>Alnoda desktop provides a dockerized development environment.
According to the GitHub repo
Open-source portable containerized workspaces. Isolate your work, make backups, copy, move between computers and cloud seamlessly.
You can start it up with the following command
docker run --name space-1 -d -p 8020-8040:8020-8040 --restart=always alnoda/alnoda-workspace Although due to port conflicts, I had to change to different port sequence (18020-18040).
docker run --name space-1 -d -p 18020-18040:8020-8040 --restart=always alnoda/alnoda-workspace Once it is up, go to http://localhost:18020 see the environment</description>
    </item>
    
    <item>
      <title>Running Maven in Docker</title>
      <link>/posts/1672665828-running-maven-docker/</link>
      <pubDate>Mon, 02 Jan 2023 13:23:48 +0000</pubDate>
      
      <guid>/posts/1672665828-running-maven-docker/</guid>
      <description>Run this from the root of a maven project
docker run -it --rm -v &amp;#34;$PWD&amp;#34;:/home/src/gpt-fx -v &amp;#34;$HOME/.m2&amp;#34;:/root/.m2 -w /home/src/gpt-fx maven:3.8.3-openjdk-17 mvn clean package -Ppackage </description>
    </item>
    
    <item>
      <title>TIL :: Graphviz ðŸ‘‰ PNG with docker</title>
      <link>/posts/1645947154-graphviz-dot-png/</link>
      <pubDate>Sun, 27 Feb 2022 07:33:19 +0000</pubDate>
      
      <guid>/posts/1645947154-graphviz-dot-png/</guid>
      <description>A simple Graphviz dot file. You could try generating brew dependencies graph
Create a Docker image
FROM alpine:3.5 RUN mkdir /graphviz &amp;amp;&amp;amp; \ apk add --update graphviz ttf-dejavu &amp;amp;&amp;amp; \ rm -rf /var/cache/apk/* WORKDIR /graphviz CMD dot -Tpng Build Docker image from this file
docker build -f Dockerfile -t namuan/dot2png . And then run it with the dot file
cat dependencies.dot | docker run --rm -i namuan/dot2png &amp;gt; dependencies.png </description>
    </item>
    
    <item>
      <title>Protecting applications with OAuth2 Proxy</title>
      <link>/posts/005-protecting-applications-oauth2-proxy/</link>
      <pubDate>Sat, 23 Nov 2019 10:47:29 +0000</pubDate>
      
      <guid>/posts/005-protecting-applications-oauth2-proxy/</guid>
      <description>Here is a simple guide on protecting a website with social logins supporting OAuth2. It uses an open source OAuth2 Proxy (which is a fork from Bitly OAuth2 Proxy) to secure private applications without adding any authentication logic in the application itself.
Here, we&amp;rsquo;ll see how to secure the open source version of https://httpbin.org. Httpbin application itself is open and can be accessed without any authentication.
In this guide, we will setup a Github OAuth application but the same setup can be easily configured with any other provider.</description>
    </item>
    
  </channel>
</rss>
