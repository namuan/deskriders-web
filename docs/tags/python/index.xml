<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on deskriders</title>
    <link>/tags/python/</link>
    <description>Recent content in python on deskriders</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 22 Dec 2024 13:08:12 +0000</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>List of very handy uvx use-cases</title>
      <link>/posts/1734872892-uvx-example-usages/</link>
      <pubDate>Sun, 22 Dec 2024 13:08:12 +0000</pubDate>
      
      <guid>/posts/1734872892-uvx-example-usages/</guid>
      <description>Open Marimo uvx marimo edit --sandbox Also
uvx marimo tutorial intro iPython with packages uvx --with pandas,yfinance ipython Convert files to markdown uvx markitdown ssrn-4990063.pdf Aider.chat uvx aider Clean up .pyc files and pycache directories uvx pyclean . Collected from this Reddit thread</description>
    </item>
    
    <item>
      <title>From Website to PDF using Vivaldi Browser and SingleFile extension</title>
      <link>/posts/1725099403-blog-posts-to-pdf/</link>
      <pubDate>Sat, 31 Aug 2024 11:16:44 +0100</pubDate>
      
      <guid>/posts/1725099403-blog-posts-to-pdf/</guid>
      <description>Pre-Requisites: Vivaldi Browser (Although any other browser can be used) SingleFile extension If using Chrome then single-file-cli should also work, but it didn&amp;rsquo;t work with Vivaldi.
Start with a collection of links in a file
link1.html link2.html Download complete HTML for each url
Note: Change the x,y coordinates if required
Github
#!/usr/bin/env python3 &amp;#34;&amp;#34;&amp;#34; A script to download web pages using Vivaldi browser and SingleFile extension Usage: ./download-urls.py -h ./download-urls.py -v file.</description>
    </item>
    
    <item>
      <title>Tkinter blank application</title>
      <link>/posts/1681102399-chatgpt-tkinter-blank-app/</link>
      <pubDate>Mon, 10 Apr 2023 05:53:19 +0100</pubDate>
      
      <guid>/posts/1681102399-chatgpt-tkinter-blank-app/</guid>
      <description>You: Create a blank application in tkinter Python
ChatGPT: To create a blank application using tkinter in Python, you&amp;rsquo;ll first need to install the tkinter package (if you haven&amp;rsquo;t already) and then import it. Here&amp;rsquo;s a simple example of a blank tkinter application:
import tkinter as tk # Create the main application window app = tk.Tk() # Set the title for the main window app.title(&amp;#34;Blank Application&amp;#34;) # Set the dimensions of the main window app.</description>
    </item>
    
    <item>
      <title>ChatGPT prompt for generating steps and workflow using py-executable-checklist</title>
      <link>/posts/1672866656-chatgpt-prompt-py-executable-checklist/</link>
      <pubDate>Wed, 04 Jan 2023 21:10:56 +0000</pubDate>
      
      <guid>/posts/1672866656-chatgpt-prompt-py-executable-checklist/</guid>
      <description>First Step: Generating each step one at a time I&amp;#39;m writing a Python application which defines a workflow as a series of steps defined by a class for each step. Don&amp;#39;t write any explanations. Don&amp;#39;t write the workflow function DoSomething is a step in the workflow and is defined as class DoSomething(WorkflowBase): &amp;#34;&amp;#34;&amp;#34; Go to this page Copy the command Run the command Copy the output and paste it into the email &amp;#34;&amp;#34;&amp;#34; username: str def execute(self): logging.</description>
    </item>
    
    <item>
      <title>Learning Speech Recognition in Python</title>
      <link>/posts/1671909712-python-speech-recognition-chatgpt/</link>
      <pubDate>Sat, 24 Dec 2022 19:21:52 +0000</pubDate>
      
      <guid>/posts/1671909712-python-speech-recognition-chatgpt/</guid>
      <description>You: I would like to learn about speech_recognition module in Python
ChatGPT: The speech_recognition module is a Python library that allows you to perform speech recognition. With this library, you can easily convert spoken audio to text.
Here&amp;rsquo;s a simple example of how to use the speech_recognition module to transcribe audio from a microphone:
import speech_recognition as sr # create a Recognizer object r = sr.Recognizer() # create a Microphone object mic = sr.</description>
    </item>
    
    <item>
      <title>Using helium - a Selenium API wrapper</title>
      <link>/posts/1639863087-python-selenium/</link>
      <pubDate>Sun, 19 Dec 2021 12:23:12 +0000</pubDate>
      
      <guid>/posts/1639863087-python-selenium/</guid>
      <description>Here is a quick example to use Helium.
Steps: Install dependencies using pip or add it to requirements.txt and run pip3 install -r requirements.txt pip3 install helium # or pip3 install -r requirements.txt Create a python file and paste the following code. #!/usr/bin/env python3 &amp;#34;&amp;#34;&amp;#34; Demonstrates how to use helium to automate a web browser. &amp;#34;&amp;#34;&amp;#34; from helium import start_firefox def main(): driver = start_firefox() driver.execute_script(&amp;#34;window.alert(&amp;#39;Hello World&amp;#39;)&amp;#34;) if __name__ == &amp;#34;__main__&amp;#34;: main() Here I&amp;rsquo;m using Firefox but it is easy to switch to Chrome.</description>
    </item>
    
    <item>
      <title>Introducing DevRider :: One Desktop App for Common Development Tools</title>
      <link>/posts/010-introducing-devrider/</link>
      <pubDate>Sat, 25 Jan 2020 19:05:42 +0000</pubDate>
      
      <guid>/posts/010-introducing-devrider/</guid>
      <description>There is a serious problem with the state of simple development tools on the internet.
Most of the websites providing simple encoders/decoders/formatters/prettifiers are filled with ads and popups which makes it annoying and risky to use.
And then there is also a huge problem with privacy and leaking any private data that is used on any of these websites.
Although it is impossible to replace them altogether, let me introduce you to DevRider, a new open source to provide some of the common tools in an extensible desktop application.</description>
    </item>
    
    <item>
      <title>Developing API exchange sharing service - Part II</title>
      <link>/posts/009-developing-api-exchange-2/</link>
      <pubDate>Fri, 03 Jan 2020 18:51:44 +0000</pubDate>
      
      <guid>/posts/009-developing-api-exchange-2/</guid>
      <description>Please check the previous part to know the background of this project.
In this part, we&amp;rsquo;ll dive into code and deploy a simple API to AWS Lambda and Api Gateway.
I&amp;rsquo;ll be using Python Flask framework for defining the APIs and Serverless framework to manage the infrastructure and deployment.
Please make sure you have Python3 and relatively newer version of nodejs installed and working to follow along.
The first step is to create a new project folder and initialise package.</description>
    </item>
    
    <item>
      <title>Overlay button on a PyQt5 widget</title>
      <link>/posts/007-pyqt5-overlay-button-widget/</link>
      <pubDate>Thu, 02 Jan 2020 11:51:10 +0000</pubDate>
      
      <guid>/posts/007-pyqt5-overlay-button-widget/</guid>
      <description>This is a short post on how to add a floating button on top of a widget in PyQt5.
First, we&amp;rsquo;ll define the button and the relative positioning.
class FloatingButtonWidget(QtWidgets.QPushButton): #1 def __init__(self, parent): super().__init__(parent) self.paddingLeft = 5 self.paddingTop = 5 def update_position(self): if hasattr(self.parent(), &amp;#39;viewport&amp;#39;): parent_rect = self.parent().viewport().rect() else: parent_rect = self.parent().rect() if not parent_rect: return x = parent_rect.width() - self.width() - self.paddingLeft y = self.paddingTop #3 self.setGeometry(x, y, self.</description>
    </item>
    
    <item>
      <title>Developing API exchange sharing service - Part I</title>
      <link>/posts/008-developing-api-exchange-1/</link>
      <pubDate>Wed, 01 Jan 2020 16:51:35 +0000</pubDate>
      
      <guid>/posts/008-developing-api-exchange-1/</guid>
      <description>In this series of articles, I&amp;rsquo;ll go through my experience of building a simple Serverless API using Flask python framework and deploying it on AWS Lambda and API gateway.
This API is used from HttpRider to save API exchanges (request+response).
Here is a sample page generated from HttpRider.
Demo The service itself consists of two simple APIs.
POST /prints Saves the HTML encoded in base64 in dynamo database. Once it is saved, it returns the URL of the shared document in the Location header of the response.</description>
    </item>
    
    <item>
      <title>Performance testing with HttpRider</title>
      <link>/posts/004-httprider-performance-testing/</link>
      <pubDate>Sat, 16 Nov 2019 16:24:01 +0000</pubDate>
      
      <guid>/posts/004-httprider-performance-testing/</guid>
      <description>The title is a bit misleading as HttpRider can&amp;rsquo;t run performance tests (as of now), however it can be used to generate performance tests using a couple of different approach.
Slow cooker: SlowCooker is a command line tool for load testing. Here is an excellent blog post about the background and difference from other similar tools.
Generating code to run slow cooker is as simple as selecting an API call and click on the export button to generate code.</description>
    </item>
    
    <item>
      <title>Generating BDD tests with HttpRider</title>
      <link>/posts/003-httprider-generating-bdd-tests/</link>
      <pubDate>Mon, 28 Oct 2019 11:30:47 +0000</pubDate>
      
      <guid>/posts/003-httprider-generating-bdd-tests/</guid>
      <description>In this post, we&amp;rsquo;ll see how we can easily generate BDD tests with HttpRider.
Instead of writing the code behind the REST api calls, we&amp;rsquo;ll use an open source framework called Apickli to do the heavy lifting. Apickli is based on cucumber.js and defines a number of pre-built Gherkin expressions.
I&amp;rsquo;ve also created a sample project using Apicki framework to make it easy to get it up and running.
Let&amp;rsquo;s start with a few API calls using the sample database provided with source.</description>
    </item>
    
    <item>
      <title>Generating Runscope monitoring tests with HttpRider</title>
      <link>/posts/002-httprider-generating-runscope-monitoring-tests/</link>
      <pubDate>Sun, 27 Oct 2019 11:30:15 +0000</pubDate>
      
      <guid>/posts/002-httprider-generating-runscope-monitoring-tests/</guid>
      <description>Runscope (Now Part of BlazeMeter) is a well known service for API Monitoring. This post covers generating Runscope monitoring tests from HttpRider.
We start with API definitions in HttpRider, make sure you run them at least once as some of the exporters use the data from the response.
Along with API definitions, it also generates Runscope environments with placeholders for any variables used from environment.
Once the tests have successfully finished, click on the export/export all button to display the code generator.</description>
    </item>
    
    <item>
      <title>Generating sequence diagrams with HttpRider</title>
      <link>/posts/001-httprider-generating-sequence-diagrams/</link>
      <pubDate>Sun, 13 Oct 2019 07:45:14 +0000</pubDate>
      
      <guid>/posts/001-httprider-generating-sequence-diagrams/</guid>
      <description>Most tools consider an HTTP API call as a single request but that is not usually the case. An API call is surrounded by a sequence of other APIs which makes it easy to understand the context of the use case.
In HttpRider, I&amp;rsquo;ve recently introduced an exporter for sequence diagrams. So a collection of HTTP calls can be easily exported to sequence diagrams using PlantUML/MermaidJS.
HttpRider is an open source cross platform desktop client for working with JSON APIs</description>
    </item>
    
  </channel>
</rss>
