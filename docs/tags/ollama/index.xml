<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ollama on deskriders</title>
    <link>/tags/ollama/</link>
    <description>Recent content in ollama on deskriders</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 03 May 2024 10:53:56 +0100</lastBuildDate><atom:link href="/tags/ollama/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setup AiTown with Pinokio and run with your own models</title>
      <link>/posts/1714730035-aitown-ollama-models/</link>
      <pubDate>Fri, 03 May 2024 10:53:56 +0100</pubDate>
      
      <guid>/posts/1714730035-aitown-ollama-models/</guid>
      <description> Download pinokio and Setup AiTown cd $HOME/pinokio/api/aitown.git/app eval &amp;#34;$(conda shell.bash hook)&amp;#34; &amp;amp;&amp;amp; conda deactivate &amp;amp;&amp;amp; conda deactivate &amp;amp;&amp;amp; conda deactivate &amp;amp;&amp;amp; conda activate $HOME/pinokio/api/aitown.git/app/node18 Shell 1: ./convex-local-backend Shell 2: npm run dev Switch model First backup Llama3
ollama cp llama3:latest llama3-backup:latest Switch model
ollama rm llama3:latest; ollama cp openhermes:latest llama3:latest Restore llama3 from backup
ollama rm llama3:latest; ollama cp llama3-backup:latest llama3:latest Verify
ollama list </description>
    </item>
    
    <item>
      <title>Function calling using Ollama models</title>
      <link>/posts/1702742595-function-calling-ollama-models/</link>
      <pubDate>Sat, 16 Dec 2023 16:03:16 +0000</pubDate>
      
      <guid>/posts/1702742595-function-calling-ollama-models/</guid>
      <description>Here is a quick breakthrough of using functions with Mixtral running on Ollama
Code is available here.
It is built on top of openhermes-functions by abacaj üôè
The prompt used looks like this
You have access to the following tools: {function_to_json(get_weather)} {function_to_json(calculate_mortgage_payment)} {function_to_json(get_directions)} {function_to_json(get_article_details)} You must follow these instructions: Always select one or more of the above tools based on the user query If a tool is found, you must respond in the JSON format matching the following schema: {{ &amp;#34;tools&amp;#34;: {{ &amp;#34;tool&amp;#34;: &amp;#34;&amp;lt;name of the selected tool&amp;gt;&amp;#34;, &amp;#34;tool_input&amp;#34;: &amp;lt;parameters for the selected tool, matching the tool&amp;#39;s JSON schema }} }} If there are multiple tools required, make sure a list of tools are returned in a JSON array.</description>
    </item>
    
  </channel>
</rss>
