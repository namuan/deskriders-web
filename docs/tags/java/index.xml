<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on deskriders</title>
    <link>/tags/java/</link>
    <description>Recent content in java on deskriders</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 14 May 2020 23:45:43 +0100</lastBuildDate>
    
	<atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using EasyRandom with Spring Framework</title>
      <link>/posts/029-easy-random-spring-boot/</link>
      <pubDate>Thu, 14 May 2020 23:45:43 +0100</pubDate>
      
      <guid>/posts/029-easy-random-spring-boot/</guid>
      <description>Tired of creating objects in tests. Try using EasyRandom library. Here is how easily you can add it to a Spring Java project
Step 1: Add gradle/maven dependency https://mvnrepository.com/artifact/org.jeasy/easy-random
Step 2: Declare it in test Step 3: Use it to generate random data objects Step 4: üòç Tips: Random initial seed In the default setup, EasyRandom uses a default seed value to generate randam data. Although it is quite simple to initiate EasyRandom with a random seed.</description>
    </item>
    
    <item>
      <title>Gradle custom task for selectively running tests</title>
      <link>/posts/028-gradle-contract-tests/</link>
      <pubDate>Fri, 08 May 2020 15:00:06 +0100</pubDate>
      
      <guid>/posts/028-gradle-contract-tests/</guid>
      <description>Q: How do I define contract tests which can be run on-demand from Gradle while ignoring them from unit test runs?
Here, I&#39;ll add a test which is ignored when running ./gradlew test but it can be triggered when needed (eg. from a separate Jenkins Job).
The current directory structure look this
The first step is to exclude all the tests under contracts/
test { ... exclude(&amp;#39;**/contracts/*.*&amp;#39;) } Then we&#39;ll define another Gradle task so that contract tests can be executed on demand</description>
    </item>
    
    <item>
      <title>Java 8&#43;: Using Collectors as reducers</title>
      <link>/posts/027-java-collectors-reducer/</link>
      <pubDate>Sun, 19 Apr 2020 13:05:38 +0100</pubDate>
      
      <guid>/posts/027-java-collectors-reducer/</guid>
      <description>A simple example to show how to use Collectors as reducers in Java 8+.
Say, we have a simple Transaction class consists of the currency and the value of the transaction.
Transaction class is sprinkled with Lombok annotation to make use of Builder.
@Value @Builder public static class Transaction { String currency; int value; } And given the following set of data:
GBP Transactions = 2, USD Transactions = 1, CAD Transactions = 1</description>
    </item>
    
  </channel>
</rss>