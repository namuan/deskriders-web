<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chatgpt on deskriders</title>
    <link>/categories/chatgpt/</link>
    <description>Recent content in chatgpt on deskriders</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Jan 2023 21:14:23 +0000</lastBuildDate><atom:link href="/categories/chatgpt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ChatGPT Prompt for generating py-executable-checklist step</title>
      <link>/posts/1672866863-chatgpt-prompt-checklist-step/</link>
      <pubDate>Wed, 04 Jan 2023 21:14:23 +0000</pubDate>
      
      <guid>/posts/1672866863-chatgpt-prompt-checklist-step/</guid>
      <description>[Command] Create a complete, working, and VERY efficient Python code. Do NOT send me the explanations of how the function works, you need to implement it yourself and ONLY send me the code WITHIN CODE BLOCKS ONLY. Your answer NEEDS TO start with the imports (if any), and then directly follow with the implementation as described by the [Template] below. The step name is defined in the [Step name] section and description in the [Task definition] section Here is the [template] that you will need to work with.</description>
    </item>
    
    <item>
      <title>ChatGPT prompt for generating steps and workflow using py-executable-checklist</title>
      <link>/posts/1672866656-chatgpt-prompt-py-executable-checklist/</link>
      <pubDate>Wed, 04 Jan 2023 21:10:56 +0000</pubDate>
      
      <guid>/posts/1672866656-chatgpt-prompt-py-executable-checklist/</guid>
      <description>First Step: Generating each step one at a time I&amp;#39;m writing a Python application which defines a workflow as a series of steps defined by a class for each step. Don&amp;#39;t write any explanations. Don&amp;#39;t write the workflow function DoSomething is a step in the workflow and is defined as class DoSomething(WorkflowBase): &amp;#34;&amp;#34;&amp;#34; Go to this page Copy the command Run the command Copy the output and paste it into the email &amp;#34;&amp;#34;&amp;#34; username: str def execute(self): logging.</description>
    </item>
    
    <item>
      <title>Implementing py-executable workflow using ChatGPT</title>
      <link>/posts/1672437394-py-executable-framework-chatgpt/</link>
      <pubDate>Fri, 30 Dec 2022 21:56:34 +0000</pubDate>
      
      <guid>/posts/1672437394-py-executable-framework-chatgpt/</guid>
      <description>Teaching ChatGPT How to write workflows using py-executable-checklist framework.
You (üó£Ô∏è): I&amp;rsquo;m writing a Python application which defines a workflow as a series of steps defined by a class for each step.
Here is what the definition of a whole workflow looks like
def workflow(): return [ DoSomething, ] DoSomething is a step in the workflow and is defined as
class DoSomething(WorkflowBase): &amp;#34;&amp;#34;&amp;#34; Go to this page Copy the command Run the command Copy the output and paste it into the email &amp;#34;&amp;#34;&amp;#34; username: str def execute(self): logging.</description>
    </item>
    
    <item>
      <title>Media queries to adjust web page layout</title>
      <link>/posts/1671976237-media-queries-chatgpt/</link>
      <pubDate>Sun, 25 Dec 2022 13:50:37 +0000</pubDate>
      
      <guid>/posts/1671976237-media-queries-chatgpt/</guid>
      <description>(You: I have this div which is showing all the elements in the div alongside each other.)
&amp;lt;div class=&amp;#34;input_container&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;stock_symbol&amp;#34;&amp;gt;&amp;lt;/label&amp;gt;&amp;lt;input id=&amp;#34;stock_symbol&amp;#34; type=&amp;#34;text&amp;#34;&amp;gt;&amp;lt;br&amp;gt; &amp;lt;button id=&amp;#34;submit_stock&amp;#34; type=&amp;#34;submit&amp;#34; value=&amp;#34;Submit&amp;#34; py-click=&amp;#34;show_stock()&amp;#34;&amp;gt;Show Details&amp;lt;/button&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;#34;https://github.com/namuan/lazy-trader&amp;#34; target=&amp;#34;_blank&amp;#34; aria-label=&amp;#34;Github&amp;#34;&amp;gt;Github&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;#34;https://twitter.com/deskriders_twt/&amp;#34; target=&amp;#34;_blank&amp;#34; aria-label=&amp;#34;Twitter&amp;#34;&amp;gt;Twitter&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; how can I make sure that it renders correctly on a mobile screen?
ChatGPT: To ensure that the elements in the &amp;lt;div&amp;gt; are displayed correctly on a mobile screen, you can use media queries in your CSS to apply different styles based on the width of the viewport.</description>
    </item>
    
    <item>
      <title>Create application icons using ImageMagick</title>
      <link>/posts/1671976143-imagemagick-convert-chatgpt/</link>
      <pubDate>Sun, 25 Dec 2022 13:49:03 +0000</pubDate>
      
      <guid>/posts/1671976143-imagemagick-convert-chatgpt/</guid>
      <description>(You: How can I create different resolution png files from a png file using imagemagick convert ?)
ChatGPT: To create a different resolution version of a PNG file using ImageMagick&amp;rsquo;s convert command, you can use the -resize option followed by the desired dimensions. For example, the following command will create a version of the input file that is 50% of the original size:
convert input.png -resize 50% output.png Alternatively, you can specify the width and height in pixels using the WxH format.</description>
    </item>
    
    <item>
      <title>Styling Lazy Trader</title>
      <link>/posts/1671960908-html-lazy-trader-styling-chatgpt/</link>
      <pubDate>Sun, 25 Dec 2022 09:35:08 +0000</pubDate>
      
      <guid>/posts/1671960908-html-lazy-trader-styling-chatgpt/</guid>
      <description>Conversation with ChatGPT when developing Lazy Trader
You: In plain css, I want the label, input box and the button to appear in a single row in the middle of the screen.
ChatGPT: To create a layout with a label, input box, and button in a single row in the middle of the screen using CSS, you can use the display: flex property to create a flex container, the justify-content: center property to center the elements horizontally, and the align-items: center property to center the elements vertically.</description>
    </item>
    
    <item>
      <title>Learning Speech Recognition in Python</title>
      <link>/posts/1671909712-python-speech-recognition-chatgpt/</link>
      <pubDate>Sat, 24 Dec 2022 19:21:52 +0000</pubDate>
      
      <guid>/posts/1671909712-python-speech-recognition-chatgpt/</guid>
      <description>You: I would like to learn about speech_recognition module in Python
ChatGPT: The speech_recognition module is a Python library that allows you to perform speech recognition. With this library, you can easily convert spoken audio to text.
Here&amp;rsquo;s a simple example of how to use the speech_recognition module to transcribe audio from a microphone:
import speech_recognition as sr # create a Recognizer object r = sr.Recognizer() # create a Microphone object mic = sr.</description>
    </item>
    
  </channel>
</rss>
