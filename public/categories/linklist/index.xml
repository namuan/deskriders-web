<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linklist on deskriders</title>
    <link>/categories/linklist/</link>
    <description>Recent content in Linklist on deskriders</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Aug 2025 13:12:27 +0100</lastBuildDate>
    <atom:link href="/categories/linklist/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Link List :: 2025-08-25</title>
      <link>/posts/1756123946-linklist-2025-08-25/</link>
      <pubDate>Mon, 25 Aug 2025 13:12:27 +0100</pubDate>
      <guid>/posts/1756123946-linklist-2025-08-25/</guid>
      <description>&lt;h2 id=&#34;httpstecholxcomscaling-recommendations-service-at-olx-db4548813e3a&#34;&gt;&lt;a href=&#34;https://tech.olx.com/scaling-recommendations-service-at-olx-db4548813e3a&#34;&gt;https://tech.olx.com/scaling-recommendations-service-at-olx-db4548813e3a&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt; Scaling a FastAPI service from 0-10000 req/s was accomplished using the following optimizations:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt;   - Leveraging Python&amp;#39;s asynchronous programming capabilities for non-blocking I/O operations with libraries like aio boto3 and httpx.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt;   - Optimizing read patterns by batching ScyllaDB queries into single requests to minimize network round-trips and prevent event loop stalls.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt;   - Minimizing data validation overhead using dataclasses instead of Pydantic models, especially when working with large volumes of data.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt;   - Improving garbage collection efficiency by fine-tuning Python&amp;#39;s memory management settings for high-throughput applications.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt;   - Adopting a deployment strategy that utilizes topology spread constraints and node selectors to ensure optimal resource utilization in distributed systems.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;These optimizations significantly improved the performance of the FastAPI service, including:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt;   Reduced p99 latency under 10ms&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt;   Increased throughput by over 50%&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt;   Improved overall system stability and reliability&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;httpsgithubcomlarabenlaravel-claude-code-setup&#34;&gt;&lt;a href=&#34;https://github.com/laraben/laravel-claude-code-setup&#34;&gt;https://github.com/laraben/laravel-claude-code-setup&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# One-command setup for Claude Code with Laravel development&#xA;# Automatically configures all MCP servers for ultimate AI-powered Laravel experience with Figma integration&#xA;&#xA;- Installs and configures Claude Code with complete development ecosystem&#xA;  - GitHub integration&#xA;  - Memory system&#xA;  - Context7 (latest Laravel/PHP documentation access)&#xA;  - Web fetch (access external APIs and resources)&#xA;  - Figma integration (design-to-code workflows, automatic design token extraction)&#xA;  - Filesystem access (read/write specific Laravel project files)&#xA;  - Database integration (direct access to project&amp;#39;s database)&#xA;  - Laravel DebugBar (real-time debugging if installed)&#xA;- Design-to-code workflows with automatic design token extraction&#xA;- Automatic design token extraction for Tailwind CSS&#xA;- Interactive token management&#xA;- Laravel-specific design patterns and component generation&#xA;- Improved interactive detection&#xA;- Better token management&#xA;- Graceful error handling&#xA;- Smart fallbacks&#xA;- Figma usage guide&#xA;- Error handling documentation&#xA;- Laravel-specific workflows&#xA;- Robust configuration management&#xA;- Cross-platform compatibility&#xA;- Performance optimizations&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsscottspencecompostsspeeding-up-my-zsh-shell&#34;&gt;&lt;a href=&#34;https://scottspence.com/posts/speeding-up-my-zsh-shell&#34;&gt;https://scottspence.com/posts/speeding-up-my-zsh-shell&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Add `zmodload zsh/zprof` to the top of your `.zshrc`&#xA;* Add `zprof` to the bottom of your `.zshrc`&#xA;* Use `DISABLE_AUTO_UPDATE=&amp;#34;true&amp;#34;` and `DISABLE_MAGIC_FUNCTIONS=&amp;#34;true&amp;#34;` at the top of your `.zshrc`&#xA;* Run `compinit -C` instead of `compinit` every day for faster completion&#xA;* Set `SPACESHIP_PROMPT_ASYNC=true` and `SPACESHIP_PROMPT_ADD_NEWLINE=true` in your `.zshrc`&#xA;* Remove unnecessary plugins from the list at the bottom of your `.zshrc`&#xA;* Use `ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=&amp;#34;20&amp;#34;` and `ZSH_AUTOSUGGEST_USE_ASYNC=1` for faster autosuggestions&#xA;* Consider using alternative shells like zinit or Pure prompt if you&amp;#39;re not happy with your current setup&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomalexstrnikbrowserino&#34;&gt;&lt;a href=&#34;https://github.com/AlexStrNik/Browserino&#34;&gt;https://github.com/AlexStrNik/Browserino&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Browserino is a tiny browser selector for MacOS written in SwiftUI.&#xA;* It allows setting as default browser and assigning shortcuts.&#xA;* It enables choosing which application to open links in.&#xA;* Inspired by great Browserosaurus but with improved performance and fixed Electron bugs.&#xA;* Can be installed via Homebrew with `brew tap AlexStrNik/Browserino` and `brew install browserino --no-quarantine`.&#xA;* Also available for download from the releases page.&#xA;* Supports monetization through Gumroad purchases.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcompimzinoclaude-code-spec-workflow&#34;&gt;&lt;a href=&#34;https://github.com/Pimzino/claude-code-spec-workflow&#34;&gt;https://github.com/Pimzino/claude-code-spec-workflow&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‚ö†Ô∏è IMPORTANT NOTICE: Development focus has shifted to the MCP (Model Context Protocol) version of this workflow system. The MCP version provides enhanced features, real-time dashboard, and broader AI tool compatibility.üöÄ View the new Spec Workflow MCP ‚Üí&#xA;* Install globally `npm i -g @pimzino/claude-code-spec-workflow`&#xA;* Run setup command in your project directory `claude-code-spec-workflow`&#xA;* Complete `.claude/` structure - All files and directories&#xA;* 10 slash commands - 5 spec workflow + 5 bug fix workflow&#xA;* Intelligent task execution - Automated implementation&#xA;* 4 specialized agents - Enhanced automation&#xA;* Real-time dashboard - Monitor progress visually&#xA;* Auto-generated commands - One command per task&#xA;* Document templates - Professional spec documents&#xA;* Project steering - Persistent context and standards&#xA;* Smart optimization - Intelligent context sharing and caching&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsmediumcomspringrodbuilding-reliable-agentic-systems-part-i-b056d5b59392&#34;&gt;&lt;a href=&#34;https://medium.com/@springrod/building-reliable-agentic-systems-part-i-b056d5b59392&#34;&gt;https://medium.com/@springrod/building-reliable-agentic-systems-part-i-b056d5b59392&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* # Building Reliable Agentic Systems: Part I&#xA;*  *There‚Äôs always been a gap between demo and realistic application.*&#xA;*  *With Gen AI, it has widened to a gulf.*&#xA;*  *Agent demos accompanied by exaggerated claims are plentiful. Yet agentic success stories are thin on the ground, at least in enterprise.*&#xA;*  *We can bridge the gap between promise and reality by applying what we‚Äôve learnt about software engineering over time.*&#xA;*   *Some things don‚Äôt change.*&#xA;*   # Travel Planner Functionality&#xA;*   *Tripper is a journey planner, originally created to plan a road trip for myself and my girlfriend.*&#xA;*   *Given start and destination and desired dates, information about the travelers and a travel brief, it builds a personalized day to day plan.*&#xA;*   *It suggests activities, chooses places to stay and searches Airbnb for each location.*&#xA;*   # Supporting Services&#xA;*   *Generating this quality of output requires not just LLMs, but multiple integrations.*&#xA;*   *The supporting cast:*&#xA;*     - Multiple LLMs: We need a high quality LLM for generating itinerary ideas and writing up the final proposal.*&#xA;*     - Tools for LLMs to use. MCP tools (backed by Docker MCP gateway) for web search, Google maps and Airbnb; the Embabel platform built in math tool to allow distance and other calculations.* &#xA;*   # The Hard Part: Making Tripper Reliable&#xA;*   *You could throw all these tools at a large state of the art LLM and let it decide how to call them, in what a skeptical NVIDIA paper calls language model agency.*&#xA;*   *Experience building Tripper showed that this would not produce acceptable results.*&#xA;*   *Gotchas included:*&#xA;*     - Invalid generated URLs. &#xA;*     - Confusion around images.* &#xA;*     - Inconsistent tool usage.*&#xA;*    - Poor choice of tool arguments.*&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomfaisal-shahpylogmerge&#34;&gt;&lt;a href=&#34;https://github.com/faisal-shah/pylogmerge&#34;&gt;https://github.com/faisal-shah/pylogmerge&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# LogMerge GUI Application&#xA;&#xA;* Merges and displays multiple log files in a single view, ordered chronologically by timestamp.&#xA;* Live log monitoring with auto-scrolling to follow the latest entries.&#xA;* Add log files individually or discover them recursively in directories with regex filtering for filenames.&#xA;* Plugin-based parsing system to support different log formats.&#xA;* Advanced filtering and search capabilities supporting discrete values, numeric ranges, text patterns (with regex), and time-based queries.&#xA;* Color-coded file identification for easy visual distinction.&#xA;* Configurable column display and ordering.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomenfiyenfiy-code&#34;&gt;&lt;a href=&#34;https://github.com/enfiy/enfiy-code&#34;&gt;https://github.com/enfiy/enfiy-code&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Features&#xA;* Query and edit large codebases using advanced AI models with extended context support&#xA;* Generate applications from PDFs or sketches using multimodal AI&#xA;* Automate tasks like querying pull requests or handling complex rebases&#xA;* Connect external tools through MCP (Model Context Protocol)&#xA;* Support for multiple AI providers - both cloud and local&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomgleiconmcp-chromautomation&#34;&gt;&lt;a href=&#34;https://github.com/gleicon/mcp-chromautomation&#34;&gt;https://github.com/gleicon/mcp-chromautomation&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# MCP Chromautomation Service&#xA;* A comprehensive Model Context Protocol (MCP) service for Chrome browser automation with enhanced capabilities, built on the browserhttp library and using the mcp-go framework.&#xA;* Core Browser Automation:&#xA;    * Enhanced Navigation: Navigate with performance tracking and advanced waiting&#xA;    * Advanced Interaction: Click, type, select with improved reliability&#xA;    * Content Extraction: Text, links, images, forms with metadata&#xA;    * Session Management: Complete cookie and localStorage handling&#xA;    * Screenshot Capture: Automated screenshot with custom naming&#xA;* New Analysis Tools:&#xA;    * Performance Monitoring: DOM load times, network requests, resource analysis&#xA;    * SEO Analysis: Title, description, keywords, heading structure&#xA;    * Security Scanning: SSL validation, CSP analysis, vulnerability detection&#xA;    * Content Intelligence: Comprehensive link categorization and form analysis&#xA;* Advanced Features:&#xA;    * JSON API Integration: Send POST requests with browser context&#xA;    * Local Storage Management: Read/write browser localStorage&#xA;    * Multi-condition Waiting: Wait for elements, text, or navigation&#xA;    * Session Cleanup: Complete cookie and storage clearing&#xA;    * Interactive Menu: Navigate through options with keyboard&#xA;    * Real-time Feedback: See results immediately&#xA;    * Session Browser: View and manage saved sessions&#xA;    * Request Logs: Monitor all browser activity&#xA;    * Settings Panel: Database statistics and configuration&#xA;* Built on:&#xA;    * browserhttp library - Real Chrome browser via chromedp&#xA;    * JavaScript rendering and form submission&#xA;    * Screenshot capture and storage&#xA;    * Persistent tab management&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomkitlangtonhex&#34;&gt;&lt;a href=&#34;https://github.com/kitlangton/Hex&#34;&gt;https://github.com/kitlangton/Hex&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Press-and-hold a hotkey to transcribe your voice and paste the result wherever you&amp;#39;re typing&#xA;* Hex is currently only available for Apple Silicon Macs&#xA;* The project has been opened-sourced, using WhisperKit for transcription and Swift Composable Architecture for structuring the app&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomashwinighuge3012jenkins-mcp-server&#34;&gt;&lt;a href=&#34;https://github.com/AshwiniGhuge3012/jenkins-mcp-server&#34;&gt;https://github.com/AshwiniGhuge3012/jenkins-mcp-server&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## Tools&#xA;&#xA;* `list_jobs`: Lists all available jobs on the Jenkins server with advanced filtering capabilities.&#xA;* `trigger_job`: Triggers a Jenkins job with optional parameters.&#xA;* `get_job_info`: Gets detailed information about a Jenkins job, including its parameters.&#xA;* `get_build_status`: Gets the status of a specific build.&#xA;* `get_console_log`: Retrieves the console log for a specific build.&#xA;* `list_artifacts`: List all artifacts for a specific Jenkins build.&#xA;* `download_artifact`: Download a specific build artifact content (text-based artifacts only).&#xA;* `search_artifacts`: Search for artifacts across recent builds of a job using pattern matching.&#xA;* `trigger_batch_jobs`: Trigger multiple Jenkins jobs in batch with parallel execution and priority queuing.&#xA;* `monitor_batch_operation`: Monitor the status of a batch operation and its individual jobs.&#xA;* `cancel_batch_operation`: Cancel a batch operation and optionally cancel running builds.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomrobertpiosikcodewebchat&#34;&gt;&lt;a href=&#34;https://github.com/robertpiosik/CodeWebChat&#34;&gt;https://github.com/robertpiosik/CodeWebChat&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A 100% free and open-source tool for AI pair programming that initializes web-based chatbots like ChatGPT, Claude, AI Studio or DeepSeek with your code and instructions, hands-free!&#xA;* Works with VS Code and its derivatives (Cursor, Windsurf, VSCodium, etc.).&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomgaetan-puleoai-rules&#34;&gt;&lt;a href=&#34;https://github.com/gaetan-puleo/AI-rules&#34;&gt;https://github.com/gaetan-puleo/AI-rules&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* This repository defines a set of rules and practices for working with AI-powered coding tools&#xA;* Examples of such tools include:&#xA;  - Aider.chat ‚Äì A terminal-based, Git-integrated pair-programming assistant.&#xA;  - Claude Code ‚Äì Anthropic‚Äôs AI coding agent with deep project understanding and multi-file edits.&#xA;  - Opencode ‚Äì An open-source terminal UI coding agent that supports multiple LLMs and integrates with tools like Neovim.&#xA;* The repository outlines a spec-driven workflow&#xA;* Consistent prompting strategies and architecture-aware practices are defined within this repository&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsdocszaiscenario-exampledevelop-toolsclaude&#34;&gt;&lt;a href=&#34;https://docs.z.ai/scenario-example/develop-tools/claude&#34;&gt;https://docs.z.ai/scenario-example/develop-tools/claude&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* To integrate CLAude Code with GLM-4.5 series models from Z.AI, select &amp;#34;Yes&amp;#34; when prompted for API key.&#xA;* Grant CLAude Code permission to access files in your folder.&#xA;* The default model is GLM-4.5; support for switching to other models is not currently available.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcompatelnavctrlspeak&#34;&gt;&lt;a href=&#34;https://github.com/patelnav/ctrlspeak&#34;&gt;https://github.com/patelnav/ctrlspeak&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Minimal Interface: Runs quietly in the background via the command line&#xA;# Triple-Tap Magic: Start/stop recording with a quick Ctrl triple-tap&#xA;# Auto-Paste: Text lands right where you need it, no extra clicks&#xA;# Audio Cues: Hear when recording begins and ends&#xA;# Mac Optimized: Harnesses Apple Silicon&amp;#39;s MPS for blazing performance&#xA;# Top-Tier Models: Powered by NVIDIA NeMo and OpenAI Whisper&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomhwchase17deepagents&#34;&gt;&lt;a href=&#34;https://github.com/hwchase17/deepagents&#34;&gt;https://github.com/hwchase17/deepagents&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Using an LLM to call tools in a loop is a simple way to create an agent, but it can lead to shallow agents that struggle with complex tasks.&#xA;* The DeepAgents library solves this limitation by implementing four key components:&#xA;&#x9;+ A planning tool&#xA;&#x9;+ Sub-agents&#xA;&#x9;+ Access to a file system&#xA;&#x9;+ A detailed prompt&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomwshobsonagents&#34;&gt;&lt;a href=&#34;https://github.com/wshobson/agents&#34;&gt;https://github.com/wshobson/agents&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;httpsgithubcommako10kmcp-confirm&#34;&gt;&lt;a href=&#34;https://github.com/mako10k/mcp-confirm&#34;&gt;https://github.com/mako10k/mcp-confirm&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* An MCP server that implements confirmation protocols between AI and users, providing tools for LLMs to request user confirmation when needed.&#xA;* A Model Context Protocol (MCP) server for AI-user confirmation and clarification, enabling reliable communication between AI assistants and users.&#xA;* Implements the Model Context Protocol Elicitation specification to enable confirmation and clarification protocols.&#xA;* Provides features such as confirming actions before execution, clarifying ambiguous requests, verifying understanding is correct, asking yes/no questions, collecting user satisfaction ratings, and custom confirmation dialogs.&#xA;* Supports development with GitHub Codespaces and configuration using environment variables.&#xA;* Intelligent timeout settings based on confirmation type are used, logging all confirmation interactions to a file for audit purposes.&#xA;* Supports integration with Claude Desktop and can be installed globally or used with npx.&#xA;* Written in TypeScript and runs on Node.js, compatible with @modelcontextprotocol/sdk ^1.0.0.&#xA;* Implements true MCP Elicitation protocol, enabling reliable communication between AI and users.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcommote-softwarenanocoder&#34;&gt;&lt;a href=&#34;https://github.com/Mote-Software/nanocoder&#34;&gt;https://github.com/Mote-Software/nanocoder&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Nanocoder CLI Coding Agent&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpswwwredditcomrmcpcomments1mlvcpui_created_a_typescript_mcp_server_starter&#34;&gt;&lt;a href=&#34;https://www.reddit.com/r/mcp/comments/1mlvcpu/i_created_a_typescript_mcp_server_starter/&#34;&gt;https://www.reddit.com/r/mcp/comments/1mlvcpu/i_created_a_typescript_mcp_server_starter/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* The Model Context Protocol (MCP) is an open standard for secure two-way connections between data sources and AI-powered tools&#xA;* Created a TypeScript MCP Server Starter with preconfigured TypeScript&#xA;* Includes features such as ESLint for clean code, integration test setup, and auto-import utility&#xA;* Goal of the starter kit is to skip boilerplate and make development easier&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsglamaaimcpserverssrijanshukla18xray&#34;&gt;&lt;a href=&#34;https://glama.ai/mcp/servers/@srijanshukla18/xray&#34;&gt;https://glama.ai/mcp/servers/@srijanshukla18/xray&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‚ùå Without XRAY&#xA;  - ‚ùå &amp;#34;I can&amp;#39;t see your code structure&amp;#34;&#xA;  - ‚ùå &amp;#34;I don&amp;#39;t know what depends on this function&amp;#34;&#xA;  - ‚ùå Generic refactoring advice without impact analysis&#xA;  - ‚ùå No understanding of symbol relationships&#xA;&#xA;‚úÖ With XRAY&#xA;  - üó∫Ô∏è Map (explore_repo) - See project structure with symbol skeletons&#xA;  - üîç Find (find_symbol) - Locate functions and classes with fuzzy search&#xA;  - üí• Impact (what_breaks) - Find where a symbol is referenced&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomawslabsagent-squad&#34;&gt;&lt;a href=&#34;https://github.com/awslabs/agent-squad&#34;&gt;https://github.com/awslabs/agent-squad&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Agent Squad&#xA;## Overview&#xA;Flexible, lightweight open-source framework for orchestrating multiple AI agents to handle complex conversations.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomyegor256prompt&#34;&gt;&lt;a href=&#34;https://github.com/yegor256/prompt&#34;&gt;https://github.com/yegor256/prompt&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- All CI workflows must pass before code changes may be reviewed. The existing code structure must not be changed without a strong reason.&#xA;- Every bug must be reproduced by a unit test before being fixed.&#xA;- Every new feature must be covered by a unit test before it is implemented.&#xA;- Minor inconsistencies and typos in the existing code may be fixed.&#xA;- The README.md file must explain the purpose of the repository.&#xA;- The README.md file must be free of typos, grammar mistakes, and broken English.&#xA;- The README.md file must be as short as possible and must not duplicate code documentation.&#xA;- Every class must have a supplementary docblock preceding it.&#xA;- A class docblock must explain the purpose of the class and provide usage examples.&#xA;- Every method and function must have a supplementary docblock preceding it.&#xA;- Docblocks must be written in English only, using UTF-8 encoding.&#xA;- Method bodies may not contain blank lines.&#xA;- Method and function bodies may not contain comments.&#xA;- Variable names must be single nouns, never compound or composite.&#xA;- Method names must be single verbs, never compound or composite.&#xA;- The principle of &amp;#34;Paired Brackets&amp;#34; suggested by Yegor Bugayenko must be respected.&#xA;- Error and log messages should not end with a period.&#xA;- Error and log messages must always be a single sentence, with no periods inside.&#xA;- Favor &amp;#34;fail fast&amp;#34; paradigm over &amp;#34;fail safe&amp;#34;: throw exception earlier.&#xA;- Constructors may not contain any code except assignment statements.&#xA;- Implementation inheritance must be avoided at all costs (not to be confused with subtyping).&#xA;- Getters must be avoided, as they are symptoms of an anemic object model.&#xA;- The DDD paradigm must be respected.&#xA;- Elegant Objects design principles must be respected.&#xA;- Class names may not end with the -er suffix.&#xA;- Setters must be avoided, as they make objects mutable.&#xA;- Immutable objects must be favored over mutable ones.&#xA;- Every class may have only one primary constructor; any secondary constructor must delegate to it.&#xA;- Every class may encapsulate no more than four attributes.&#xA;- Every class must encapsulate at least one attribute.&#xA;- Utility classes are strictly prohibited.&#xA;- Static methods in classes are strictly prohibited.&#xA;- Method names must respect the CQRS principle: they must be either nouns or verbs.&#xA;- Classes must avoid using public static literals.&#xA;- Methods must be declared in interfaces and then implemented in classes.&#xA;- Public methods that do not implement an interface must be avoided.&#xA;- Methods must never return null.&#xA;- Methods should avoid checking incoming arguments for validity.&#xA;- null may not be passed as an argument.&#xA;- Type introspection and type casting are strictly prohibited.&#xA;- Reflection on object internals is strictly prohibited.&#xA;- All classes must be declared final, thus prohibiting inheritance.&#xA;- Exception messages must include as much context as possible.&#xA;- Every change must be covered by a unit test to guarantee repeatability.&#xA;- Every test case may contain only one assertion.&#xA;- In every test, the assertion must be the last statement.&#xA;- Test cases must be as short as possible.&#xA;- Every test must assert at least once.&#xA;- Each test file must have a one-to-one mapping with the feature file it tests.&#xA;- Every assertion must include a failure message that is a negatively toned claim about the error.&#xA;- Tests must use irregular inputs, such as non-ASCII strings.&#xA;- Tests may not share object attributes.&#xA;- Tests may not use setUp() or tearDown() idioms.&#xA;- Tests may not use static literals or other shared constants.&#xA;- Tests must be named as full English sentences, stating what the object under test does.&#xA;- Tests may not test functionality irrelevant to their stated purpose.&#xA;- Tests must close resources they use, such as file handlers, sockets, and database connections.&#xA;- Objects must not provide functionality used only by tests.&#xA;- Tests may not assert on side effects such as logging output.&#xA;- Tests may not check the behavior of setters, getters, or constructors.&#xA;- Tests must not clean up after themselves; instead, they must prepare a clean state at the start.&#xA;- Tests should not use mocks, favoring fake objects and stubs.&#xA;- The best tests consist of a single statement.&#xA;- Tests should use Hamcrest matchers if available.&#xA;- Each test must verify only one specific behavioral pattern of the object it tests.&#xA;- Tests must use random values as inputs.&#xA;- Tests should store temporary files in temporary directories, not in the codebase directory.&#xA;- Tests are not allowed to print any log messages.&#xA;- The testing framework must be configured to disable logging from the objects under test.&#xA;- Tests must not wait indefinitely for any event; they must always stop waiting on a timeout.&#xA;- Tests must verify object behavior in multi-threaded, concurrent environments.&#xA;- Tests must retry potentially flaky code blocks.&#xA;- Tests must assume the absence of an Internet connection.&#xA;- Tests may not assert on error messages or codes.&#xA;- Tests must not rely on default configurations of the objects they test, providing custom arguments.&#xA;- Tests must not mock the file system, sockets, or memory managers.&#xA;- Tests must use ephemeral TCP ports, generated using appropriate library functions.&#xA;- Tests should inline small fixtures instead of loading them from files.&#xA;- Tests should create large fixtures at runtime rather than store them in files.&#xA;- Tests may create supplementary fixture objects to avoid code duplication.&#xA;- Test method names must spell ‚Äúcannot‚Äù and ‚Äúdont‚Äù without apostrophes&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Link List :: 2025-07-20</title>
      <link>/posts/1753035639-linklist-2025-07-20/</link>
      <pubDate>Sun, 20 Jul 2025 19:09:27 +0100</pubDate>
      <guid>/posts/1753035639-linklist-2025-07-20/</guid>
      <description>&lt;h2 id=&#34;httpsdzonecomarticleskeycloak-mcp-server-tools-quarkus&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/keycloak-mcp-server-tools-quarkus&#34;&gt;https://dzone.com/articles/keycloak-mcp-server-tools-quarkus&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Keycloak Example: Building My First MCP Server Tools With Quarkus&#xA;&#xA;## Introduction&#xA;Learn to build an MCP server for Keycloak using Quarkus and Goose CLI.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcommaciej-trebacztower-of-time-game&#34;&gt;&lt;a href=&#34;https://github.com/maciej-trebacz/tower-of-time-game&#34;&gt;https://github.com/maciej-trebacz/tower-of-time-game&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Entry for Beginner&amp;#39;s Jam Summer 2025: a time-traveling tower defense game where you defend your base against waves of enemies using the power to rewind time, playable at https://m4v3k.itch.io/tower-of-time&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsinventwithpythoncombloglost-av-chapterhtml&#34;&gt;&lt;a href=&#34;https://inventwithpython.com/blog/lost-av-chapter.html&#34;&gt;https://inventwithpython.com/blog/lost-av-chapter.html&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Here is a comprehensive guide to working with multimedia data in Python:&#xA;&#xA;**Multimedia Libraries**&#xA;&#xA;Python has several multimedia libraries installable through pip, including:&#xA;&#xA;* OpenCV: for accessing webcams and recording video&#xA;* Pygame: for playing sound files and recording images from webcams&#xA;* SoundDevice: for recording audio from the computer&amp;#39;s microphone&#xA;* Wavio: for working with wave audio files&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcommehmetkahya0realvision-objectunderstandingai&#34;&gt;&lt;a href=&#34;https://github.com/mehmetkahya0/RealVision-ObjectUnderstandingAI&#34;&gt;https://github.com/mehmetkahya0/RealVision-ObjectUnderstandingAI&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*   Real-time object detection and understanding system powered by state-of-the-art AI models.&#xA;*   Advanced analytics, intuitive interfaces, and enterprise-level performance monitoring.&#xA;*   Support for multiple object classes including people, vehicles, animals, sports, food, furniture, electronics, kitchen tools, and more.&#xA;*   Comprehensive analytics dashboard providing FPS monitoring, inference time, memory usage, detection accuracy, and performance trends over time.&#xA;*   Real-time camera feed with live detection from webcam or IP cameras.&#xA;*   Video file processing with batch processing of video files with progress tracking.&#xA;*   Multi-camera support connecting and processing multiple camera streams.&#xA;&#xA;## Models&#xA;&#xA;*   YOLOv8n: Latest state-of-the-art object detection with 30+ FPS performance.&#xA;*   MobileNet-SSD: Lightweight model optimized for mobile and edge devices.&#xA;*   ONNX Runtime: Cross-platform inference with optimal performance.&#xA;*   EfficientDet-D0: Google&amp;#39;s efficient detection with superior accuracy.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomfrancozanardipictex&#34;&gt;&lt;a href=&#34;https://github.com/francozanardi/pictex&#34;&gt;https://github.com/francozanardi/pictex&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A powerful Python library to create beautifully styled text images with a simple, fluent API.&#xA;* Powered by Google&amp;#39;s Skia graphics engine.&#xA;* Makes it easy to generate styled text images for social media, video overlays, digital art, or any application where stylized text is needed.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomd60twikit&#34;&gt;&lt;a href=&#34;https://github.com/d60/twikit&#34;&gt;https://github.com/d60/twikit&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A Simple Twitter API Scraper&#xA;* You can use functions such as posting or searching for tweets without an API key using this library.&#xA;* Released twikit_grok an extension for using Grok AI with Twikit. https://github.com/d60/twikit_grok&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomnikvdpcco&#34;&gt;&lt;a href=&#34;https://github.com/nikvdp/cco&#34;&gt;https://github.com/nikvdp/cco&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cco provides essential protection while Claude Code is up close and personal with your system. It uses Docker as a barrier to keep Claude contained while keeping your real system safe.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomgendestuscrossexam&#34;&gt;&lt;a href=&#34;https://github.com/gendestus/crossexam&#34;&gt;https://github.com/gendestus/crossexam&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A simple notebook to do RAG based interrogation of congressional bills&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsstylepedianetstylegrammar&#34;&gt;&lt;a href=&#34;https://stylepedia.net/style/#grammar&#34;&gt;https://stylepedia.net/style/#grammar&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Here is a comprehensive guide to writing style for technical documentation, based on the provided rules:&#xA;&#xA;**General Guidelines**&#xA;&#xA;1. **Be concise and clear**: Technical documentation should be easy to understand and free of unnecessary jargon.&#xA;2. **Use proper grammar and spelling**: Ensure that all text is grammatically correct and spelled correctly.&#xA;3. **Use proper punctuation**: Use commas, periods, semicolons, and other punctuation marks consistently throughout the document.&#xA;&#xA;**Specific Guidelines**&#xA;&#xA;1. **Subject-verb agreement**: Ensure that subject-verb agreement is used consistently throughout the document.&#xA;2. **Tense consistency**: Use a consistent tense (e.g., past, present, or future) when describing events.&#xA;3. **Use technical vocabulary correctly**: Use technical terms accurately and consistently throughout the document.&#xA;4. **Avoid contractions**: Avoid using contractions in technical documentation unless absolutely necessary.&#xA;5. **Use &amp;#34;I&amp;#34; sparingly**: Use the second person (&amp;#34;you&amp;#34;) whenever possible to avoid using first-person pronouns (e.g., &amp;#34;I&amp;#34;).&#xA;6. **Avoid passive voice**: Use active voice when describing actions and events.&#xA;7. **Use precise language**: Avoid using vague or ambiguous terms; instead, use specific and precise language to convey meaning.&#xA;&#xA;**Style Conventions**&#xA;&#xA;1. **Capitalization**: Capitalize the first word of each sentence and proper nouns (e.g., names of people, places, and organizations).&#xA;2. **Italicization**: Use italics for emphasis, such as for file paths or URLs.&#xA;3. **Bold formatting**: Use bold formatting to draw attention to important information, such as commands or options.&#xA;4. **Lists**: Use bullet points or numbered lists to present information in a clear and organized manner.&#xA;&#xA;**Special Cases**&#xA;&#xA;1. **Technical terms**: Use technical terms accurately and consistently throughout the document.&#xA;2. **Acronyms**: Define acronyms on their first use and use them consistently thereafter.&#xA;3. **Abbreviations**: Avoid using abbreviations unless absolutely necessary; if used, define them clearly.&#xA;4. **Examples**: Use examples to illustrate complex concepts or procedures.&#xA;&#xA;**Red Flags**&#xA;&#xA;1. **Ambiguous language**: Avoid using ambiguous terms that may be easily misinterpreted.&#xA;2. **Jargon overload**: Be cautious not to overwhelm the reader with too much technical jargon.&#xA;3. **Typos and errors**: Ensure that all text is error-free before publication.&#xA;4. **Outdated information**: Regularly review and update documentation to ensure accuracy and relevance.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomsstopencode&#34;&gt;&lt;a href=&#34;https://github.com/sst/opencode&#34;&gt;https://github.com/sst/opencode&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* AI coding agent built for the terminal&#xA;* Install using `curl -fsSL https://opencode.ai/install | bash`&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomwebdevtodayjasoncontext-forge&#34;&gt;&lt;a href=&#34;https://github.com/webdevtodayjason/context-forge&#34;&gt;https://github.com/webdevtodayjason/context-forge&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Context Forge is a tool that helps teams collaborate on software development projects by providing a set of pre-built templates, validation rules, and other features to ensure code quality and consistency.&#xA;&#xA;**Key Features**&#xA;&#xA;* **CLADE**: The main constitution file for your project, where you define the rules and guidelines for your development workflow.&#xA;* **Implementation Plan**: A breakdown of your development into manageable stages, with tasks and deliverables outlined in each stage.&#xA;* **Project Structure**: A definition of how your code should be organized, including folder structure and naming conventions.&#xA;* **Validation**: Context Forge includes a powerful validation system that ensures code quality, syntax, and testing consistency.&#xA;&#xA;**Best Practices**&#xA;&#xA;* Use `context-forge validate` to run all critical validations on your code before committing it.&#xA;* Regularly update Bug_tracking.md to document issues and bugs encountered during development.&#xA;* Run `context-forge validate --all` for comprehensive checks of your entire project.&#xA;* Add custom tech stack templates and validation commands to further customize the tool to your needs.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomyash9439codetoprompt&#34;&gt;&lt;a href=&#34;https://github.com/yash9439/codetoprompt&#34;&gt;https://github.com/yash9439/codetoprompt&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A command-line and Python tool that transforms local codebases, GitHub repositories, web pages, and online documents into a single, context-rich prompt optimized for Large Language Models (LLMs)&#xA;* Supports compression, intelligent file filtering, multiple output formats, and in-depth analysis of your project&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcompeterkrueckclaude-code-development-kit&#34;&gt;&lt;a href=&#34;https://github.com/peterkrueck/Claude-Code-Development-Kit&#34;&gt;https://github.com/peterkrueck/Claude-Code-Development-Kit&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*   Integrated system transforming Claude Code into an orchestrated development environment&#xA;*   Automated documentation management, multi-agent workflows, and external AI expertise through Sub-Agents&#xA;*   Overcomes challenges in scaling AI-assisted development:&#xA;    *   Managing architecture patterns and design decisions&#xA;    *   Ensuring coding standards and team conventions are followed&#xA;    *   Providing context in large codebases&#xA;*   Solves problems with outdated library documentation, hallucinated API methods, and inconsistent architectural decisions&#xA;    *   Provides the &amp;#34;Four eyes principle&amp;#34; through MCP integration:&#xA;        *   Real-time library docs from Context7&#xA;        *   Architecture consultation from Gemini&#xA;    *   Ensures few errors, better code, and current standards&#xA;*   Offers intelligent automation through hooks and commands:&#xA;    *   Automatic updates of documentation through custom commands&#xA;    *   Context injection for all Sub-agents and Gemini MCP calls&#xA;    *   Audio notifications for task completion (optional)&#xA;    *   One-command workflows for complex tasks&#xA;*   Integrates battle-tested hooks for Claude Code&amp;#39;s capabilities:&#xA;    *   Security Scanner&#xA;    *   Gemini Context Injector&#xA;    *   Subagent Context Injector&#xA;    *   Notification System&#xA;*   Framework designed for adaptation:&#xA;    *   Commands - Modify orchestration patterns in `claude/commands`&#xA;    *   Documentation - Adjust tier structure for your architecture&#xA;    *   MCP Integration - Add additional servers for specialized expertise&#xA;    *   Hooks - Customize security patterns, add new hooks, or modify notifications in `claude/hooks`&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomexistence-mastersentient&#34;&gt;&lt;a href=&#34;https://github.com/existence-master/Sentient&#34;&gt;https://github.com/existence-master/Sentient&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Sentient is an open-source AI project that aims to eliminate prompting and enable truly autonomous AI aligned with user goals.&#xA;* The platform features a journal page, tasks page, and web-based interface for deep integration and automation.&#xA;* Key features include:&#xA;    * SuperMemory: permanent facts storage&#xA;    * Notes &amp;amp; Journal: full-featured journal with contextual updates&#xA;    * Generate Plans from Goals: detailed plans for task execution&#xA;    * Asynchronous Execution: background handling of approved tasks&#xA;    * View &amp;amp; Manage Tasks: dedicated tasks page with progress updates&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomaotakedalocal-lens&#34;&gt;&lt;a href=&#34;https://github.com/aotakeda/local-lens&#34;&gt;https://github.com/aotakeda/local-lens&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Local Lens is a comprehensive tool for server log capture and analysis. Here&amp;#39;s an overview of the project:&#xA;&#xA;**Purpose**&#xA;Local Lens is designed to capture and analyze server logs from any backend framework, providing insights into application performance, security, and user behavior.&#xA;&#xA;**Key Features**&#xA;&#xA;1. **Server Capture**: Local Lens captures logs from servers running on localhost (port 27497).&#xA;2. **Log Analysis**: The tool analyzes captured logs to provide detailed insights into:&#xA;&#x9;* Method and URL&#xA;&#x9;* Request headers and bodies&#xA;&#x9;* Response status codes and content&#xA;&#x9;* Timing and latency&#xA;3. **Domain Filtering**: Local Lens allows users to specify domains or subdomains to capture log data from.&#xA;4. **MCP Integration**: The tool integrates with Model Context Protocol (MCP) for AI assistant access, enabling analysis and debugging of server logs.&#xA;5. **Structured Data**: Local Lens formats logs as JSON, providing a structured format for analysis and integration with other tools.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcompmbstylealice&#34;&gt;&lt;a href=&#34;https://github.com/pmbstyle/Alice&#34;&gt;https://github.com/pmbstyle/Alice&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Say &amp;#34;Hi&amp;#34; to Alice - your open-source AI companion designed to live on your desktop.&#xA;    - Fast, VAD-powered voice recognition (via gpt-4o-transcribe or whisper-large-v3)&#xA;    - Natural-sounding responses with OpenAI TTS&#xA;    - Interruptible speech and streaming response cancellation for smoother flow&#xA;    - Thoughts: Short-term context stored in Hnswlib vector DB&#xA;    - Memories: Structured long-term facts in local DB&#xA;    - Summarization: Compact message history into context prompts&#xA;    - Emotion awareness: Summaries include mood estimation for more human responses&#xA;    - Screenshot interpretation using Vision API&#xA;    - Image generation using gpt-image-1&#xA;    - Animated video states (standby / speaking / thinking)&#xA;&#xA;- Interact with your local system with user-approved permissions:&#xA;    - File system browsing (e.g. listing folders)&#xA;    - Shell command execution (ls, mv, mkdir, etc)&#xA;    - Granular command approvals: one-time, session-based, permanent&#xA;    - Permissions settings tab&#xA;    - Web search&#xA;    - Google Calendar &amp;amp; Gmail integration&#xA;    - Torrent search &amp;amp; download (via Jackett + qBittorrent)&#xA;    - Time &amp;amp; date awareness&#xA;    - Clipboard management&#xA;    - Task scheduler (reminders and command execution)&#xA;    - Open applications &amp;amp; URLs&#xA;    - Image generation&#xA;    - MCP server support&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomcroffasiamcp-project-manager&#34;&gt;&lt;a href=&#34;https://github.com/croffasia/mcp-project-manager&#34;&gt;https://github.com/croffasia/mcp-project-manager&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Hierarchical Task Management via Model Context Protocol (MCP)&#xA;  - Transform any MCP-compatible AI assistant into a powerful project manager with automated task breakdown, dependency tracking, and smart workflow management.&#xA;- Supported tools:&#xA;  - Claude Code ‚Ä¢ Claude Desktop ‚Ä¢ Cursor ‚Ä¢ VS Code + Copilot ‚Ä¢ Continue.dev ‚Ä¢ Any MCP Client&#xA;- Key features:&#xA;  - Complete User Guide - Comprehensive setup and usage guide&#xA;  - Tools Reference - Complete MCP tools documentation&#xA;  - AI Prompts - Ready-to-use prompts for task management&#xA;  - Hierarchical Project Management: Ideas ‚Üí Epics ‚Üí Tasks with intelligent decomposition&#xA;  - AI-Powered Task Creation: Automated breakdown using natural language prompts&#xA;  - Smart Dependency Tracking: Automatic task sequencing and blocker detection&#xA;  - NPX Ready: Zero-installation deployment with npx mcp-project-manager&#xA;  - Interactive CLI Dashboard: Real-time project visualization and navigation&#xA;  - Status Management: Pending ‚Üí In-Progress ‚Üí Done with progress tracking&#xA;  - Approval Workflow: User control over all AI actions and modifications&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Link List :: 2025-07-12</title>
      <link>/posts/1752343767-linklist-2025-07-12/</link>
      <pubDate>Sat, 12 Jul 2025 19:09:27 +0100</pubDate>
      <guid>/posts/1752343767-linklist-2025-07-12/</guid>
      <description>&lt;h2 id=&#34;httpssamwhodevreservoir-sampling&#34;&gt;&lt;a href=&#34;https://samwho.dev/reservoir-sampling/&#34;&gt;https://samwho.dev/reservoir-sampling/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Reservoir sampling is a technique for selecting a fair random sample when you don&amp;#39;t know the size of the set you&amp;#39;re sampling from.&#xA;- It&amp;#39;s used when you can only hold one item at a time and want every item to have an equal chance of being selected.&#xA;- The problem is that when you show n items, 1/n is the chance of each new item being chosen and then it also becomes 1/(n-1) for each previous item that gets replaced, but we only care about the probability of a new card being chosen.&#xA;- When k cards are chosen from n, there&amp;#39;s a formula where 1/n is the chance of each new card being selected and k/(n-1) is the chance of any held card getting replaced, both probabilities staying equal.&#xA;- Reservoir sampling works by generating an array of size k for holding cards. For each new item, it generates a random number between 0 and n. If that&amp;#39;s less than k, replace the card at that index with the new one; otherwise discard the new one.&#xA;- The reservoir sampling algorithm can be used in various scenarios like log collection where you want to receive at most k logs per second but never more.&#xA;- A weighted variant of reservoir sampling exists for cases where some items are more valuable than others.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomarjunprabhulaltabrepositories&#34;&gt;&lt;a href=&#34;https://github.com/arjunprabhulal?tab=repositories&#34;&gt;https://github.com/arjunprabhulal?tab=repositories&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- AI Wanderize: intelligent travel companion that transforms trip planning from overwhelming to effortless&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpssimonwillisonnet2025may15building-on-llmsatom-everything&#34;&gt;&lt;a href=&#34;https://simonwillison.net/2025/May/15/building-on-llms/#atom-everything&#34;&gt;https://simonwillison.net/2025/May/15/building-on-llms/#atom-everything&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* 15th May 2025: Presented a three hour workshop at PyCon US titled &amp;#34;Building software on top of Large Language Models&amp;#34; with interactive exercises and a comprehensive handout.&#xA;* The workshop covered topics such as setup, prompting with LLM, building a text to SQL tool, structured data extraction, semantic search, and tool usage.&#xA;* A detailed handout is available for participants to follow along, including:&#xA;    * Setup‚Äîgetting LLM and related tools installed and configured&#xA;    * Prompting with LLM‚Äîbasic prompting in the terminal and accessing logs&#xA;    * Prompting from Python‚Äîusing LLM&amp;#39;s Python API&#xA;    * Building a text to SQL tool‚Äîthe first building exercise&#xA;    * Structured data extraction‚Äîpossibly the most economically valuable application of LLMs today&#xA;    * Semantic search and RAG‚Äîworking with embeddings and building a semantic search engine&#xA;    * Tool usage‚Äîthe most important technique for building interesting applications on top of LLMs&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomrukaya-deveasely-pyqttabreadme-ov-file&#34;&gt;&lt;a href=&#34;https://github.com/rukaya-dev/easely-pyqt?tab=readme-ov-file&#34;&gt;https://github.com/rukaya-dev/easely-pyqt?tab=readme-ov-file&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Easely empowers clinics to boost operational efficiency and patient care. With PyQt6 for cross-platform desktop functionality and Supabase for a secure Postgres-based backend, it offers an intuitive interface for managing critical workflows. Compatible with Linux, macOS, and Windows, Easely ensures accessibility across devices.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomparsaghaffaribrowserbee&#34;&gt;&lt;a href=&#34;https://github.com/parsaghaffari/browserbee&#34;&gt;https://github.com/parsaghaffari/browserbee&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- BrowserBee is a privacy-first open source Chrome extension that lets you control your browser using natural language.&#xA;- It combines the power of an LLM for instruction parsing &amp;amp; planning, and Playwright for robust browser automation to accomplish tasks.&#xA;&#xA;- BrowserBee is built using Cline, playwright-crx, playwright-mcp, daisyUI, and Running Playwright in the browser.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomicholysloppy&#34;&gt;&lt;a href=&#34;https://github.com/icholy/sloppy&#34;&gt;https://github.com/icholy/sloppy&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A sloppy CLI agent which supports MCP servers,&#xA;* Supports delegation of subtasks through child agents for better context management,&#xA;* Main agent executes its assigned portion of a task and returns summary results,&#xA;* Delegates subtasks using `run_agent` tool,&#xA;* Includes 5 built-in tools:&#xA;    * `run_command` executes shell commands,&#xA;    * `run_agent` delegates subtasks to child agents,&#xA;    * `apply_diff` applies search/replace changes to text files,&#xA;    * `read_file` reads content from a file,&#xA;    * `write_file` creates or replaces a file with specified content,&#xA;* Additional MCP servers can be configured using a `sloppy.json` file in the same format as Cursor&amp;#39;s MCP configs,&#xA;* Configuration options include --builtin flag and --config flag for loading configuration files.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpslibertystreeteconomicsnewyorkfedorg202505why-does-the-u-s-always-run-a-trade-deficit&#34;&gt;&lt;a href=&#34;https://libertystreeteconomics.newyorkfed.org/2025/05/why-does-the-u-s-always-run-a-trade-deficit/&#34;&gt;https://libertystreeteconomics.newyorkfed.org/2025/05/why-does-the-u-s-always-run-a-trade-deficit/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* The United States&amp;#39; trade deficit is primarily driven by a persistent shortfall in domestic saving that requires foreign funding to finance domestic investment spending.&#xA;* In a closed economy, spending equals income, and therefore investment spending equals domestic saving.&#xA;* When an economy opens up to external borrowing or lending, domestic saving and investment spending can diverge.&#xA;* The saving gap framework shows that the difference between domestic saving and investment spending is equivalent to the trade deficit in terms of its overall magnitude.&#xA;* The trade deficit reflects a macroeconomic phenomenon, rather than just differences in exports and imports.&#xA;* Imports and exports are equal when revenue from exports matches spending on imports; otherwise, foreign funds buy domestic assets instead of U.S. exports.&#xA;* The trade deficit is not tied to specific items, but rather a result of the saving gap between domestic and investment spending.&#xA;* Reducing the trade deficit requires both more exports relative to imports and a narrowing of the gap between saving and investment spending.&#xA;* Focusing solely on imports and exports can be misleading, as policy changes may affect the size and composition of cross-border trade without necessarily reducing the overall deficit.&#xA;* The goal of achieving a smaller trade deficit may require painful recalibration of domestic savings and investment.&#xA;* Research has shown that episodes of substantial reductions in trade deficits are often facilitated by lower investment spending followed by higher saving.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomtheopencollmgateway&#34;&gt;&lt;a href=&#34;https://github.com/theopenco/llmgateway&#34;&gt;https://github.com/theopenco/llmgateway&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- LLM Gateway is an open-source API gateway for Large Language Models (LLMs).&#xA;- Acts as a middleware between your applications and various LLM providers.&#xA;- Allows you to route requests to multiple LLM providers, manage API keys, track token usage, analyze performance metrics, and compare different models&amp;#39; performance and cost-effectiveness.&#xA;- Unified API Interface compatible with OpenAI API format for seamless migration.&#xA;- Usage Analytics tracks requests, tokens used, response times, and costs.&#xA;- Multi-provider Support connects to various LLM providers through a single gateway.&#xA;- Performance Monitoring compares different models&amp;#39; performance and cost-effectiveness.&#xA;- Can be used in two ways: Hosted Version or Self-Hosted.&#xA;- Uses the following commands:&#xA;    - `pnpm install` to install dependencies.&#xA;    - `pnpm dev` to start development servers.&#xA;    - `pnpm build` to build for production.&#xA;- Project is licensed under the MIT License, see LICENSE file for details.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpswwwcrackingmarketscomcomparing-affordable-intraday-data-sources-tradestation-vs-polygon-vs-alpaca&#34;&gt;&lt;a href=&#34;https://www.crackingmarkets.com/comparing-affordable-intraday-data-sources-tradestation-vs-polygon-vs-alpaca/&#34;&gt;https://www.crackingmarkets.com/comparing-affordable-intraday-data-sources-tradestation-vs-polygon-vs-alpaca/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+ We compared the quality and pricing of historical intraday data from TradeStation, Polygon.io, and Alpaca for US stocks/ETFs.&#xA;+ All three providers offer 1-minute bar data, but with different pricing models: free or low-cost options (Alpaca, TradeStation) vs. a subscription-based service (Polygon.io).&#xA;+ Key findings:&#xA;  - Near-perfect price correlation among all three providers for 1-minute data (1.0).&#xA;  - Significant volume discrepancies between TradeStation and Polygon.io/Alpaca.&#xA;  - Small but notable differences in specific price points.&#xA;* # Conclusion&#xA;+ Alpaca emerges as the standout winner for algorithmic traders seeking reliable and affordable historical intraday data due to its exceptional value proposition, including free access to 10 years of high-quality data.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpswwwredditcomrpythoncomments1kt9s05pykomodo_built_a_web_ui_for_code_chunking_no_more&#34;&gt;&lt;a href=&#34;https://www.reddit.com/r/Python/comments/1kt9s05/pykomodo_built_a_web_ui_for_code_chunking_no_more/&#34;&gt;https://www.reddit.com/r/Python/comments/1kt9s05/pykomodo_built_a_web_ui_for_code_chunking_no_more/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A project called Pykomodo built a web UI for code chunking, addressing common issues with CLI-only tools such as remembering command syntax and typing long file paths.&#xA;* Pykomodo provides a visual file browser, selective file processing, multiple input methods, and chunking strategies.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomlambda-sciencemodern-python-boilerplate&#34;&gt;&lt;a href=&#34;https://github.com/lambda-science/modern-python-boilerplate&#34;&gt;https://github.com/lambda-science/modern-python-boilerplate&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Uses UV and Make for tooling, structure, and good practices&#xA;- Global Makefile available with `make help` to see all commands&#xA;- Continuous Integration&#xA;    - `make allci` for Ruff linting&#xA;    - `make check` for Ruff formatting&#xA;    - `make type` for Ty type checking&#xA;    - `make test` for Pytest testing&#xA;    - `make cov` for Pytest-cov testing coverage&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomhabedicogitator&#34;&gt;&lt;a href=&#34;https://github.com/habedi/cogitator&#34;&gt;https://github.com/habedi/cogitator&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Cogitator is a Python toolkit for experimenting and working with chain-of-thought (CoT) prompting methods in large language models (LLMs).&#xA;* CoT prompting improves LLM performance on complex tasks by guiding the models to generate intermediate reasoning steps before arriving at the final answer.&#xA;* It can also improve the interpretability of LLMs by providing insight into the model&amp;#39;s reasoning process.&#xA;* The toolkit aims to make it easier to use popular CoT strategies and frameworks for research or integrating them into AI applications.&#xA;&#xA;* Provides unified sync/async API for CoT strategies&#xA;* Supports using OpenAI and Ollama as LLM providers&#xA;* Supports structured model output with Pydantic validation&#xA;* Includes a customizable benchmarking framework (see benches)&#xA;* Includes implementations of popular CoT strategies and frameworks like&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomajac-zeroreact-fastapi-template&#34;&gt;&lt;a href=&#34;https://github.com/ajac-zero/react-fastapi-template&#34;&gt;https://github.com/ajac-zero/react-fastapi-template&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A modern full-stack template featuring React for the frontend and FastAPI for the backend, bundled together in a single container using NGINX Unit.&#xA;* React Frontend:&#xA;    * TypeScript support&#xA;    * TailwindCSS + shadcn/ui components&#xA;    * Fast refresh during development&#xA;    * Optimized production build&#xA;* FastAPI Backend:&#xA;    * Python type hints&#xA;    * OpenAPI/Swagger documentation&#xA;    * Async support&#xA;    * Built-in state management example&#xA;* Production Ready:&#xA;    * Single container deployment with NGINX Unit&#xA;    * Multi-stage Docker builds&#xA;    * Efficient caching for dependencies&#xA;    * Static file serving&#xA;* Setup for local development with hot-reload capabilities for both frontend and backend.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsmkosirgithubiotypescript-style-guide&#34;&gt;&lt;a href=&#34;https://mkosir.github.io/typescript-style-guide/&#34;&gt;https://mkosir.github.io/typescript-style-guide/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;This is a style guide for React development, covering various aspects of coding conventions, testing, and best practices. Here are the main sections:&#xA;&#xA;**Components**&#xA;&#xA;* Use functions as the default component type (`React.FC`).&#xA;* Prefer container components with postfix &amp;#34;Container&amp;#34; or &amp;#34;Page&amp;#34;.&#xA;* Feature components should be representedational, nested inside container components.&#xA;* Design system components (e.g., Button) should be reusable and global.&#xA;&#xA;**Props**&#xA;&#xA;* Avoid using props to state. If necessary, prefix the prop with `initial`.&#xA;* Use props argument with type instead of `React.FC` type.&#xA;* Pass only necessary props to child components.&#xA;* Utilize storing state in the URL for filtering, sorting, etc.&#xA;&#xA;**Testing**&#xA;&#xA;* Implement tests that are short, explicit, and pleasant to work with.&#xA;* Strive for AAA pattern (Arrange-Act-Assert) in unit tests.&#xA;* Keep functions pure and impure small and focused.&#xA;* Write tests as isolated as possible and resilient to changes.&#xA;* Black box testing is encouraged, testing implementation details is not.&#xA;&#xA;**Best Practices**&#xA;&#xA;* Avoid using React.FC type directly; instead, use the function type with props argument.&#xA;* Consider refactoring render method, local states in parent components, and using composition when prop drilling becomes an issue.&#xA;* Use server-state library for data fetching (e.g., react-query) and client-state library for global state is discouraged.&#xA;&#xA;**Code Style**&#xA;&#xA;* Follow the naming convention &amp;#34;it(&amp;#39;should ... when ...&amp;#39;)&amp;#34; for test descriptions.&#xA;* Avoid snapshot tests unless there&amp;#39;s a strong rationale behind them.&#xA;* Keep the codebase stable by avoiding unnecessary changes to tests.&#xA;&#xA;Overall, this style guide emphasizes best practices, conventions, and testing principles for React development.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomdoddprontercc_optimizer&#34;&gt;&lt;a href=&#34;https://github.com/doddpronter/cc_optimizer&#34;&gt;https://github.com/doddpronter/cc_optimizer&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* It analyzes covered call options across all tickers listed in stocks.txt.&#xA;* It calculates key features to help identify the most attractive contracts based on reward vs. risk.&#xA;* Features include:&#xA;  * Stock Return Cap&#xA;  * Premium Return&#xA;  * Annualized Premium Return&#xA;  * Cost for 100 Shares&#xA;  * Breakeven Point&#xA;  * Downside Protection&#xA;  * Dollar Return on Premium&#xA;* The tool can sort and filter results in real time to identify the highest yielding covered call setups based on return, downside protection, or breakeven price.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomarosovlazyaider&#34;&gt;&lt;a href=&#34;https://github.com/arosov/lazyaider&#34;&gt;https://github.com/arosov/lazyaider&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Seamless Tmux Integration: LazyAider automatically manages tmux sessions, providing a dedicated and organized workspace with a main shell pane and a sidebar for the LazyAider application.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomkrisrehfussgptnavtabreadme-ov-file&#34;&gt;&lt;a href=&#34;https://github.com/KrisRehfuss/GPTNav?tab=readme-ov-file&#34;&gt;https://github.com/KrisRehfuss/GPTNav?tab=readme-ov-file&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- A browser extension that adds a floating overlay to ChatGPT conversations, allowing users to quickly navigate through their questions and responses.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomcarlrobertohproxyai&#34;&gt;&lt;a href=&#34;https://github.com/carlrobertoh/ProxyAI&#34;&gt;https://github.com/carlrobertoh/ProxyAI&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*Connect to any model in any environment and customize your coding experience.*&#xA;*Access top-tier language models from OpenAI, Anthropic, Azure, Mistral, and others.*&#xA;*Opt for a self-hosted model for a full offline experience.*&#xA;&#xA;*Features:*&#xA;*- Auto Apply*: Stream AI-suggested code changes into your editor.&#xA;*- Use images*: Chat with images in your chat session.&#xA;*- Reference files and folders*: Access project files and folders for context-aware coding assistance.&#xA;*- Reference web docs*: Quickly reference web docs in your chat session.&#xA;*- Reference git history*: Quickly reference commit logs and changes in your chat session.&#xA;*- Search the web*: Connect to a favourite LLM and search for relevant information.&#xA;*- Customize your assistant*: Choose between multiple personas for specific needs.&#xA;*- Next edits*: Get multi-line edits based on recent activity as you type.&#xA;*- Autocomplete code*: Receive single-line or whole-function autocomplete suggestions as you type.&#xA;*- Edit code in natural language*: Highlight code, describe changes, and watch ProxyAI work its magic.&#xA;*- Get name suggestions*: Get context-aware naming suggestions for methods, variables, and more.&#xA;*- Generate commit messages*: Generate concise and descriptive commit messages based on changes made.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsaddyosubstackcompthe-prompt-engineering-playbook-for&#34;&gt;&lt;a href=&#34;https://addyo.substack.com/p/the-prompt-engineering-playbook-for&#34;&gt;https://addyo.substack.com/p/the-prompt-engineering-playbook-for&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;This article provides an in-depth guide on prompt engineering, a crucial skill for developers working with AI code assistants. The author covers various aspects of effective prompting, including:&#xA;&#xA;1. Crafting clear and context-rich prompts: Providing the necessary information about the code, problem, or feature being asked to solve.&#xA;2. Iterating with the AI: Refining solutions through multiple prompts, refining assumptions, and breaking down complex requests into smaller, manageable pieces.&#xA;3. Role-playing and personas: Treating the AI as a code reviewer, mentor, or expert in a specific stack to elicit more rigorous and explanation-rich outputs.&#xA;4. Refactoring and optimization: Defining what &amp;#34;good&amp;#34; looks like (e.g., faster, cleaner, more idiomatic) and leveraging the AI&amp;#39;s knowledge of best practices to improve code quality.&#xA;5. Pitfalls to avoid: Keeping prompts neither too vague nor too overloaded, specifying intent and constraints, and being prepared to adjust when the AI&amp;#39;s output is off-target.&#xA;&#xA;The author also highlights the importance of patience, iteration, and iterative dialogue in prompting, emphasizing that it&amp;#39;s essential to approach prompting with the same clarity, patience, and thoroughness as communicating with another engineer.&#xA;&#xA;Key takeaways from this article include:&#xA;&#xA;* Prompt engineering empowers developers to get more out of AI assistants.&#xA;* It&amp;#39;s a skill that requires practice, patience, and iteration.&#xA;* Effective prompting involves providing context-rich information, refining assumptions, and breaking down complex requests into smaller pieces.&#xA;* The author provides practical tips and strategies for refining prompts, including using role-playing and personas, defining what &amp;#34;good&amp;#34; looks like, and avoiding common pitfalls.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomdaggercontainer-use&#34;&gt;&lt;a href=&#34;https://github.com/dagger/container-use&#34;&gt;https://github.com/dagger/container-use&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* üì¶ Isolated Environments: Each agent gets a fresh container in its own git branch - run multiple agents without conflicts, experiment safely, discard failures instantly&#xA;* üëÄ Real-time Visibility: See complete command history and logs of what agents actually did, not just what they claim&#xA;* üöÅ Direct Intervention: Drop into any agent&amp;#39;s terminal to see their state and take control when they get stuck&#xA;* üéÆ Environment Control: Standard git workflow - just `git checkout &amp;lt;branch_name&amp;gt;` to review any agent&amp;#39;s work&#xA;* üåé Universal Compatibility: Works with any agent, model, or infrastructure - no vendor lock-in&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomnibzardllm-loop&#34;&gt;&lt;a href=&#34;https://github.com/nibzard/llm-loop&#34;&gt;https://github.com/nibzard/llm-loop&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* An autonomous task execution plugin for the LLM CLI tool&#xA;* llm loop is a powerful plugin for the LLM CLI tool that enables autonomous, goal-oriented task execution&#xA;* Goal-Oriented Execution: Define a task and let the AI work autonomously to complete it&#xA;* Tool Integration: Seamlessly use LLM tools and functions to interact with your environment&#xA;* Iterative Problem Solving: The AI can chain multiple tool calls and adapt based on results&#xA;* Interactive Control: Configure turn limits, approve tool calls, and guide the process&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomozanunal0gemini-engineer&#34;&gt;&lt;a href=&#34;https://github.com/ozanunal0/gemini-engineer&#34;&gt;https://github.com/ozanunal0/gemini-engineer&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* An interactive, AI-driven terminal application that acts as a software engineering assistant.&#xA;* Uses Google&amp;#39;s Gemini Pro model for intelligent code analysis and suggestions.&#xA;* Provides file system operations through AI function calls.&#xA;* Features an interactive terminal interface with Rich and prompt_toolkit.&#xA;* Supports seamless integration between AI reasoning and local file operations.&#xA;* Includes context management, streaming responses, safety features, and Python 3.11 or higher.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomkhaledhpagemagic&#34;&gt;&lt;a href=&#34;https://github.com/khaledh/pagemagic&#34;&gt;https://github.com/khaledh/pagemagic&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Page Magic is a Chrome extension that uses AI to customize the appearance of any web page.&#xA;* Just tell Page Magic what you want to change and it will do it for you.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomg1ibbydcd&#34;&gt;&lt;a href=&#34;https://github.com/g1ibby/dcd&#34;&gt;https://github.com/g1ibby/dcd&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Deploy Docker Compose apps to remote servers with just one command. Analyzes configs, syncs files, and manages services over SSH so you don&amp;#39;t have to&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomcollidingscopes3d-model-playground&#34;&gt;&lt;a href=&#34;https://github.com/collidingScopes/3d-model-playground&#34;&gt;https://github.com/collidingScopes/3d-model-playground&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Control 3D models using hand gestures and voice commands in real-time with an interactive web app built on threejs, mediapipe computer vision, web speech API, and rosebud AI.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomdineshgowda24alfred-gcp-workflow&#34;&gt;&lt;a href=&#34;https://github.com/dineshgowda24/alfred-gcp-workflow&#34;&gt;https://github.com/dineshgowda24/alfred-gcp-workflow&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* An Alfred workflow that lets you instantly open Google Cloud services or search GCP resources.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomjatinkrmalikllmfeeder&#34;&gt;&lt;a href=&#34;https://github.com/jatinkrmalik/LLMFeeder&#34;&gt;https://github.com/jatinkrmalik/LLMFeeder&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Browser Extension for Converting Web Content to Markdown and Copying it to Clipboard&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomcoffeegrind123gemini-code&#34;&gt;&lt;a href=&#34;https://github.com/coffeegrind123/gemini-code&#34;&gt;https://github.com/coffeegrind123/gemini-code&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Directly use Claude Code with Google Gemini models via a bridge server&#xA;- Seamless model mapping and integration between Claude Code and Gemini models&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomzentar-aizentara-code&#34;&gt;&lt;a href=&#34;https://github.com/Zentar-Ai/zentara-code/&#34;&gt;https://github.com/Zentar-Ai/zentara-code/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Zentara Code is an interactive debugging tool for various programming languages, including Python, JavaScript, and TypeScript. It provides a step-by-step, guided debugging process that helps users identify and fix bugs in their code.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcommsveshnikovautocode-ai&#34;&gt;&lt;a href=&#34;https://github.com/msveshnikov/autocode-ai&#34;&gt;https://github.com/msveshnikov/autocode-ai&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* AutoCode is an innovative automatic coding tool designed to bootstrap any software project incrementally, transforming README.md instructions into a fully functional software project using various APIs.&#xA;* NodeJS-based console application with automatic code generation based on README.md instructions and incremental project building.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomsdi2200262agentic-project-management&#34;&gt;&lt;a href=&#34;https://github.com/sdi2200262/agentic-project-management&#34;&gt;https://github.com/sdi2200262/agentic-project-management&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Manage complex projects with a team of AI assistants using Agentic Project Management (APM) framework.&#xA;* APM tackles context window limitations by mimicking real teams, smart agent management, efficient budgeting, and user-centric control.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomcorenzanprovision&#34;&gt;&lt;a href=&#34;https://github.com/corenzan/provision&#34;&gt;https://github.com/corenzan/provision&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Provision is a POSIX-compliant shell script that helps with the initial configuration required for a production-grade Debian-based server to host websites and applications. It&amp;#39;s tailor-made for my needs, but it just might suit yours.&#xA;&#xA;Here&amp;#39;s an overview of what it&amp;#39;ll do:&#xA;&#xA;Update the server&amp;#39;s hostname.&#xA;Upgrade existing packages.&#xA;Install Docker, fail2ban, and several other software.&#xA;Harden SSH configuration and switch to an alternative port (822).&#xA;Configure the firewall to block any incoming traffic except on selected ports (822, 443, 80) on both IPv4 and IPv6.&#xA;Change the root password.&#xA;Create a dedicated user and directory for project deployment, with proper ACL and permissions so other users can manage it.&#xA;Allow passwordless sudo.&#xA;Create swap space equivalent to the available memory, up to 16GB.&#xA;Register a new system administrator user with a strong random password and SSH access.&#xA;Install opinionated administrative tools.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomopen-nudgeopentemplate&#34;&gt;&lt;a href=&#34;https://github.com/open-nudge/opentemplate&#34;&gt;https://github.com/open-nudge/opentemplate&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;All-in-one Python template. One click. Everything included.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomkbwoccmanager&#34;&gt;&lt;a href=&#34;https://github.com/kbwo/ccmanager&#34;&gt;https://github.com/kbwo/ccmanager&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- CCManager is a TUI application for managing multiple AI coding assistant sessions (Claude Code, Gemini CLI) across Git worktrees.&#xA;- Run multiple AI assistant sessions in parallel across different Git worktrees&#xA;- Support for multiple AI coding assistants (Claude Code, Gemini CLI)&#xA;- Switch between sessions seamlessly&#xA;- Visual status indicators for session states (busy, waiting, idle)&#xA;- Create, merge, and delete worktrees from within the app&#xA;- Configurable keyboard shortcuts&#xA;- Command presets with automatic fallback support&#xA;- Configurable state detection strategies for different CLI tools&#xA;- Status change hooks for automation and notifications&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomrichstokesinfinichat&#34;&gt;&lt;a href=&#34;https://github.com/richstokes/InfiniChat&#34;&gt;https://github.com/richstokes/InfiniChat&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- InfiniChat is a command-line application that simulates conversations between two LLMs running locally using Ollama.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcommuvonoctomind&#34;&gt;&lt;a href=&#34;https://github.com/Muvon/octomind&#34;&gt;https://github.com/Muvon/octomind&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Octomind is an AI-powered development assistant that helps understand, analyze, and interact with codebases through natural language conversations.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomvitali87code-graph-rag&#34;&gt;&lt;a href=&#34;https://github.com/vitali87/code-graph-rag&#34;&gt;https://github.com/vitali87/code-graph-rag&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Retrieval-Augmented Generation (RAG) System&#xA;## Overview&#xA;- Multi-Language Support: Supports Python, JavaScript, TypeScript, Rust, Go, Scala, Java, and C++ codebases&#xA;- Tree-sitter Parsing: Uses Tree-sitter for robust, language-agnostic AST parsing&#xA;- Knowledge Graph Storage: Uses Memgraph to store codebase structure as an interconnected graph&#xA;- Natural Language Querying: Ask questions about your codebase in plain English&#xA;- AI-Powered Cypher Generation: Supports both cloud models (Google Gemini) and local models (Ollama)&#xA;- Code Snippet Retrieval: Retrieves actual source code snippets for found functions/methods&#xA;- Advanced File Editing: Surgical code replacement with AST-based function targeting, visual diff previews, and exact code block modifications&#xA;- Shell Command Execution: Can execute terminal commands for tasks like running tests or using CLI tools.&#xA;- Interactive Code Optimization: AI-powered codebase optimization with language-specific best practices and interactive approval workflow&#xA;- Reference-Guided Optimization: Use your own coding standards and architectural documents to guide optimization suggestions&#xA;- Dependency Analysis: Parses pyproject.toml to understand external dependencies&#xA;- Nested Function Support: Handles complex nested functions and class hierarchies&#xA;- Language-Agnostic Design: Unified graph schema across all supported languages&#xA;&#xA;## System Components&#xA;- Multi-language Parser (Tree-sitter based): Analyzes codebases and ingests data into Memgraph&#xA;- RAG System (codebase_rag/): Interactive CLI for querying the stored knowledge graph&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomexplosion-scratchto-userscript&#34;&gt;&lt;a href=&#34;https://github.com/Explosion-Scratch/to-userscript&#34;&gt;https://github.com/Explosion-Scratch/to-userscript&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A powerful CLI for converting browser extensions into standalone userscripts.&#xA;* Converts browser extensions into portable userscripts that can be run in any userscript manager.&#xA;* Allows use or modification of extensions on browsers or platforms that might not natively support them.&#xA;* Converts from Chrome Web Store, Firefox Add-ons site, direct URLs, local directories, or archive files.&#xA;* Replaces WebExtension APIs with userscript-compatible equivalents.&#xA;* Asset inlining: Embeds CSS, images, fonts, and other resources into the userscript.&#xA;* Renders extension popup and options pages within an embedded modal.&#xA;* Emulates background script environment.&#xA;* Respects locales directories and uses specified or default locale for manifest, text, etc.&#xA;&#xA;* Convert from:&#xA;    * Chrome Web Store with minification.&#xA;    * Local directory with French localization.&#xA;    * Downloaded XPI to vanilla JS.&#xA;    * Using pnpm dlx to download Material Design File Icons.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomtraverser25stewie_it_v1&#34;&gt;&lt;a href=&#34;https://github.com/Traverser25/Stewie_it_v1&#34;&gt;https://github.com/Traverser25/Stewie_it_v1&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Stewie_it v1 is an experimental automation project inspired by a viral Instagram trend where Stewie and Peter Griffin humorously explain coding topics over gameplay footage (recent trend)&#xA;* This project automates assembling these videos by combining user-provided scripts, AI-scraped voices, character images, and gameplay background, then sending them to user.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomyahorbarkouskisemantic-mail&#34;&gt;&lt;a href=&#34;https://github.com/yahorbarkouski/semantic-mail&#34;&gt;https://github.com/yahorbarkouski/semantic-mail&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Lightweight CLI agent to semantically search and ask your emails&#xA;- Downloads inbox, generates embeddings using local (or external) LLMs, and stores everything in a vector database on your machine&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomcontinuedevrules&#34;&gt;&lt;a href=&#34;https://github.com/continuedev/rules/&#34;&gt;https://github.com/continuedev/rules/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* npm i -g rules-cli&#xA;* To download rules, use `rules add` followed by a repository path (e.g. `starter/nextjs-rules`)&#xA;* Rules can be published using `rules publish`, making them available for others to download&#xA;* Rules supports multiple formats: cursor, continue, windsurf, claude, copilot, codex, cline, cody, and amp&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcommebaadwaheedwinup&#34;&gt;&lt;a href=&#34;https://github.com/mebaadwaheed/winup&#34;&gt;https://github.com/mebaadwaheed/winup&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- A modern UI framework for building beautiful desktop applications&#xA;- Supports building fully interactive, stateful web applications using FastAPI and WebSockets&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomggozadhaikurag&#34;&gt;&lt;a href=&#34;https://github.com/ggozad/haiku.rag&#34;&gt;https://github.com/ggozad/haiku.rag&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Retriever-Augmented Generation (RAG) library on SQLite: haiku.rag&#xA;* Built to work on SQLite alone without external vector databases&#xA;* Uses sqlite-vec for storing embeddings and performs semantic and full-text search combined through Reciprocal Rank Fusion&#xA;* Open-source (Ollama), commercial (OpenAI, VoyageAI) embedding providers supported&#xA;* Multiple QA providers: Ollama, OpenAI, Anthropic&#xA;* Hybrid search: Vector + full-text search with Reciprocal Rank Fusion&#xA;* Built-in QA agents on documents&#xA;* File monitoring: Auto-index files when run as server&#xA;* 40+ file formats: PDF, DOCX, HTML, Markdown, audio, URLs&#xA;* MCP server: Expose as tools for AI assistants&#xA;* CLI &amp;amp; Python API: Use from command line or Python&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcompsyb0tdocker-claude-code&#34;&gt;&lt;a href=&#34;https://github.com/psyb0t/docker-claude-code&#34;&gt;https://github.com/psyb0t/docker-claude-code&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-claude but dockerized, goth-approved, and dangerously executable&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomstravucrystal&#34;&gt;&lt;a href=&#34;https://github.com/stravu/crystal&#34;&gt;https://github.com/stravu/crystal&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Create sessions from prompts, each in an isolated git worktree&#xA;- Iterate with Claude Code inside your sessions. Each iteration will make a commit so you can always go back&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomnocode-jssequential-workflow-designer&#34;&gt;&lt;a href=&#34;https://github.com/nocode-js/sequential-workflow-designer&#34;&gt;https://github.com/nocode-js/sequential-workflow-designer&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Sequential workflow designer for web applications, written in pure TypeScript and using SVG for rendering.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomcairn-devcairn&#34;&gt;&lt;a href=&#34;https://github.com/cairn-dev/cairn&#34;&gt;https://github.com/cairn-dev/cairn&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Github-integrated background agents for automating end-to-end software engineering&#xA;* Fully open source, built in the style of a product management tool&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomthe-pocketpocketflow-tutorial-website-chatbot&#34;&gt;&lt;a href=&#34;https://github.com/The-Pocket/PocketFlow-Tutorial-Website-Chatbot&#34;&gt;https://github.com/The-Pocket/PocketFlow-Tutorial-Website-Chatbot&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Want an AI chatbot for your website? The chatbot itself is easy‚Äîthe real headache is keeping its knowledge up-to-date every time you change your content. This tutorial shows you how to build a truly &amp;#34;set and forget&amp;#34; AI chatbot that learns directly from your live website, so its knowledge stays current automatically. No manual updates. Ever.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomneg4ntypescript-library-template&#34;&gt;&lt;a href=&#34;https://github.com/neg4n/typescript-library-template&#34;&gt;https://github.com/neg4n/typescript-library-template&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Production ready minimal template for developing and releasing TypeScript libraries, including automated GitHub repository setup.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomstan-smithfossflow&#34;&gt;&lt;a href=&#34;https://github.com/stan-smith/FossFLOW&#34;&gt;https://github.com/stan-smith/FossFLOW&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* FossFLOW is a powerful, open-source Progressive Web App (PWA) for creating beautiful isometric diagrams built with React and the Isoflow library, running entirely in your browser with offline support.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomkingdomseedstructured-workflow-mcp&#34;&gt;&lt;a href=&#34;https://github.com/kingdomseed/structured-workflow-mcp&#34;&gt;https://github.com/kingdomseed/structured-workflow-mcp&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* # MCP Server&#xA;    * Disciplined programming practices enforced by requiring AI assistants to audit their work and produce verified outputs at each phase of development.&#xA;&#xA;* # Workflow Phases&#xA;    * Enforced workflow phases:&#xA;        + Setup&#xA;        + Audit&#xA;        + Analysis&#xA;        + Planning&#xA;        + Implementation&#xA;        + Testing&#xA;        + Iterate&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomnativemindbrowsernativemindextension&#34;&gt;&lt;a href=&#34;https://github.com/NativeMindBrowser/NativeMindExtension&#34;&gt;https://github.com/NativeMindBrowser/NativeMindExtension&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Contextual Awareness Across Tabs: Seamlessly continue AI conversations with memory that spans across tabs&#xA;* AI-Powered Local Search: Ask questions and search the web directly from your browser‚Äîno third-party APIs required&#xA;* Smart Page Understanding: Instantly summarize and interpret any webpage content&#xA;* Bilingual Translation: Translate full pages or selected text with side-by-side view (supports multiple languages)&#xA;* Quick Prompts: Save and trigger your frequently used prompts with a single click&#xA;* Writing Enhancement: Rewrite, proofread, and creatively rephrase content with intelligent suggestions&#xA;* Custom Prompts for Any Task: Adapt system prompts to match your workflow and local model capabilities&#xA;* Chat with PDFs (coming soon): Ask questions directly about local PDF files&#xA;* Chat with Images (coming soon): Understand and interact with visual content, including screenshots and uploaded images&#xA;* Offline-First: Use all features without an internet connection after downloading a model‚Äîyour data stays on your device&#xA;* Model Switching: Easily switch between models based on performance, speed, or privacy needs&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Link List :: 2025-05-25</title>
      <link>/posts/1748181366-linklist-2025-05-25/</link>
      <pubDate>Sun, 25 May 2025 10:00:25 +0000</pubDate>
      <guid>/posts/1748181366-linklist-2025-05-25/</guid>
      <description>&lt;h2 id=&#34;httpsgithubcomrneatherwaygh-slack&#34;&gt;&lt;a href=&#34;https://github.com/rneatherway/gh-slack&#34;&gt;https://github.com/rneatherway/gh-slack&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* This project provides a means of archiving a Slack conversation or thread as markdown.&#xA;* For convenience, it is installable as a gh extension: `gh extension install https://github.com/rneatherway/gh-slack` and then upgrade with `gh extension upgrade gh-slack`&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomautomataaicodeguidetabreadme-ov-filevibe&#34;&gt;&lt;a href=&#34;https://github.com/automata/aicodeguide?tab=readme-ov-file#vibe&#34;&gt;https://github.com/automata/aicodeguide?tab=readme-ov-file#vibe&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;This is an extensive guide on how to use Large Language Models (LLMs) for coding purposes. Here&amp;rsquo;s a summary of the main points:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Getting started with LLMs&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Choose an LLM tool, such as Cursor Agent or Aider.&lt;/li&gt;&#xA;&lt;li&gt;Set up your development environment and project structure.&lt;/li&gt;&#xA;&lt;li&gt;Create a PRD (Product Requirements Document) to guide your LLM&amp;rsquo;s implementation.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;LLM Training and Guidelines&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Link List :: 2025-03-30</title>
      <link>/posts/1743339206-linklist-2025-03-30/</link>
      <pubDate>Sun, 30 Mar 2025 10:00:25 +0000</pubDate>
      <guid>/posts/1743339206-linklist-2025-03-30/</guid>
      <description>&lt;h2 id=&#34;httpsgithubcomfocused-dot-iohotmic&#34;&gt;&lt;a href=&#34;https://github.com/focused-dot-io/hotmic&#34;&gt;https://github.com/focused-dot-io/hotmic&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Lightweight desktop application for audio transcription using Groq API and Whisper-large-v3 model&#xA;* Press global shortcut to start/stop recording&#xA;* Audio sent to Groq API for transcription&#xA;* Results automatically copied to clipboard&#xA;* Visual feedback during recording and processing&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomjbellisbrokk&#34;&gt;&lt;a href=&#34;https://github.com/jbellis/brokk/&#34;&gt;https://github.com/jbellis/brokk/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Brokk: first code assistant that understands code semantically, designed for large codebases&#xA;- Run using jbang (recommended): install jbang and run `jbang run brokk@jbellis/brokk` or download JAR and run manually&#xA;- Features:&#xA;  - Agentic search/code retrieval&#xA;  - Automatically capture context from search results&#xA;  - Capture/incorporate external context using &amp;#34;Run&amp;#34; combined with &amp;#34;Capture Text&amp;#34;/&amp;#34;Edit Files&amp;#34;&#xA;  - Undo includes filesystem changes&#xA;  - Use History Panel to keep track, undo, or redo changes&#xA;- Scenarios:&#xA;  - Identify commit causing regression using `git bisect`&#xA;  - Load commit and files changed by that commit as editable context&#xA;  - Tell LLM to look at changes to see what could cause problem&#xA;- Real-world tasks:&#xA;  - Make complex, multi-file edits with o1pro&#xA;  - Use Brokk to help with poorly documented dependencies&#xA;  - Summarize classes using `Summarize Fields` and use globbing&#xA;- Limitations:&#xA;  - &amp;#34;Stop&amp;#34; button not working reliably during search (langchain4j/langchain4j#2658)&#xA;  - Joern needs to run delombok before analysis can begin&#xA;  - No automatic running of tests&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomrefly-airefly&#34;&gt;&lt;a href=&#34;https://github.com/refly-ai/refly&#34;&gt;https://github.com/refly-ai/refly&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Refly is an open-source AI-native creation engine powered by 13+ leading AI models.&#xA;&#xA;* # Features and Capabilities&#xA;- Multi-threaded architecture for parallel management of independent conversation contexts&#xA;- Integration with 13+ leading language models&#xA;- Support for model hybrid scheduling and parallel processing&#xA;- Flexible model switching mechanism with unified conversation interface&#xA;- Multi-model knowledge base collaboration&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomzajakofallogical&#34;&gt;&lt;a href=&#34;https://github.com/zajako/Fallogical&#34;&gt;https://github.com/zajako/Fallogical&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Fallogical is an application that listens to conversations, detects logical fallacies in real-time, and interrupts with explanations when fallacies are identified using local Ollama models for AI processing.&#xA;* Real-time audio recording and transcription&#xA;* Logical fallacy detection using local Ollama AI models&#xA;* Voice interruptions with fallacy explanations&#xA;* Support for detecting common logical fallacies like ad hominem, straw man, appeal to authority, etc.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomevoluteurisomorphic-table-cards&#34;&gt;&lt;a href=&#34;https://github.com/evoluteur/isomorphic-table-cards&#34;&gt;https://github.com/evoluteur/isomorphic-table-cards&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Isomorphic-Table-Cards: a JavaScript class for Table and Cards views with animated transitions&#xA;* Uses Vanilla Javascript, CSS, and HTML&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomcaioricciuticr-mac-helper&#34;&gt;&lt;a href=&#34;https://github.com/caioricciuti/cr-mac-helper&#34;&gt;https://github.com/caioricciuti/cr-mac-helper&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* CR-Mac Helper is a personal project designed to streamline Mac maintenance and management, automating cleaning, auditing, and optimizing macOS environment.&#xA;* The script offers various modules for:&#xA; + App Cleanup and Management&#xA; + Path Management&#xA; + Cache and Temp File Management&#xA; + Login Items Management&#xA; + System Maintenance&#xA; + System Optimization&#xA; + Network Optimization&#xA; + Battery Optimization (for MacBooks)&#xA; + Security Cleanup&#xA; + Hidden Folders Cleanup&#xA; + System Audit and Reports&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcommartin226vibe-draw&#34;&gt;&lt;a href=&#34;https://github.com/martin226/vibe-draw&#34;&gt;https://github.com/martin226/vibe-draw&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Turn your roughest sketches into stunning 3D worlds by vibe drawing&#xA;* Sketch: Draw freely on the 2D canvas&#xA;* Enhance: Use the &amp;#34;Improve Drawing&amp;#34; button to refine sketches into detailed, polished drawings&#xA;* Transform: Click &amp;#34;Make 3D&amp;#34; to convert your drawing into a 3D model&#xA;* Build: Add your 3D models to the world by switching to the 3D World tab&#xA;* Iterate: Edit and refine your 3D models by sketching or by writing a text prompt&#xA;* Export: Export your 3D world with 1 click in a standard format (.glTF)&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Link List :: 2025-03-22</title>
      <link>/posts/1743338145-linklist-2025-03-22/</link>
      <pubDate>Sat, 22 Mar 2025 18:00:25 +0000</pubDate>
      <guid>/posts/1743338145-linklist-2025-03-22/</guid>
      <description>&lt;h2 id=&#34;httpswwwevanmillerorgfunctional-tests-as-a-tree-of-continuationshtml&#34;&gt;&lt;a href=&#34;https://www.evanmiller.org/functional-tests-as-a-tree-of-continuations.html&#34;&gt;https://www.evanmiller.org/functional-tests-as-a-tree-of-continuations.html&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. **Eliminates code duplication**: No need to repeat steps when testing different actions in the same step.&#xA;2. **Eliminates most setup code**: Setup can be done as part of the testing tree with no performance penalty.&#xA;3. **Pinpoints source of failing tests**: Failing tests are immediately stopped before running child nodes, making it easier to find the source of failures.&#xA;4. **Well-structured tests**: The test hierarchy is clear and easy to understand, with a 1-1 mapping between nodes and something the user sees.&#xA;5. **Previous responses in scope**: All previous responses are available in the response variables.&#xA;&#xA;**Why this approach hasn&amp;#39;t been widely adopted:**&#xA;&#xA;1. **OO language tendencies**: Many OO languages encourage a &amp;#34;wrecking ball&amp;#34; mentality when it comes to unit tests, destroying all possible state after each test.&#xA;2. **Inefficiency**: Testing every rung on a ladder can be inefficient and wasteful.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomcodespin-aicodespin-chrome-extension&#34;&gt;&lt;a href=&#34;https://github.com/codespin-ai/codespin-chrome-extension&#34;&gt;https://github.com/codespin-ai/codespin-chrome-extension&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* This Chrome Extension allows you to use Claude and ChatGPT to edit your local project using new File System APIs available on Chrome.&#xA;* The extension is not yet available on the Chrome Web Store (it takes weeks for approval), so it must be installed manually.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcompatelnavctrlspeak&#34;&gt;&lt;a href=&#34;https://github.com/patelnav/ctrlspeak&#34;&gt;https://github.com/patelnav/ctrlspeak&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Minimal Interface: Runs quietly in the background via the command line&#xA;* Triple-Tap Magic: Start/stop recording with a quick Ctrl triple-tap - Auto-Paste: Text lands right where you need it, no extra clicks&#xA;* Audio Cues: Hear when recording begins and ends&#xA;* Mac Optimized: Harnesses Apple Silicon&amp;#39;s MPS for blazing performance&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomowulveryckgomcptest&#34;&gt;&lt;a href=&#34;https://github.com/owulveryck/gomcptest&#34;&gt;https://github.com/owulveryck/gomcptest&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A proof of concept demonstrating Model Context Protocol (MCP) implementation with a custom-built host&#xA;* Enabling easy testing of agentic systems through MCP&#xA;* Primarily written from scratch for clarity on underlying mechanisms&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomabilzerianllm-prompt-library&#34;&gt;&lt;a href=&#34;https://github.com/abilzerian/LLM-Prompt-Library&#34;&gt;https://github.com/abilzerian/LLM-Prompt-Library&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* This repository contains a curated collection of prompts for various large language models (LLMs) like Deepseek, GPT o3, Claude 3 Opus, Llama3, Gemini, and others.&#xA;* The library includes several tools to help you work with prompts:&#xA;    + Prompt Validator - Validates the format and contents of prompt files&#xA;    + Prompt Mixer - Create new prompts by mixing and matching elements from existing prompts&#xA;    + Token Counter - Analyze prompt files to count tokens and estimate API costs&#xA;    + Prompt Analyzer - Evaluate the quality of prompts and get suggestions for improvements&#xA;    + Prompt Evolution - Automatically optimize prompts through iterative self-improvement cycles&#xA;    + Financial Metacognition - Analyze AI interpretations of financial prompts to detect biases and limitations&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomcasparwyliecascii-core&#34;&gt;&lt;a href=&#34;https://github.com/casparwylie/cascii-core&#34;&gt;https://github.com/casparwylie/cascii-core&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Cascii is a web-based ASCII and Unicode diagram builder written in vanilla Javascript.&#xA;* It has zero dependencies on any servers, web packing, libraries, and is no-markup and no-stylesheets.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomtrycuacomputer&#34;&gt;&lt;a href=&#34;https://github.com/trycua/computer&#34;&gt;https://github.com/trycua/computer&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Create and run high-performance macOS and Linux VMs on Apple Silicon, with built-in support for AI agents.&#xA;* Library&#xA;  * Lume: CLI for running macOS/Linux VMs with near-native performance using Apple&amp;#39;s Virtualization.Framework&#xA;  * Computer: Computer-Use Interface (CUI) framework for interacting with macOS/Linux sandboxes&#xA;  * Agent (Experimental): Computer-Use Agent (CUA) framework for running agentic workflows in macOS/Linux dedicated sandboxes&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsarxivorgabs250310737&#34;&gt;&lt;a href=&#34;https://arxiv.org/abs/2503.10737&#34;&gt;https://arxiv.org/abs/2503.10737&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Title: Commenting Higher-level Code Unit: Full Code, Reduced Code, or Hierarchical Code Summarization&#xA;* Abstract: Commenting code is a crucial activity in software development, as it aids in facilitating future maintenance and updates.&#xA;* Researchers have proposed various automated code summarization (ACS) techniques to automatically generate comments/summaries for given code units.&#xA;* ACS techniques primarily focus on generating summaries for code units at the method level.&#xA;* Higher-level code units, such as file-level and module-level code units, are highly useful for quickly gaining a macro-level understanding of software components and architecture.&#xA;* To fill this gap, we conduct a systematic study on how to use LLMs for commenting higher-level code units.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpswwwredditcomrchatgptcodingcomments1jdi4o6i_finetuned_qwen_25_coder_on_a_single_repo_and&#34;&gt;&lt;a href=&#34;https://www.reddit.com/r/ChatGPTCoding/comments/1jdi4o6/i_finetuned_qwen_25_coder_on_a_single_repo_and/&#34;&gt;https://www.reddit.com/r/ChatGPTCoding/comments/1jdi4o6/i_finetuned_qwen_25_coder_on_a_single_repo_and/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Tl;dr: The fine-tuned model achieves a 47% improvement in the code completion task (tab autocomplete). Accuracy goes from 25% to 36% (exact match against ground truth) after a short training run of only 500 iterations on a single RTX 4090 GPU.&#xA;* Highlights of the experiment:&#xA;* Model: qwen2.5-coder 14b, 4-bit quantized&#xA;* Training data: Svelte source files from this repo: https://github.com/hcengineering/platform&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsclaudioukpostsunvibehtml&#34;&gt;&lt;a href=&#34;https://claudio.uk/posts/unvibe.html&#34;&gt;https://claudio.uk/posts/unvibe.html&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Unvibe is an open-source tool that uses large language models to generate code for a given set of specifications. Here&amp;#39;s a summary of the article:&#xA;&#xA;**Key Features**&#xA;&#xA;* Unvibe can be used to generate code in various programming languages.&#xA;* It uses a simple tree search algorithm to explore the space of possible programs.&#xA;* The algorithm starts with a random initial tree spread and attempts different LLM temperatures before picking the most promising nodes.&#xA;* Unvibe can run on a Macbook or other low-power hardware.&#xA;&#xA;**Models**&#xA;&#xA;* Small coding models (~7B params) seem to work well for Unvibe, such as qwen2.5-coder:7b and Claude Haiku.&#xA;* Large generic models (&amp;gt;20B params) are also effective, but may be slower due to their larger size.&#xA;* Reasoning models can sometimes help, but are generally slower than coding models.&#xA;&#xA;**Search Algorithm**&#xA;&#xA;* Unvibe uses a simple tree search algorithm that is suitable for running on low-power hardware.&#xA;* The algorithm starts with a random initial tree spread and attempts different LLM temperatures before picking the most promising nodes.&#xA;&#xA;**Sandboxing**&#xA;&#xA;* Unvibe can run on your local machine, but this is not recommended due to the risk of running code generated by an LLM.&#xA;* Running Unvibe in a Docker container or as a separate user with limited permissions is a safer option.&#xA;&#xA;**Future Features**&#xA;&#xA;* HTML-based UI to explore the search graph and look at the reward function rise.&#xA;* Support for multiple LLMs, with Unvibe swapping between them if the score plateaus.&#xA;* Integration with Pytest.&#xA;* Support for other programming languages.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomrobertpiosikgemini-coder&#34;&gt;&lt;a href=&#34;https://github.com/robertpiosik/gemini-coder&#34;&gt;https://github.com/robertpiosik/gemini-coder&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Copy folders and files for chatbots or initialize them hands-free using Gemini Coder&amp;#39;s browser extension&#xA;* Use the free Gemini API for FIM completions, file refactoring, and applying AI-suggested changes&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcommaxnowackanthropic-proxy&#34;&gt;&lt;a href=&#34;https://github.com/maxnowack/anthropic-proxy&#34;&gt;https://github.com/maxnowack/anthropic-proxy&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A proxy server that transforms Anthropic API requests to OpenAI format and sends it to openrouter.ai.&#xA;* Enables use of Anthropic&amp;#39;s API format with OpenAI-compatible endpoints by sending requests through the proxy server.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomprvnsmpthfinetune-code-assistant&#34;&gt;&lt;a href=&#34;https://github.com/prvnsmpth/finetune-code-assistant/&#34;&gt;https://github.com/prvnsmpth/finetune-code-assistant/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Blog post: Build Your Own GitHub Copilot&#xA;* This repo contains:&#xA;*   - Scripts for generating a fill-in-the-middle (FIM) dataset from a codebase &#xA;*   - A Jupyter notebook for running SFT on the generated FIM dataset&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomsantinicunvibe&#34;&gt;&lt;a href=&#34;https://github.com/santinic/unvibe&#34;&gt;https://github.com/santinic/unvibe&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Unvibe is a tool that generates alternative implementations for functions and classes annotated with `@ai`, which has been demonstrated to produce better results than traditional code generation alone.&#xA;* It&amp;#39;s particularly effective on large projects with decent test coverage and works with most AI providers, including local Ollama, OpenAI, DeepSeek, Claude, and Gemini.&#xA;* To use Unvibe, add it as a dependency to your project with `pip install unvibe`, define a new function in your existing Python project, annotate it with `@ai`, and write unit tests to define how the function should behave.&#xA;* Use `unvibe` command to search for a valid implementation that passes all the tests, generating many alternatives and feeding back test errors to the LLM until a correct implementation is found.&#xA;* Configuration file can be created in `.unvibe.toml` with options such as provider, model, temperature, and cache settings.&#xA;* Running Unvibe on your local machine can be risky due to code generation by an LLM; recommended practice is to run it inside a Docker container or create a new user with limited permissions.&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Link List :: 2025-03-15</title>
      <link>/posts/1743337329-linklist-2025-03-15/</link>
      <pubDate>Sat, 15 Mar 2025 18:00:25 +0000</pubDate>
      <guid>/posts/1743337329-linklist-2025-03-15/</guid>
      <description>&lt;h2 id=&#34;httpssetosaioevmarkov-chains&#34;&gt;&lt;a href=&#34;https://setosa.io/ev/markov-chains/&#34;&gt;https://setosa.io/ev/markov-chains/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Markov chains are mathematical systems that hop from one &amp;#34;state&amp;#34; to another.&#xA;* A state space is a list of all possible states in a system.&#xA;* A Markov chain tells you the probability of hopping, or &amp;#34;transitioning,&amp;#34; from one state to any other state.&#xA;* Real modelers use a &amp;#34;transition matrix&amp;#34; to tally transition probabilities instead of drawing diagrams.&#xA;* The number of cells in a transition matrix grows quadratically as you add states to your Markov chain.&#xA;* One use of Markov chains is to include real-world phenomena in computer simulations.&#xA;* A two-state Markov chain can mimic the &amp;#34;stickyness&amp;#34; of real-world data, such as weather patterns.&#xA;* Markov chains are used by meteorologists, ecologists, computer scientists, and financial engineers to model big phenomena.&#xA;* Examples of Markov chains include PageRank algorithm used by Google and customizable Markov chains in a playground.&#xA;* You can access more examples and explanations at setosa.io/markov or visit the Explained Visually project homepage.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgistgithubcomhalljson4a6ca0f8f37af82784f32786b63f163b&#34;&gt;&lt;a href=&#34;https://gist.github.com/halljson/4a6ca0f8f37af82784f32786b63f163b&#34;&gt;https://gist.github.com/halljson/4a6ca0f8f37af82784f32786b63f163b&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Define main function: `get_chain(ticker, expiration_list)`&#xA;  * Queries market data for options contracts&#xA;  * Iterates over expiration list and contract details&#xA;  * Processes data into pandas DataFrame&#xA;* Define additional helper function:&#xA;  + `get_individual(ticker, exp, strike, kind)`: gets individual option snapshot&#xA;* Use IB connection to execute requests&#xA;* Handle potential errors with `ib.sleep(0.025)`&#xA;* Set display options for pandas DataFrame&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomdhravyaapple-mcp&#34;&gt;&lt;a href=&#34;https://github.com/Dhravya/apple-mcp&#34;&gt;https://github.com/Dhravya/apple-mcp&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* This is a collection of apple-native tools for the MCP protocol.&#xA;* To install Apple MCP for Claude Desktop automatically via Smithery, use:&#xA;npx -y @smithery/cli@latest install @Dhravya/apple-mcp --client claude&#xA;* Or for cursor, use:&#xA;npx -y @smithery/cli@latest install @Dhravya/apple-mcp --client cursor&#xA;&#xA;* Messages can be sent using the Apple Messages app or read out.&#xA;* Notes can be listed, searched and read in the Apple Notes app.&#xA;* Contacts can be searched for sending messages.&#xA;* Emails can be sent with multiple recipients, scheduled and searched.&#xA;* Reminders can be listed, searched and created with optional due dates and notes.&#xA;* TODO: Search and open calendar events in Apple Calendar app, photos in Apple Photos app, and music in Apple Music app.&#xA;* Commands can be daisy-chained to create workflows.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomplatops-aigoosecode-server&#34;&gt;&lt;a href=&#34;https://github.com/PlatOps-AI/goosecode-server&#34;&gt;https://github.com/PlatOps-AI/goosecode-server&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Browser-Based Development: Access VS Code directly from your browser&#xA;- Goose AI Agent: Pre-installed and configured Goose AI Coding agent&#xA;- Shared Terminal Session: The same Goose session is visible in all browser windows&#xA;- Goose Terminal API: REST API for sending commands to the terminal and retrieving session logs&#xA;- Streaming Conversations: Real-time streaming of Goose AI conversations using Server-Sent Events (SSE)&#xA;- Material Design: Dark theme with Material icons for a beautiful coding experience&#xA;- Secure Environment: Password-protected VS Code Server instance&#xA;- Git Integration: Git pre-installed and ready for repository operations&#xA;- Persistent Configuration: Environment variables and configuration preserved between sessions (Unless workspace is deleted)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcommwalkerrbookmarkcanvas&#34;&gt;&lt;a href=&#34;https://github.com/mwalkerr/BookmarkCanvas&#34;&gt;https://github.com/mwalkerr/BookmarkCanvas&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* This plugin provides a canvas for organizing bookmarks in IntelliJ IDEs such as IntelliJ IDEA, PyCharm, Android Studio, and WebStorm.&#xA;* The goal is to make it easy to create a visual representation both of bookmarks and of the relationships between them.&#xA;* The canvas should make it easy to quickly jump to a bookmarked location.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcombradd3rsfull-stack-starter-backend&#34;&gt;&lt;a href=&#34;https://github.com/Bradd3rs/full-stack-starter-backend&#34;&gt;https://github.com/Bradd3rs/full-stack-starter-backend&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- üöÄ FastAPI + PostgreSQL Backend: The perfect match for your Next.js Frontend!&#xA;  * üî• FastAPI - Lightning-fast API with automatic docs (seriously, it&amp;#39;s FAST!)&#xA;  * üêò PostgreSQL - Reliable database that just works&#xA;  * üê≥ Docker - One command to rule them all&#xA;  * üîÑ CORS - Already configured for your frontend needs&#xA;  * üìù Todo API - Ready-to-use example endpoints&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpstruptinatusubstackcomppayments-engineering-playbookr2r26nftriedredirecttrue&#34;&gt;&lt;a href=&#34;https://truptinatu.substack.com/p/payments-engineering-playbook?r=2r26nf&amp;amp;triedRedirect=true&#34;&gt;https://truptinatu.substack.com/p/payments-engineering-playbook?r=2r26nf&amp;amp;triedRedirect=true&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* In payments engineering, it&amp;#39;s essential to have an architecture that facilitates easy and accurate money movement functions with domain awareness for long-term scalability and regulatory compliance in mind.&#xA;* Best practices include:&#xA;    + Log every event (request - response calls) and use a state-machine on top of this database to access the latest state.&#xA;    + Build a double entry ledger (reconciliation daily EOD).&#xA;    + Always store money in integer format (in cents), not float ($ in decimal).&#xA;    + Ensure idempotency for consistent responses.&#xA;* Audited financials require immutable and double entry ledgers.&#xA;* A Payments PM should map out all events triggering a payment capture() call to ensure consistency.&#xA;* Understanding your codebase and state machine is crucial for architecting a good payments engineering platform.&#xA;* Best practices include:&#xA;    + Using microservices architecture to avoid spaghetti code.&#xA;    + Having a consistent approach when displaying pricing on product SKUs or in the cart.&#xA;    + Optimistic locking (tx_id, event#) on database logs.&#xA;    + Maintaining an immutable ledger and a transaction state machine for auditing.&#xA;* Data engineering and Data Science use the state machine&amp;#39;s latest state for analysis.&#xA;* Always store money in cents for calculations to avoid inconsistencies.&#xA;* Use AWS instead of internal datastores for industry-guaranteed reliability.&#xA;* Immutable ledgers are essential for audited financials.&#xA;* Consider mapping out events triggering a payment capture() call for consistency.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomdnakovanon-kode&#34;&gt;&lt;a href=&#34;https://github.com/dnakov/anon-kode&#34;&gt;https://github.com/dnakov/anon-kode&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Terminal-based AI coding tool that uses any model supporting OpenAI-style API&#xA;* Fixes spaghetti code&#xA;* Explains function purpose&#xA;* Runs tests, shell commands and more&#xA;* Manually set models in /config if not available on list&#xA;* Requires openai-like endpoint to work&#xA;* Install with npm install -g anon-kode&#xA;* Run with pnpm i, pnpm run dev, pnpm run build&#xA;* Get verbose debug logs with NODE_ENV=development pnpm run dev --verbose --debug&#xA;* Submit bugs via /bug, creates GitHub issue template&#xA;* Use at own risk, no telemetry or backend servers other than AI providers&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpshandbookgitlabcomhandbookproductproduct-principles&#34;&gt;&lt;a href=&#34;https://handbook.gitlab.com/handbook/product/product-principles/&#34;&gt;https://handbook.gitlab.com/handbook/product/product-principles/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;This document outlines a set of principles and guidelines for developing and maintaining the GitLab platform. Here&amp;#39;s a summary of the key points:&#xA;&#xA;**General Principles**&#xA;&#xA;1. **Customer First**: Prioritize customer needs and provide support for all features in paid tiers, regardless of their license level.&#xA;2. **Developer-First**: Focus on solving problems for developers first, then adapt to other personas (e.g., operations, security) while maintaining a developer-centric approach.&#xA;3. **Cloud-Native First**: Build features for cloud-native first and then support the rest, focusing on modern development flows and architectures.&#xA;&#xA;**Feature Naming**&#xA;&#xA;1. Use prepositions when referring to third-party products and services in names (e.g., &amp;#34;GitLab.com for Jira Cloud&amp;#34;).&#xA;2. Prioritize complete maturity for developers building cloud-native applications before moving to other development methodologies and personas.&#xA;3. Use a &amp;#34;modern first&amp;#34; approach, solving problems for modern development teams before addressing legacy teams.&#xA;&#xA;**Prioritization**&#xA;&#xA;1. Focus on next-generation development flows, personas, and use cases, even if they&amp;#39;re not currently adopted by your initial users.&#xA;2. Optimize GitLab to support the larger number of current and future adopters of next-generation principles.&#xA;3. Clearly communicate with users what the preferred path is and ensure that legacy methods are deprecated.&#xA;&#xA;**Core Values**&#xA;&#xA;1. **Stewardship**: Ensure that no feature is removed from Core into paid tiers, but can build additional features around existing ones for paying customers only.&#xA;2. **Preparation**: Plan ahead and invest in modern workflows and architectures to support the future needs of your users.&#xA;3. **Adaptability**: Be willing to adapt and evolve based on user feedback and changing market conditions.&#xA;&#xA;**Guidelines**&#xA;&#xA;1. Use prepositions when naming features that integrate with third-party products or services (e.g., &amp;#34;GitLab for Slack&amp;#34;).&#xA;2. Avoid using internal terminology or acronyms when referring to external products or services.&#xA;3. Document all changes, deprecations, and additions to features in a clear and concise manner.&#xA;&#xA;Overall, this document outlines a set of guidelines and principles that aim to ensure the long-term success and growth of the GitLab platform. By prioritizing customer needs, developer-centricity, cloud-native first development, and continuous improvement, GitLab can maintain its position as a leader in the DevOps and software development space.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpswwwenginesdevblogcode-navigationstack-graphs&#34;&gt;&lt;a href=&#34;https://www.engines.dev/blog/code-navigation#stack-graphs&#34;&gt;https://www.engines.dev/blog/code-navigation#stack-graphs&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* tl;dr: We explored various approaches to code navigation for AI SWEs and share our findings on what works and what doesn&amp;#39;t.&#xA;* We&amp;#39;re building the best platform to run AI SWEs with a purpose-built code navigation system.&#xA;* Current research approaches include:&#xA;    - SWE-Agent&#xA;    - CodeMonkey&#xA;    - Moatless&#xA;* Our approach is similar to OpenHands, exposing tools for finding all references and going to definition.&#xA;* Our vision for code navigation includes:&#xA;    - Scalability&#xA;    - Incremental indexing&#xA;    - Flexibility&#xA;    - Permissively licensed&#xA;* We explored different systems, including:&#xA;    - lsproxy (purpose-built LSP library)&#xA;    - Stack Graphs (advanced data structure)&#xA;        - Pros: incremental, theoretically language agnostic, fast queries&#xA;        - Cons: limited support for languages, complex files required&#xA;    - Glean (production code indexing system at Meta)&#xA;        - Pros: incremental, scalable, flexible, can navigate arbitrary commits&#xA;        - Cons: proprietary Thrift protocol, requires custom parser for languages&#xA;    - multilspy (Python library providing a convenient wrapper around LSP servers)&#xA;* Our solution is to add convenience wrapping around multilspy.&#xA;* Looking forward to further explorations and comparisons with the AI SWE community.&#xA;* Further reading:&#xA;    - Nuanced.dev&#xA;    - CodeMonkeys&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpssimonwillisonnet2025mar6aider-using-uv-as-an-installer&#34;&gt;&lt;a href=&#34;https://simonwillison.net/2025/Mar/6/aider-using-uv-as-an-installer/&#34;&gt;https://simonwillison.net/2025/Mar/6/aider-using-uv-as-an-installer/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Aider uses `pip install aider-install &amp;amp;&amp;amp; aider-install` to install in an isolated virtual environment.&#xA;* The `aider-install` package depends on the `uv` library.&#xA;* When running `aider-install`, it executes Python code that:&#xA;    + Finds the location of the `uv` binary&#xA;    + Installs Aider using `uv tool install`&#xA;    + Updates the shell to include the Aider directory in the PATH&#xA;* The installation process creates a new standalone copy of Python 3.12 and places it in `uv&amp;#39;s managed directory structure.&#xA;* The `--force` flag is used to overwrite any previous attempts at installing Aider.&#xA;* Running `uv tool update-shell` ensures that the bin directory is on the user&amp;#39;s PATH.&#xA;* This installation method is recommended for non-expert Python users due to its minimal risk of breaking the system.&#xA;* The method has significantly reduced GitHub issues related to conflicted or broken Python environments.&#xA;* An alternative installation mechanism may be preferred by experienced users.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsblog6nokorgtailscale-is-pretty-useful&#34;&gt;&lt;a href=&#34;https://blog.6nok.org/tailscale-is-pretty-useful/&#34;&gt;https://blog.6nok.org/tailscale-is-pretty-useful/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Tailscale is a useful tool for creating a virtual private network, allowing access to devices anywhere with domain shorthands.&#xA;* It was recommended after experiencing issues with DDNS and CGNAT2, which made port forwarding impossible.&#xA;* The client software needs to be installed on devices, logging in is an easy process.&#xA;* Additional benefits include:&#xA;  * Exposing a port from laptop to phone for web application testing.&#xA;  * Taildrop: file transfer between devices without close proximity.&#xA;  * Exit nodes: appointing a machine as an exit node for VPN-like functionality.&#xA;  * Mullvad integration: two-tier VPN with privacy features.&#xA;* Note that Tailscale is open-source, but some wrappers are not.&#xA;* Headscale is an open-source server implementation compatible with Tailscale&amp;#39;s client software.&#xA;* Some links to external resources mentioned in the article:&#xA;  * Dynamic DNS&#xA;  * Carrier-grade NAT&#xA;  * Home theater PC&#xA;  * Snapdrop and Pairdrop comparison&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomjlevychopdiff&#34;&gt;&lt;a href=&#34;https://github.com/jlevy/chopdiff&#34;&gt;https://github.com/jlevy/chopdiff&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;httpswwwbbccoukfuturearticle20250304-the-countries-that-never-locked-down-for-covid-19&#34;&gt;&lt;a href=&#34;https://www.bbc.co.uk/future/article/20250304-the-countries-that-never-locked-down-for-covid-19&#34;&gt;https://www.bbc.co.uk/future/article/20250304-the-countries-that-never-locked-down-for-covid-19&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;httpsgithubcompysheetspysheets&#34;&gt;&lt;a href=&#34;https://github.com/PySheets/pysheets&#34;&gt;https://github.com/PySheets/pysheets&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* PySheets is a spreadsheet UI for Python, implemented in Python, running logic and saving data in the browser, using PyScript and IndexedDB.&#xA;* To run PySheets without locally installing it, simply visit pysheets.app&#xA;* To install and run PySheets on your local machine, run: pip install pysheets-app pysheets&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcombooleandilemmahn-blacklist&#34;&gt;&lt;a href=&#34;https://github.com/booleandilemma/hn-blacklist&#34;&gt;https://github.com/booleandilemma/hn-blacklist&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Tired of seeing articles from certain sources on Hacker News? HN Blacklist is for you.&#xA;* HN Blacklist is a userscript which can be run with tools like Greasemonkey and Tampermonkey right in your browser.&#xA;* Find it on Greasy Fork, or copy and paste it right from hn-blacklist.js in this repository.&#xA;* HN Blacklist provides a UI at the bottom of HN. You can add entries and see helpful output from HN Blacklist there.&#xA;* Prefix blacklist entries with source: to filter out articles.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcompsviderskiuncloud&#34;&gt;&lt;a href=&#34;https://github.com/psviderski/uncloud&#34;&gt;https://github.com/psviderski/uncloud&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;This text describes a new networking system called &amp;#34;Uncloud&amp;#34; that allows multiple machines to work together without a centralized control plane or master nodes. Here&amp;#39;s a summary of how it works:&#xA;&#xA;**Key Components**&#xA;&#xA;1. **WireGuard**: Uncloud uses WireGuard for secure, encrypted communication between machines.&#xA;2. **Caddy**: Caddy is used as a reverse proxy and watches the cluster state for new services.&#xA;3. **uncloudd**: uncloudd is the CLI tool that communicates with uncloudd on target machines to launch containers.&#xA;&#xA;**How it Works**&#xA;&#xA;1. Multiple machines are provisioned, each with its own subnet (e.g., `10.210.X.2-254`).&#xA;2. Machines establish a WireGuard connection with each other, creating an overlay network.&#xA;3. When a service is run using the CLI (`uc run`), uncloudd on a target machine launches a Docker container in the bridge network.&#xA;4. The container gets a cluster-unique IP address from the bridge network and becomes accessible from other machines in the cluster.&#xA;5. Caddy watches the cluster state for new services and updates its configuration to route traffic to the new container.&#xA;&#xA;**Benefits**&#xA;&#xA;1. **Decentralized**: No need for control plane or master nodes.&#xA;2. **Fault-tolerant**: If one machine goes offline, others can still serve cluster operations.&#xA;3. **Easy maintenance**: Any machine has access to the complete cluster state and can make changes.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsarxivorgabs250302948&#34;&gt;&lt;a href=&#34;https://arxiv.org/abs/2503.02948&#34;&gt;https://arxiv.org/abs/2503.02948&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Abstract: Generating high-quality question-answer pairs for specialized technical domains remains challenging, with existing approaches facing a tradeoff between leveraging expert examples and achieving topical diversity.&#xA;* We present ExpertGenQA, a protocol that combines few-shot learning with structured topic and style categorization to generate comprehensive domain-specific QA pairs.&#xA;* Using U.S. Federal Railroad Administration documents as a test bed, we demonstrate that ExpertGenQA achieves twice the efficiency of baseline few-shot approaches while maintaining 94.4% topic coverage.&#xA;* Through systematic evaluation, we show that current LLM-based judges and reward models exhibit strong bias toward superficial writing styles rather than content quality.&#xA;* Our analysis using Bloom&amp;#39;s Taxonomy reveals that ExpertGenQA better preserves the cognitive complexity distribution of expert-written questions compared to template-based approaches.&#xA;* When used to train retrieval models, our generated queries improve top-1 accuracy by 13.02% over baseline performance, demonstrating their effectiveness for downstream applications in technical domains.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomyuruotong1automate&#34;&gt;&lt;a href=&#34;https://github.com/yuruotong1/autoMate&#34;&gt;https://github.com/yuruotong1/autoMate&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* # AI-powered Local Automation Tool&#xA;* ## Description&#xA;*  &amp;#34;Automate the tedious, reclaim your time for life&amp;#34;&#xA;* &#xA;* * autoMate is a revolutionary AI+RPA automation tool built on OmniParser that can:&#xA;*   - Understand your needs and automatically plan tasks&#xA;*   - Intelligently comprehend screen content, simulating human vision and operations&#xA;*   - Make autonomous decisions, judging and taking actions based on task requirements&#xA;*   - Support local deployment to protect your data security and privacy&#xA;*   - No-Code Automation &#xA;*   - Full Interface Control &#xA;*   - Simplified Installation &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsrivetggblog2025-02-16-sqlite-on-the-server-is-misunderstood&#34;&gt;&lt;a href=&#34;https://rivet.gg/blog/2025-02-16-sqlite-on-the-server-is-misunderstood&#34;&gt;https://rivet.gg/blog/2025-02-16-sqlite-on-the-server-is-misunderstood&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* SQLite-on-the-Server Is Misunderstood: Better At Hyper-Scale Than Micro-Scale&#xA;* We&amp;#39;re Rivet, a new open-source, self-hostable serverless platform. &#xA;* There&amp;#39;s been a lot of discussion recently about the pros and cons of SQLite on the server.&#xA;* After reading many of these conversations, I realized that my perspective on the power of SQLite-on-the-server is lopsided from popular opinion:&#xA;  + SQLite&amp;#39;s strengths really shine at scale, instead of with small hobbyist deployments.&#xA;* Background&#xA;  * Why Developers Love SQLite for Micro-Scale Deployments&#xA;    - Low infrastructure costs: No need for separate database servers‚Äîjust a single file.&#xA;    - Seamless development and testing: The same database file can be used across client and server.&#xA;    - Minimal management overhead: No complex configurations or database daemons.&#xA;    - Proven reliability: It&amp;#39;s been around forever. It&amp;#39;s the world&amp;#39;s most widely deployed database and built to withstand battleships getting blown to bits.&#xA;* Tools for SQLite-on-the-server&#xA;  * Enhance SQLite with replication and high availability tools like LiteFS, Litestream, rqlite, Dqlite, and Bedrock:&#xA;    - Specifically focusing on Cloudflare Durable Objects and Turso&#xA;* Databases at Hyper-Scale Today: Sharded Databases &amp;amp; Partitioning Keys&#xA;  + High-scale systems struggle with scaling databases like Postgres or MySQL.&#xA;  + Companies often turn to sharded databases like Cassandra, ScyllaDB, DynamoDB, Vitess (sharded MySQL), and Citus (sharded Postgres).&#xA;    - These systems use partitioning keys to co-locate related &amp;amp; similarly structured data.&#xA;* Benefits of Sharded Databases&#xA;  + Efficient batch reads with data grouped in the same partition.&#xA;  + Horizontal scalability by partitioning data across nodes.&#xA;  + Optimized writes for high-ingestion workloads&#xA;* Challenges with Current Partitioning Solutions&#xA;  + Rigid schemas limiting flexibility.&#xA;  + Complex schema changes requiring significant operational overhead.&#xA;  + Complex cross-partition operations enforcing ACID properties is difficult.&#xA;  + Data inconsistency without strong constraints between tables &amp;amp; partitions.&#xA;* Enter SQLite at Scale: Cloudflare Durable Objects &amp;amp; Turso&#xA;  * Provide dynamic scaling, infinite cheap databases, global distribution, and built-in replication and durability:&#xA;    - Leverage to replace partitioning keys with SQLite database per partition&#xA;* Benefits of SQLite-Per-Partition&#xA;  + Local ACID transactions without cross-partition complexities.&#xA;  + Efficient I/O within partitions for high performance.&#xA;  + Leverage existing SQLite extensions and SQL migrations tools&#xA;  + Lazy schema migrations allowing changes on demand.&#xA;* Who are the Turso founders?&#xA;  * Founded by people who used to work at ScyllaDB and saw the challenges of large-scale partitioned databases firsthand.&#xA;* Where SQLite Still Falls Short&#xA;  + Lack of an open-source, self-hosted solution.&#xA;  + Limited database tooling like SQL browsers, ETL pipelines, monitoring, and backups.&#xA;  + Non-standard protocols for communicating with SQLite-on-the-server.&#xA;  + No case studies at hyper-scale using SQLite with this architecture.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcompathonailitewebagent&#34;&gt;&lt;a href=&#34;https://github.com/PathOnAI/LiteWebAgent&#34;&gt;https://github.com/PathOnAI/LiteWebAgent&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;LiteWebAgent is an open-source library developed by PathOnAI that provides a framework for building web-agent applications using large language models (LLMs). Here&amp;#39;s an overview of LiteWebAgent:&#xA;&#xA;**Key Features:**&#xA;&#xA;1. **LLM-based web-agents**: LiteWebAgent allows developers to build web-agents using popular LLMs such as transformer-based models.&#xA;2. **Auto-login and session management**: The library provides a simple way to auto-login to websites and manage sessions, allowing the agent to interact with the website seamlessly.&#xA;3. **Task induction**: LiteWebAgent enables users to induce workflows from mind2web datasets, which are pre-defined tasks that can be executed on various websites.&#xA;4. **Workflow memory**: The library includes an &amp;#34;Agent Workflow Memory&amp;#34; module that allows developers to store and retrieve induced workflows for later use.&#xA;&#xA;**Agents:**&#xA;&#xA;LiteWebAgent provides several pre-built agents that can be used as a starting point for building web-agents:&#xA;&#xA;1. **PromptAgent**: A simple agent that uses prompt engineering to interact with websites.&#xA;2. **ContextAwarePlanningAgent**: An agent that uses context-aware planning to navigate through websites.&#xA;3. **LLMWebAgent**: A basic LLM-based web-agent that can be customized for specific tasks.&#xA;&#xA;**Integration:**&#xA;&#xA;LiteWebAgent can be integrated into various frameworks and tools, including:&#xA;&#xA;1. **Chrome extensions**: Developers can build Chrome extensions using LiteWebAgent as the AI backend server.&#xA;2. **Python APIs**: The library provides a Python API that allows developers to interact with websites and execute tasks programmatically.&#xA;3. **Other frameworks**: LiteWebAgent can be integrated into other frameworks and tools, such as TensorFlow or PyTorch.&#xA;&#xA;**Use Cases:**&#xA;&#xA;LiteWebAgent has various use cases, including:&#xA;&#xA;1. **Automating web tasks**: Developers can use LiteWebAgent to automate repetitive web tasks, such as filling out forms or clicking buttons.&#xA;2. **Web scraping**: The library can be used for web scraping tasks, where the agent extracts data from websites.&#xA;3. **E-commerce automation**: LiteWebAgent can be used to automate tasks on e-commerce websites, such as booking flights or hotels.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpswwwoxenaiblogtraining-a-rust-1-5b-coder-lm-with-reinforcement-learning-grpo&#34;&gt;&lt;a href=&#34;https://www.oxen.ai/blog/training-a-rust-1-5b-coder-lm-with-reinforcement-learning-grpo&#34;&gt;https://www.oxen.ai/blog/training-a-rust-1-5b-coder-lm-with-reinforcement-learning-grpo&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;This text appears to be a blog post or article about a machine learning experiment using the GRPO (Generative Reward Policy Optimization) algorithm on a coding model. The author describes the setup of the experiment, including the dataset, reward functions, and training process.&#xA;&#xA;Here are some key points from the article:&#xA;&#xA;1. **GRPO Algorithm**: The author explains that GRPO is a type of reinforcement learning algorithm that uses generative models to optimize rewards for a policy.&#xA;2. **Dataset**: The experiment uses a small dataset of coding tasks with unit tests, including writing functions and fixing errors from the compiler.&#xA;3. **Reward Functions**: The author defines multiple reward functions, including:&#xA;&#x9;* `build`: passing the build step&#xA;&#x9;* `test`: passing the unit tests&#xA;&#x9;* `error`: fixing errors from the compiler&#xA;&#x9;* `fill_in_middle`: filling in missing code&#xA;&#x9;* `diff_given_prompt`: creating a patch/diff given a prompt&#xA;4. **Training Process**: The author describes the training process, including:&#xA;&#x9;* Training the model with the defined reward functions for a single epoch (24 hours)&#xA;&#x9;* Logging the results to Oxen.ai, which allows for visualization and monitoring of performance over time&#xA;5. **Results**: The article reports impressive results, including:&#xA;&#x9;* A 20% increase in build pass rate from 61% to 80%&#xA;&#x9;* A 15% increase in test pass rate from 22% to 37%&#xA;6. **Cost and Time**: The experiment was run on a Lambda Labs instance for under $100 over 24 hours.&#xA;7. **Future Work**: The author mentions plans to extend the dataset with additional task categories, such as creating a patch/diff given a prompt or next edit (tab) prediction.&#xA;&#xA;Overall, this article presents an exciting example of how GRPO can be applied to coding tasks and achieve impressive results in a relatively short period of time.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomafnanenayetdiffsitter&#34;&gt;&lt;a href=&#34;https://github.com/afnanenayet/diffsitter&#34;&gt;https://github.com/afnanenayet/diffsitter&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- creates semantically meaningful diffs that ignore formatting differences like spacing&#xA;- uses tree-sitter project parsers to parse source code, supporting 11 languages&#xA;- supports the following languages: Bash, C#, C++, CSS, Go, Java, OCaml, PHP, Python, Ruby, Rust, Typescript/TSX, HCL&#xA;- generates diffs with line numbers and formatting options via config file&#xA;- has logging and terminal aware formatting features&#xA;- can exclude or include specific tree-sitter node types in diffs using config file&#xA;- uses Github actions to build and publish binaries for each tagged release&#xA;- can be installed from source using cargo, brew, apk, or Docker&#xA;- supports customizing config file associations and formatting options&#xA;- provides completion files and other assets with the diffsitter_completions binary&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomx1xhlolsystem-prompts-and-models-of-ai-tools&#34;&gt;&lt;a href=&#34;https://github.com/x1xhlol/system-prompts-and-models-of-ai-tools&#34;&gt;https://github.com/x1xhlol/system-prompts-and-models-of-ai-tools&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* üöÄ I managed to obtain FULL official v0, Manus, Cursor, Same.dev &amp;amp; Lovable system prompts and internal tools.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomjoseph-branchomni&#34;&gt;&lt;a href=&#34;https://github.com/joseph-branch/omni&#34;&gt;https://github.com/joseph-branch/omni&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Omni CLI is a command-line interface for interacting with different AI models within the same session. It&amp;#39;s currently in early alpha stages and may have bugs or incomplete functionality.&#xA;* The project follows a clean architecture with separation of concerns:&#xA;    + Contexts: Manage global state and provide access to it through hooks&#xA;    + Hooks: Encapsulate reusable logic and side effects&#xA;    + Components: UI elements that consume contexts and hooks&#xA;    + Utils: Pure utility functions&#xA;* Multiple AI Model Support: Integrates with OpenAI, Anthropic, Mistral, and Google AI models.&#xA;* Persistent Conversation Context: Maintains conversation history throughout the session.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomthe-pocketpocketflow&#34;&gt;&lt;a href=&#34;https://github.com/The-Pocket/PocketFlow&#34;&gt;https://github.com/The-Pocket/PocketFlow&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Pocket Flow: 100-line minimalist LLM framework&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcombypirobairo&#34;&gt;&lt;a href=&#34;https://github.com/bypirob/airo&#34;&gt;https://github.com/bypirob/airo&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Deploy projects directly from local computer to production server with Airo.&#xA;* Focus on building product, not managing infrastructure.&#xA;* Build and push Docker images directly from local machine to container registry.&#xA;* Deploy instantly with a single command from computer.&#xA;* Easily update configurations and containers securely using SSH.&#xA;* Set up HTTPS and reverse proxy automatically using Caddy.&#xA;* Define services in compose.yml file.&#xA;* Configure deployment details in env.yml file.&#xA;* Prepare Dockerfile for each service.&#xA;* Set up Caddyfile for automatic HTTPS and reverse proxy setup.&#xA;* Run command `airo deploy` to deploy new updates.&#xA;* Create a new project directory and navigate to it.&#xA;* Configure env.yaml file with server IP, user credentials, and services.&#xA;* Add Dockerfile to project for each service.&#xA;* Configure compose.yml file with services and their details.&#xA;* Deploy project using command `airo deploy`.&#xA;* Use `airo compose` to build and push Docker image without deploying.&#xA;* Use `airo caddy` to update Caddyfile.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomcle-bhttpdbg&#34;&gt;&lt;a href=&#34;https://github.com/cle-b/httpdbg&#34;&gt;https://github.com/cle-b/httpdbg&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* httpdbg: a tool for Python developers to debug HTTP(S) client and server requests in a Python program&#xA;* To use it, execute your program using `pyhttpdbg` command instead of `python`&#xA;* Open a browser to `http://localhost:4909` to view the requests&#xA;* Full documentation =&amp;gt; https://httpdbg.readthedocs.io/&#xA;* pip install httpdbg&#xA;* By default, both client and server requests are recorded&#xA;* To record only client requests, use the `--only-client` command line argument&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomfus3ngem-assist&#34;&gt;&lt;a href=&#34;https://github.com/Fus3n/gem-assist&#34;&gt;https://github.com/Fus3n/gem-assist&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Gem-Assist is a Python-based personal assistant that leverages Google&amp;#39;s Gemini models (and other) to help with various tasks, designed to be versatile and extensible.&#xA;* Powered by LLM: Utilizes LLMs for natural language understanding and generation.&#xA;* Tool-based architecture: Equipped with a variety of tools for tasks like web searching, file system operations, system information retrieval, Reddit interaction, running shell commands, and more.&#xA;* Customizable: Easily configure the assistant&amp;#39;s behavior and extend its capabilities with new tools.&#xA;* Simple Chat Interface: Interact with the assistant through a straightforward command-line chat interface.&#xA;* Memory: Can save notes between conversation and remember them.&#xA;* Saving Conversation: Save and load previous conversations.&#xA;* Commands: Supports creating/executing code, use /commands for more information.&#xA;* Extension: For now you are required to write some code to extend its capabilities like adding commands to CommandExecutor or making new tools.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomalan2207bulletproof-react&#34;&gt;&lt;a href=&#34;https://github.com/alan2207/bulletproof-react&#34;&gt;https://github.com/alan2207/bulletproof-react&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A simple, scalable, and powerful architecture for building production ready React applications.&#xA;* React has a diverse ecosystem with hundreds of great libraries but can be overwhelming due to the many choices.&#xA;* The repo presents a way of creating React applications using some of the best tools in the ecosystem with a good project structure that scales well.&#xA;* The goal is to serve as a collection of resources and best practices for developing React applications, showcasing practical solutions to real-world problems.&#xA;* This repo provides a solid foundation for building applications based on principles such as ease of use, maintainability, using the right tools, clean boundaries, security, performance, scalability, and early issue detection.&#xA;* The guide is opinionated but not a template or framework, allowing developers to decide what works best for their team and stay consistent with their style.&#xA;* The tools and libraries used are just suggestions, and developers can replace them with something that fits their needs better.&#xA;* Key concepts include application overview, project standards, project structure, components and styling, API layer, state management, testing, error handling, security, performance, deployment, and additional resources.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomstopngoreact-proto-lite&#34;&gt;&lt;a href=&#34;https://github.com/StopNGo/react-proto-lite&#34;&gt;https://github.com/StopNGo/react-proto-lite&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Template React Project for Fast SPA Prototyping&#xA;* A lite version of the React Proto - React TypeScript Boilerplate&#xA;* Contains only the essentials for Single Page Application (SPA) projects&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomfleuristesfleur&#34;&gt;&lt;a href=&#34;https://github.com/fleuristes/fleur&#34;&gt;https://github.com/fleuristes/fleur&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Fleur is a desktop application that serves as an app marketplace for MCPs, allowing discovery, installation, and management without using a command line.&#xA;* It&amp;#39;s made for non-technical users but is open-source and extensible for developers.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcommatiasmolinasevolving-agents&#34;&gt;&lt;a href=&#34;https://github.com/matiasmolinas/evolving-agents&#34;&gt;https://github.com/matiasmolinas/evolving-agents&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;The text describes an open-source framework called Evolving Agents Framework (EAF), which is designed to simplify the development of intelligent agents using a combination of machine learning, natural language processing, and software engineering principles.&#xA;&#xA;**Key Components**&#xA;&#xA;1. **SystemAgent**: A ReAct agent that orchestrates operations by leveraging specialized tools.&#xA;2. **ArchitectZero**: Handles solution design and multi-framework support through Providers and Adapters.&#xA;3. **SmartLibrary**: Powers semantic search capabilities for component persistence and discovery via ChromaDB.&#xA;4. **SmartAgentBus**: Enables capability-based routing for agent interactions.&#xA;5. **CreateComponentTool**: Invokes the AgentFactory to create agents from different frameworks.&#xA;&#xA;**Features**&#xA;&#xA;1. **Multi-framework support**: Supports multiple machine learning frameworks, including BeeAI and OpenAI Agents SDK.&#xA;2. **Dependency injection**: Simplifies component wiring and initialization.&#xA;3. **Modular design**: Core components are decoupled, facilitating extension and testing.&#xA;4. **Clear logging**: Provides insights into agent thinking and component interactions.&#xA;5. **LLM caching**: Reduces API costs during development by caching completions and embeddings.&#xA;&#xA;**Usage**&#xA;&#xA;1. Run the Comprehensive Demo: `python examples/invoice_processing/architect_zero_comprehensive_demo_refactored.py`&#xA;2. Explore Output files, including:&#xA;&#x9;* `architect_design_output.json`: Solution blueprint from ArchitectZero&#xA;&#x9;* `workflow_execution_output.json`: Executable workflow generated by SystemAgent&#xA;&#x9;* `smart_library_demo.json`: State of the component library after the run&#xA;3. Use the toolkit to design and process conversational forms (forms/), create and evolve agents (agent_evolution/), or explore autocomplete systems (autocomplete/).&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomgabriansaexplicit-agent&#34;&gt;&lt;a href=&#34;https://github.com/gabriansa/explicit-agent&#34;&gt;https://github.com/gabriansa/explicit-agent&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- A minimalist framework for building AI agents with full user control and zero abstraction layers&#xA;- Complete transparency: No hidden prompts or &amp;#34;magic&amp;#34; under the hood&#xA;- Full control: You define exactly how your agent behaves&#xA;- Minimal infrastructure: Only the essentials needed to run capable AI agents&#xA;- Simplicity first: Ability to build complex behaviors from simple, understandable components&#xA;&#xA;- User-defined state management is completely up to you&#xA;- Flexible implementation options for state management&#xA;- Direct manipulation of state between tools creates a simple and transparent flow of information&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomarnestrickmannnotechat&#34;&gt;&lt;a href=&#34;https://github.com/arnestrickmann/Notechat&#34;&gt;https://github.com/arnestrickmann/Notechat&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- NoteChat is a desktop application that enables you to interact with your Apple Notes through a chat interface, built with Electron and React.&#xA;- The application uses Vite as the development server and build tool for the React part of the application.&#xA;- Electron handles the desktop application wrapper and native system interactions.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomriazarbiiblncr&#34;&gt;&lt;a href=&#34;https://github.com/riazarbi/iblncr&#34;&gt;https://github.com/riazarbi/iblncr&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A command line tool for rebalancing a portfolio of stocks and ETFs via Interactive Brokers, installed with `pipx install git+https://github.com/riazarbi/iblncr.git`.&#xA;* The Interactive Brokers API requires a locally installed Trader Workstation or IB Gateway application to be used.&#xA;* To start the IB Gateway Docker container, use either:&#xA;  * Manual command: `docker run -it --rm --name broker -p 4003:4003 ghcr.io/riazarbi/ib-headless:10.30.1t`&#xA;  * Built-in launch command: `iblncr launch`&#xA;* To start the application, use: `iblncr rebalance --account &amp;lt;account_number&amp;gt; --model &amp;lt;model_file&amp;gt; --port &amp;lt;port_number&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcombytebot-aibytebot&#34;&gt;&lt;a href=&#34;https://github.com/bytebot-ai/bytebot&#34;&gt;https://github.com/bytebot-ai/bytebot&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;This document provides an overview of Bytebot, a platform for building intelligent computer use agents. The agent uses AI models to understand visual contexts, interact with desktop applications, and automate tasks.&#xA;&#xA;**Key Features:**&#xA;&#xA;1.  **AI Model Integration:** Bytebot integrates with various AI models, including Anthropic Claude, OpenAI GPT-4V, Google Gemini, Mistral Large, DeepSeek, OmniParser, CLIP/ViT, Segment Anything Model (SAM), and others.&#xA;2.  **Customization:** Developers can integrate their preferred programming languages or frameworks to build agents using Bytebot&amp;#39;s REST API.&#xA;3.  **REST API:** The platform provides a REST API for easy integration with other applications.&#xA;4.  **Desktop Automation:** Bytebot allows users to automate tasks on desktop computers, including UI interactions and task automation.&#xA;&#xA;**Integrating AI Models:**&#xA;&#xA;1.  **API-Based Integration:** Use the model provider&amp;#39;s API to send screenshots and receive instructions.&#xA;2.  **Local Model Deployment:** Run smaller models locally alongside Bytebot.&#xA;3.  **Hybrid Approaches:** Combine local processing with cloud-based intelligence.&#xA;&#xA;**Building Agents:**&#xA;&#xA;1.  **Python Integration:** Ideal for data science and ML integration using libraries like requests, Pillow, and PyTorch.&#xA;2.  **JavaScript/TypeScript Integration:** Great for web-based agents using Node.js or browser environments.&#xA;3.  **Java/Kotlin Integration:** Robust options for enterprise applications.&#xA;4.  **Go Integration:** Excellent for high-performance, concurrent agents.&#xA;5.  **Rust Integration:** For memory-safe, high-performance implementations.&#xA;6.  **C#/.NET Integration:** Strong integration with Windows environments and enterprise systems.&#xA;&#xA;**Best Practices:**&#xA;&#xA;1.  **Automated Testing:** Run end-to-end tests in a consistent environment.&#xA;2.  **Web Scraping:** Automate web browsing and data collection.&#xA;3.  **UI Automation:** Create agents that interact with desktop applications.&#xA;4.  **AI Training:** Generate training data for computer vision and UI interaction models.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomjohnbean393sidekick&#34;&gt;&lt;a href=&#34;https://github.com/johnbean393/Sidekick&#34;&gt;https://github.com/johnbean393/Sidekick&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Chat with a local LLM that can respond with information from your files, folders and websites on your Mac without installing any other software.&#xA;* All conversations happen offline, and your data stays secure. &#xA;* Sidekick is a local first application ‚Äì‚Äì with a built in inference engine for local models, while accomodating OpenAI compatible APIs for additional model options.&#xA;* Access files, folders, and websites from your experts, which can be individually configured to contain resources related to specific areas of interest.&#xA;* Sidekick accesses files, folders, and websites from your experts, which can be individually configured to contain resources related to specific areas of interest. &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsseeinglogiccompostsvisual-readability-patterns&#34;&gt;&lt;a href=&#34;https://seeinglogic.com/posts/visual-readability-patterns/&#34;&gt;https://seeinglogic.com/posts/visual-readability-patterns/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;This is an excellent article on improving code readability. Here&amp;#39;s a summary of the key points:&#xA;&#xA;**The importance of readability**&#xA;&#xA;Readability is crucial for maintainable and efficient software development. It allows developers to quickly understand the code, fix issues, and make changes without getting bogged down in complexity.&#xA;&#xA;**8 patterns for improving code readability**&#xA;&#xA;The article identifies 8 patterns that can help improve code readability:&#xA;&#xA;1. **Line/Operator/Operand count**: Break up long functions with fewer variables and operators.&#xA;2. **Novelty**: Avoid novelty in function shapes, operators, or syntactic sugars; reuse common patterns instead.&#xA;3. **Grouping**: Split series of long function chains, iterators, or comprehensions into logical groupings via helper functions or intermediate variables.&#xA;4. **Conditional simplicity**: Keep conditional tests as short as possible and prefer sequences of the same logical operator over mixing operators within a conditional.&#xA;5. **Gotos**: Use gotos only when necessary (e.g., to avoid alternatives that are worse).&#xA;6. **Nesting**: Minimize nested logic (avoid large variations in indentation) and isolate deep nesting in separate functions.&#xA;7. **Variable distinction**: Always use descriptive and visually distinct variable names; avoid variable shadowing.&#xA;8. **Variable liveness**: Prefer shorter liveness durations for variables, especially with regard to function boundaries.&#xA;&#xA;**Additional tips**&#xA;&#xA;* Reuse familiar code patterns and follow the Principle of Least Surprise when writing code.&#xA;* Use templated or generic functions to reduce repetition and make code more predictable.&#xA;* Avoid premature optimization; computers are fast enough.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomtracktorplaysmart&#34;&gt;&lt;a href=&#34;https://github.com/Tracktor/playsmart&#34;&gt;https://github.com/Tracktor/playsmart&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- End the never-ending game of manually recording, inspecting, and updating E2E tests with Playwright.&#xA;- Playsmart is a code-first approach for automating web interactions using real-time LLM agents.&#xA;- Install via pip: `pip install playsmart` (requires Python 3.10+).&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomcodingworkflowai-code-fusion&#34;&gt;&lt;a href=&#34;https://github.com/codingworkflow/ai-code-fusion&#34;&gt;https://github.com/codingworkflow/ai-code-fusion&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* - Visual directory explorer for selecting code files&#xA;* - Advanced file filtering with customizable patterns&#xA;* - Accurate token counting for various AI models&#xA;* - Code content processing with statistics&#xA;* - Cross-platform support (Windows, macOS, Linux)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomezyangcodemcp&#34;&gt;&lt;a href=&#34;https://github.com/ezyang/codemcp&#34;&gt;https://github.com/ezyang/codemcp&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Install codemcp to make Claude Desktop a pair programming assistant&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Link List :: 2025-03-03</title>
      <link>/posts/1743337915-linklist-2025-03-03/</link>
      <pubDate>Mon, 03 Mar 2025 18:00:25 +0000</pubDate>
      <guid>/posts/1743337915-linklist-2025-03-03/</guid>
      <description>&lt;h2 id=&#34;httpsgithubcomsupercog-aiagentic&#34;&gt;&lt;a href=&#34;https://github.com/supercog-ai/agentic&#34;&gt;https://github.com/supercog-ai/agentic&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Agentic is a lightweight agent framework, reference implementation of the agent protocol, and an agent runtime built on Ray&#xA;* Supports teams of cooperating agents, Human-in-the-loop, easy definition and use of tools, production-tested tools&#xA;* Can be used for full browser automation, including authenticated sessions&#xA;* Example applications include daily podcast creation and meeting bot agents&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomscaliseraoulambrogio&#34;&gt;&lt;a href=&#34;https://github.com/scaliseraoul/ambrogio&#34;&gt;https://github.com/scaliseraoul/ambrogio&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Ambrogio is an intelligent dev agent that helps tackle technical debt in your codebase.&#xA;* It systematically enhances code quality and maintainability through automated analysis and improvements.&#xA;* Starting with docstring improvements, Ambrogio uses advanced language models to understand your code and generate meaningful documentation.&#xA;* Features:&#xA;  * Smart Docstring Generation: Automatically adds clear, comprehensive docstrings to classes and methods&#xA;  * Multi-Provider Support: Works with various LLM providers through LiteLLM integration&#xA;  * Unit Test Generation (Beta): Analyzes code coverage and generates missing unit tests&#xA;  * Pre-PR test runs to prevent regressions&#xA;  * Improve existing docstrings in modified methods&#xA;  * Documentation generation for easier understanding&#xA;  * Type safety refactoring&#xA;  * Spaghetti code cleanup&#xA;  * Code formatting and best practices enforcement&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomjendrikseippvulture&#34;&gt;&lt;a href=&#34;https://github.com/jendrikseipp/vulture&#34;&gt;https://github.com/jendrikseipp/vulture&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Vulture is a tool that analyzes Python code to identify unused imports, variables, functions, and other code elements.&#xA;&#xA;**Features**&#xA;&#xA;1. **Unused import detection**: Finds unused imports in the analyzed code.&#xA;2. **Unused variable detection**: Detects unused variables, including global and local ones.&#xA;3. **Unused function detection**: Identifies unused functions.&#xA;4. **Unreachable code detection**: Finds unreachable code, such as code after `return`, `break`, `continue`, or `raise` statements.&#xA;&#xA;**How it works**&#xA;&#xA;Vulture uses the Abstract Syntax Tree (AST) module to build a tree representation of the analyzed code. It then traverses this tree and records the names of defined and used objects. The tool reports the objects that have been defined but not used, which are considered dead code.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcompagezero-devpagezero&#34;&gt;&lt;a href=&#34;https://github.com/pagezero-dev/pagezero&#34;&gt;https://github.com/pagezero-dev/pagezero&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  * Open-source TypeScript starter for full-stack web development on Cloudflare&#xA;&#xA;- # Building on Strong Foundations&#xA;  * Core:&#xA;    + Vite + React + React Router v7&#xA;    + Cloudflare Pages (hosting) + D1 (database)&#xA;    + TypeScript + TailwindCSS + Drizzle ORM&#xA;  * Tooling:&#xA;    + GitHub Actions (CI/CD)&#xA;    + Prettier + ESLint (code quality)&#xA;    + Vitest + Playwright (testing)&#xA;    + Storybook + MDX (docs &amp;amp; components)&#xA;&#xA;- # Essential npm Scripts&#xA;  * `npm run setup`&#xA;    - Performs `npm install`, setups basic env vars, database and playwright browser drivers&#xA;  * `npm run dev`&#xA;    - Boots development server&#xA;  * `npm run build`&#xA;    - Builds the app&#xA;  * `npm start`&#xA;    - Runs built app; this is how your app will be run on production&#xA;  * `npm test`&#xA;    - Executes unit tests&#xA;  * `npm run test:types`&#xA;    - TypeScript types check&#xA;  * `npm run test:e2e:ui`&#xA;    - Executes browser tests in UI mode, perfect for development&#xA;  * `npm run lint`&#xA;    - ESLint check&#xA;  * `npm run format`&#xA;    - Prettier check&#xA;  * `npm run storybook`&#xA;    - Boots Storybook&#xA;  * `npm run doctor`&#xA;    - Runs all basic sanity checks: format, lint, types check and unit tests&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomlambdasecautogrep&#34;&gt;&lt;a href=&#34;https://github.com/lambdasec/autogrep&#34;&gt;https://github.com/lambdasec/autogrep&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Autogrep Tool&#xA;&#xA;* Autogrep is a tool for automatically generating and filtering Semgrep rules from vulnerability patches.&#xA;* It addresses the need for high-quality security rules after Sem Gregg&amp;#39;s official rules are no longer available under permissive licenses.&#xA;* Autogrep leverages Large Language Models (LLMs) to automate rule generation and validation.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomwhiteshadow1234whispertranscriber&#34;&gt;&lt;a href=&#34;https://github.com/whiteSHADOW1234/WhisperTranscriber&#34;&gt;https://github.com/whiteSHADOW1234/WhisperTranscriber&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Easily transcribe YouTube videos, MP4, and MP3 files to text using Whisper on Google Colab.&#xA;* No local setup required ‚Äî runs entirely on Google Colab&#xA;* Supports YouTube URLs, MP4, and MP3 files&#xA;* Outputs transcribed text in .txt format&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomduriantacopykomodo&#34;&gt;&lt;a href=&#34;https://github.com/duriantaco/pykomodo&#34;&gt;https://github.com/duriantaco/pykomodo&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* **ParallelChunker**: A class used to split a large codebase into equal chunks suitable for Large Language Models (LLMs).&#xA;* **Code Chunking**: The process of dividing a large codebase into smaller, more manageable chunks.&#xA;* **LLM Context Windows**: The size of the context window for LLMs, which determines how much code is processed at once.&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Link List :: 2025-02-16</title>
      <link>/posts/1739728778-linklist-2025-02-16/</link>
      <pubDate>Sun, 16 Feb 2025 18:00:25 +0000</pubDate>
      <guid>/posts/1739728778-linklist-2025-02-16/</guid>
      <description>&lt;h2 id=&#34;httpswwwrunpulsecomblogwhy-llms-suck-at-ocr&#34;&gt;&lt;a href=&#34;https://www.runpulse.com/blog/why-llms-suck-at-ocr&#34;&gt;https://www.runpulse.com/blog/why-llms-suck-at-ocr&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We believed LLMs could solve data extraction by plugging in the latest models.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;However, we found that their probabilistic approach favors common words over exact transcription.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LMMs suck at complex OCR because they are excellent for text-generation or summarization tasks but falter at precise character recognition.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Their probabilistic nature causes fatal errors in OCR tasks due to lossy transformations and blindspots.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*I. How Do LLMs ‚ÄúSee‚Äù and Process Images?*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LLMs process images through high-dimensional embeddings prioritizing semantic understanding over precise character recognition.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The attention mechanism splits images into fixed-size patches, losing fine-grained spatial relationships and critical information about data relationships.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LMMs struggle with complex 2D relationships like table structure recognition and extraction.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*II. Real-World Failures and Hidden Risks*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LMMs fail in catastrophic ways for business-critical applications in industries like legal and healthcare.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Failures include financial and medical data corruption, equation solving problems, and prompt injection + ethical vulnerabilities.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;httpsgithubcomms-jpqsad&#34;&gt;&lt;a href=&#34;https://github.com/ms-jpq/sad&#34;&gt;https://github.com/ms-jpq/sad&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Space Age sed is a Batch File Edit tool that shows a nice diff of proposed changes before committing them, allowing double-checking of edits.&lt;/li&gt;&#xA;&lt;li&gt;Unlike sed, this tool enables selective replacement and choosing the clustering factor for changes using &amp;ndash;unified=&lt;!-- raw HTML omitted --&gt;.&lt;/li&gt;&#xA;&lt;li&gt;It can display side-by-side changes using delta if installed.&lt;/li&gt;&#xA;&lt;li&gt;To replace all occurrences of a pattern with another in a repository, use &lt;code&gt;find &amp;quot;$FIND_ARGS&amp;quot; | sad &#39;&amp;lt;pattern&amp;gt;&#39; &#39;&amp;lt;replacement&amp;gt;&#39;&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;httpsoldredditcomrlocalllamacomments1im35ylhow_to_scale_rag_to_20_million_documents&#34;&gt;&lt;a href=&#34;https://old.reddit.com/r/LocalLLaMA/comments/1im35yl/how_to_scale_rag_to_20_million_documents/&#34;&gt;https://old.reddit.com/r/LocalLLaMA/comments/1im35yl/how_to_scale_rag_to_20_million_documents/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Popular vector databases for scaling RAG include Weaviate, PGVector, Pinecone, and Qdrant, with hybrid RAG techniques mentioned for optimization.&lt;/li&gt;&#xA;&lt;li&gt;ParadeDB (Postgres + pg_vector) and LanceDB are suggested for scalability and hybrid search.&lt;/li&gt;&#xA;&lt;li&gt;GraphRAG/LightRAG approaches can be used but are computationally expensive due to graph-based complexity.&lt;/li&gt;&#xA;&lt;li&gt;Horizontal scaling is supported by modern vector DBs through sharding and replication, though graph traversal slows down as data grows.&lt;/li&gt;&#xA;&lt;li&gt;Embedding models like stella_en_400M_v5 are recommended, with binary embeddings (quantized vectors) suggested to reduce storage and improve performance.&lt;/li&gt;&#xA;&lt;li&gt;HNSW indexing is a popular choice, while alternatives like IVF or IVF-PQ can improve performance through cluster-based indexing.&lt;/li&gt;&#xA;&lt;li&gt;Sparse rerankers like BM25 combined with dense embeddings enable hybrid search for better results.&lt;/li&gt;&#xA;&lt;li&gt;Index creation is more efficient when the index is dropped before ingestion and rebuilt after data ingestion is complete.&lt;/li&gt;&#xA;&lt;li&gt;Chunking strategies, like adaptive window chunking, dynamically adjust chunk sizes based on dataset requirements.&lt;/li&gt;&#xA;&lt;li&gt;Proper chunk overlap is critical to avoid losing context during retrieval.&lt;/li&gt;&#xA;&lt;li&gt;Preprocessing should include metadata extraction, semantic enrichment, and duplicate removal to optimize embeddings and indexing.&lt;/li&gt;&#xA;&lt;li&gt;Efficient pipelines are essential for handling diverse document types such as PDFs, scanned images, and statistical data.&lt;/li&gt;&#xA;&lt;li&gt;Segmenting documents by topic or content type and routing them to appropriate vector DBs improves pipeline efficiency.&lt;/li&gt;&#xA;&lt;li&gt;Middleware layers can compress, deduplicate, and summarize embeddings to optimize data ingestion.&lt;/li&gt;&#xA;&lt;li&gt;Azure AI Search is recommended for enterprise-level ingestion pipelines.&lt;/li&gt;&#xA;&lt;li&gt;Hybrid RAG combines dense vector search and sparse retrieval (e.g., BM25) for improved performance and relevance.&lt;/li&gt;&#xA;&lt;li&gt;Hierarchical RAG methods involve topic-based sorting before diving into chunk-level retrieval.&lt;/li&gt;&#xA;&lt;li&gt;ElasticSearch and BM25 are suggested as alternatives to vector DBs for certain domains with better relevance.&lt;/li&gt;&#xA;&lt;li&gt;Fine-tuning models on 20M documents can encode domain-specific knowledge but is more expensive and risks overfitting.&lt;/li&gt;&#xA;&lt;li&gt;RAG is cheaper, faster, and more flexible than fine-tuning and is preferred for large-scale data retrieval.&lt;/li&gt;&#xA;&lt;li&gt;Embedding 20M documents can take significant time but can be parallelized with multiple GPUs, costing between $1,000 and $20,000.&lt;/li&gt;&#xA;&lt;li&gt;Trade-offs between speed, cost, and accuracy can be adjusted by tweaking clustering sizes or chunking strategies.&lt;/li&gt;&#xA;&lt;li&gt;Ensure the dataset is relevant and up-to-date since larger scales do not always yield better results.&lt;/li&gt;&#xA;&lt;li&gt;Vendor solutions like Azure AI Search are helpful but should be used cautiously to avoid vendor lock-in.&lt;/li&gt;&#xA;&lt;li&gt;Iterative testing is necessary to identify the best combination of embeddings, chunking, and retrieval strategies for the specific dataset.&lt;/li&gt;&#xA;&lt;li&gt;Critics argue RAG struggles at scale, but others dismiss this as overly pessimistic, citing successful implementations at larger scales.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;httpsoldredditcomrpythoncomments1ime8jaa_modern_python_repository_template_with_uv_and&#34;&gt;&lt;a href=&#34;https://old.reddit.com/r/Python/comments/1ime8ja/a_modern_python_repository_template_with_uv_and/&#34;&gt;https://old.reddit.com/r/Python/comments/1ime8ja/a_modern_python_repository_template_with_uv_and/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Showcased a modern Python repository template&lt;/li&gt;&#xA;&lt;li&gt;Features UV and Just for self-hosting&lt;/li&gt;&#xA;&lt;li&gt;Aims to provide a clean and minimalistic template&lt;/li&gt;&#xA;&lt;li&gt;Includes example use cases and explanations&lt;/li&gt;&#xA;&lt;li&gt;Meant to serve as a starting point for new projects&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;httpsgithubcomranjanprjagentollama&#34;&gt;&lt;a href=&#34;https://github.com/ranjanprj/agentollama&#34;&gt;https://github.com/ranjanprj/agentollama&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The Agentollama Framework enables creation, execution, and monitoring of intelligent Agents without writing business logic.&lt;/li&gt;&#xA;&lt;li&gt;AI determines which functions to call dynamically, without hardcoding.&lt;/li&gt;&#xA;&lt;li&gt;Generates code dynamically for API calls using AI.&lt;/li&gt;&#xA;&lt;li&gt;Tools are loaded dynamically when an Agent is called to perform a task.&lt;/li&gt;&#xA;&lt;li&gt;Can be used to integrate with legacy applications for productivity enhancement.&lt;/li&gt;&#xA;&lt;li&gt;Real-time execution step tracking and logs of task execution and decision-making by Agents.&lt;/li&gt;&#xA;&lt;li&gt;Helps debug why a particular Agent took a specific action.&lt;/li&gt;&#xA;&lt;li&gt;Ensures Agents produce outputs in a predefined format.&lt;/li&gt;&#xA;&lt;li&gt;Prevents deviation in reasoning and decision-making.&lt;/li&gt;&#xA;&lt;li&gt;Essential for enterprise use cases where multiple API interactions must follow strict formats.&lt;/li&gt;&#xA;&lt;li&gt;Vectorized file storage for intelligent querying.&lt;/li&gt;&#xA;&lt;li&gt;Retrieval-Augmented Generation (RAG) Agents to enhance decision-making with external knowledge.&lt;/li&gt;&#xA;&lt;li&gt;Loop Agents to iterate over datasets and execute workflows dynamically.&lt;/li&gt;&#xA;&lt;li&gt;Enables seamless multi-agent orchestration for business processes.&lt;/li&gt;&#xA;&lt;li&gt;Supports the DeepSeek R1 (8B Model) Integration for on-device tool code generation.&lt;/li&gt;&#xA;&lt;li&gt;UI-based Agent Execution, no need to touch an IDE!&lt;/li&gt;&#xA;&lt;li&gt;Performance Metrics &amp;amp; Testing (Upcoming Feature) to analyze Agent efficiency and decision-making accuracy.&lt;/li&gt;&#xA;&lt;li&gt;Compatible with Python 3.x.&lt;/li&gt;&#xA;&lt;li&gt;Built using Ollama (AI Model Server), Django, and Vector Database.&lt;/li&gt;&#xA;&lt;li&gt;Clone the repository via git clone &lt;a href=&#34;https://github.com/your-repo/agentollama.git&#34;&gt;https://github.com/your-repo/agentollama.git&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Create and activate virtual environment: python -m venv venv, source venv/bin/activate&lt;/li&gt;&#xA;&lt;li&gt;Install dependencies: pip install django ollama&lt;/li&gt;&#xA;&lt;li&gt;Run Ollama server in the background with Llama3.1 8B Model.&lt;/li&gt;&#xA;&lt;li&gt;Run the Django server: python manage.py runserver&lt;/li&gt;&#xA;&lt;li&gt;Define Agents through the UI and automate workflows effortlessly.&lt;/li&gt;&#xA;&lt;li&gt;Advanced features include dynamic business testing &amp;amp; performance metrics, advanced agent collaboration, and enhanced RAG capabilities.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;httpsgithubcommpaeppervibevoice&#34;&gt;&lt;a href=&#34;https://github.com/mpaepper/vibevoice&#34;&gt;https://github.com/mpaepper/vibevoice&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hi, I&amp;rsquo;m Marc P√§pper and I extended Vlad&amp;rsquo;s work to run with a local whisper model.&lt;/li&gt;&#xA;&lt;li&gt;Original inspiration: whisper-keyboard by Vlad.&lt;/li&gt;&#xA;&lt;li&gt;Faster Whisper implementation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;httpsgithubcompravko-solutionsflashlearn&#34;&gt;&lt;a href=&#34;https://github.com/Pravko-Solutions/FlashLearn&#34;&gt;https://github.com/Pravko-Solutions/FlashLearn&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;This is an introduction to the FlashLearn library, which provides a simple way to integrate large language models (LLMs) into workflows. The library aims to make it easy for startups to use LLMs in their products.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Link List :: 2025-02-10</title>
      <link>/posts/1739216844-linklist-2025-02-10/</link>
      <pubDate>Mon, 10 Feb 2025 19:47:25 +0000</pubDate>
      <guid>/posts/1739216844-linklist-2025-02-10/</guid>
      <description>&lt;h2 id=&#34;httpsgithubcomfareedkhan-devtrain-llm-from-scratch&#34;&gt;&lt;a href=&#34;https://github.com/FareedKhan-dev/train-llm-from-scratch&#34;&gt;https://github.com/FareedKhan-dev/train-llm-from-scratch&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;This is a thorough analysis of two large language models (LLMs), one with 13 million parameters and another with 1 billion parameters. The author provides an in-depth comparison of their strengths and weaknesses, highlighting both the benefits and limitations of each model.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Key Takeaways:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Smaller model can be effective&lt;/strong&gt;: The 13 million-parameter model is able to generate clear and accurate text, even in longer contexts, making it a viable option for goal-oriented tasks.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Bigger model requires deeper architecture&lt;/strong&gt;: The 1 billion-parameter model&amp;rsquo;s ability to handle complex contexts and generate coherent text relies on a more sophisticated architecture that requires careful consideration of its design and training data.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Overfitting is a risk&lt;/strong&gt;: If the bigger model is not designed with sufficient depth and complexity, it may overfit the training data and fail to improve performance compared to smaller models.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Fine-tuning can improve performance&lt;/strong&gt;: Fine-tuning the 1 billion-parameter model on domain-specific data, such as writing emails or essays, can help improve its ability to generate high-quality text.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;Recommendations:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Link List :: 2025-01-26</title>
      <link>/posts/1737900105-linklist-2025-01-26/</link>
      <pubDate>Sun, 26 Jan 2025 14:01:45 +0000</pubDate>
      <guid>/posts/1737900105-linklist-2025-01-26/</guid>
      <description>&lt;h2 id=&#34;httpsgithubcomlanggptaiawesome-claude-prompts&#34;&gt;&lt;a href=&#34;https://github.com/langgptai/awesome-claude-prompts&#34;&gt;https://github.com/langgptai/awesome-claude-prompts&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;httpsgithubcomlsgrepchrome-extension-ollama-chat&#34;&gt;&lt;a href=&#34;https://github.com/lsgrep/chrome-extension-ollama-chat&#34;&gt;https://github.com/lsgrep/chrome-extension-ollama-chat&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A Chrome extension that adds a sleek sidebar interface for chatting with local LLMs using Ollama, built with React, TypeScript, and Vite.&lt;/li&gt;&#xA;&lt;li&gt;Supports smooth sidebar integration with any webpage&lt;/li&gt;&#xA;&lt;li&gt;Includes chat interface with support for Markdown formatting&lt;/li&gt;&#xA;&lt;li&gt;Features real-time streaming responses&lt;/li&gt;&#xA;&lt;li&gt;Offers clean and modern UI design&lt;/li&gt;&#xA;&lt;li&gt;Allows multiple model support via Ollama&lt;/li&gt;&#xA;&lt;li&gt;Provides keyboard shortcuts for quick access&lt;/li&gt;&#xA;&lt;li&gt;Requires Node.js (v16 or higher), npm, yarn, Chrome browser, and Ollama installed and running locally&lt;/li&gt;&#xA;&lt;li&gt;Clone the repository using &lt;code&gt;git clone &amp;lt;repository-url&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Install dependencies with &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Build the extension with &lt;code&gt;npm run build&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Load the extension in Chrome by enabling &amp;ldquo;Developer mode&amp;rdquo; and loading it from the &lt;code&gt;dist&lt;/code&gt; directory&lt;/li&gt;&#xA;&lt;li&gt;Start Ollama with CORS enabled by running &lt;code&gt;OLLAMA_ORIGINS=chrome-extension://* ollama serve&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Pull a model (if necessary) using &lt;code&gt;ollama pull &amp;lt;model-name&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Start the development server with &lt;code&gt;npm run dev&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;The extension will rebuild automatically when changes are made&lt;/li&gt;&#xA;&lt;li&gt;Click the extension icon to toggle the sidebar, select an Ollama model, and start chatting&lt;/li&gt;&#xA;&lt;li&gt;Features React + TypeScript for the UI, Vite for building and development, Chrome Extension Manifest V3, and Ollama API for local LLM integration&lt;/li&gt;&#xA;&lt;li&gt;Utilizes real-time streaming using Server-Sent Events&lt;/li&gt;&#xA;&lt;li&gt;Includes improved sidebar styling and layout, smooth animations, and fixed visibility toggle&lt;/li&gt;&#xA;&lt;li&gt;Adjusted width for better readability&lt;/li&gt;&#xA;&lt;li&gt;Initial release with basic chat functionality and Ollama integration&lt;/li&gt;&#xA;&lt;li&gt;Supports Markdown formatting&lt;/li&gt;&#xA;&lt;li&gt;Licensed under the WTFPL - Do What the Fuck You Want to Public License (see LICENSE file)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;httpsgithubcomkoljabrealtimestt&#34;&gt;&lt;a href=&#34;https://github.com/KoljaB/RealtimeSTT&#34;&gt;https://github.com/KoljaB/RealtimeSTT&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;A Python library used for speech recognition and transcription.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Link List :: 2025-01-18</title>
      <link>/posts/1737221187-linklist-2025-01-18/</link>
      <pubDate>Sat, 18 Jan 2025 17:26:27 +0000</pubDate>
      <guid>/posts/1737221187-linklist-2025-01-18/</guid>
      <description>&lt;h2 id=&#34;httpselmwealthcommicrostrategy-bitcoin&#34;&gt;&lt;a href=&#34;https://elmwealth.com/microstrategy-bitcoin/&#34;&gt;https://elmwealth.com/microstrategy-bitcoin/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The text is a research report on MicroStrategy (MSTR), a company that has been focused on buying Bitcoin and other cryptocurrencies. The authors of the report provide an analysis of various aspects of MSTR, including its stock price, options trading activity, and return characteristics.&lt;/p&gt;&#xA;&lt;p&gt;Some key points from the report include:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;MicroStrategy&amp;rsquo;s stock price:&lt;/strong&gt; The report notes that MicroStrategy&amp;rsquo;s stock price has returned a significant 200% in about seven months, making it one of the best-performing stocks in the past year.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Options trading activity:&lt;/strong&gt; The authors highlight that hundreds of bullish options trades have been executed on MSTR, which suggests strong investor interest in the stock.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Return characteristics:&lt;/strong&gt; The report notes that the return pattern of MicroStrategy&amp;rsquo;s stock is not very enticing compared to other long-short ETFs, which would be a convenient way to take advantage of potential underperformance.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Risk and frictions:&lt;/strong&gt; The authors caution that MSTR trading comes with high risks and frictions, making it difficult to short or leveraged trade the stock effectively.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Leveraged ETF analysis:&lt;/strong&gt; They analyze a hypothetical long-short ETF that would be long 1x Bitcoin and short 1x MSTR, which they conclude would not be an attractive investment opportunity due to its relatively low return and high risks.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Overall, the report suggests that while MicroStrategy&amp;rsquo;s stock price has been strong, investors should exercise caution when considering leveraged trading or shorting the stock due to the high risks involved.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Link List :: 2025-01-11</title>
      <link>/posts/1737221182-linklist-2025-01-11/</link>
      <pubDate>Sat, 11 Jan 2025 17:26:22 +0000</pubDate>
      <guid>/posts/1737221182-linklist-2025-01-11/</guid>
      <description>&lt;h2 id=&#34;httpswwwkagglecomcodefaressayahstock-market-analysis-prediction-using-lstm&#34;&gt;&lt;a href=&#34;https://www.kaggle.com/code/faressayah/stock-market-analysis-prediction-using-lstm&#34;&gt;https://www.kaggle.com/code/faressayah/stock-market-analysis-prediction-using-lstm&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;httpsgithubcomarihanvfasthtml-modal&#34;&gt;&lt;a href=&#34;https://github.com/arihanv/fasthtml-modal&#34;&gt;https://github.com/arihanv/fasthtml-modal&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Deploy a FastHTML app on Modal&amp;#39;s serverless infra with simple python code&#xA;* Install required packages with pip install -r requirements.txt&#xA;* Run the app with python app.py&#xA;* Create a free account at modal.com and authenticate in CLI&#xA;* Deploy the app with modal deploy deploy.py&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomnikitabobkoaerospace&#34;&gt;&lt;a href=&#34;https://github.com/nikitabobko/AeroSpace&#34;&gt;https://github.com/nikitabobko/AeroSpace&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* AeroSpace is an i3-like tiling window manager for macOS.&#xA;* Based on a tree paradigm and i3 inspired design.&#xA;* Fast workspaces switching without animations, no SIP disabling required.&#xA;* Uses virtual workspaces emulation instead of native Spaces.&#xA;* Plain text configuration (dotfiles friendly), CLI first with manpages and shell completion.&#xA;* No SIP disabling required.&#xA;* Multi-monitor support in i3-like paradigm.&#xA;* Install via Homebrew with autoupdates preferred.&#xA;* Installation options available: https://nikitabobko.github.io/AeroSpace/guide#installation&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsquantpediacomtop-ten-blog-posts-on-quantpedia-in-2024a6080&#34;&gt;&lt;a href=&#34;https://quantpedia.com/top-ten-blog-posts-on-quantpedia-in-2024/?a=6080&#34;&gt;https://quantpedia.com/top-ten-blog-posts-on-quantpedia-in-2024/?a=6080&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Top Ten Blog Posts on Quantpedia in 2024 were the most popular based on Google Analytics ranking.&#xA;* The top 10 posts are:&#xA;  * #10: Pre-Holiday Effect in Commodities ‚Äì historical data reveals a short-term price drift prior to major U.S. holidays&#xA;  * #9: How To Profitably Trade Bitcoin‚Äôs Overnight Sessions?&#xA;  * #8: How to Improve ETF Sector Momentum&#xA;  * #7: How to Improve Commodity Momentum Using Intra-Market Correlation&#xA;  * #6: Combining Discretionary and Algorithmic Trading&#xA;  * #5: Designing Robust Trend-Following System&#xA;  * #4: How to Build Mean Reversion Strategies in Currencies&#xA;  * #3: How Much Bitcoin Should We Allocate To the Portfolio?&#xA;  * #2: Pragmatic Asset Allocation Model for Semi-Active Investors &amp;amp; A Few Thoughts on Pragmatic Asset Allocation&#xA;  * #1: Exploration of CTA Momentum Strategies Using ETFs&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomn1teshypy-listenertabreadme-ov-file&#34;&gt;&lt;a href=&#34;https://github.com/n1teshy/py-listener?tab=readme-ov-file&#34;&gt;https://github.com/n1teshy/py-listener?tab=readme-ov-file&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* PyListener is a tool for near real-time voice processing and speech-to-text conversion.&#xA;* It can be fast or sluggish depending on the compute and memory availability of the environment.&#xA;* Suitable for situations with a 1-second delay, such as AI assistants and voice command processing.&#xA;* Installation: `pip install py-listener`&#xA;* The package contains only one class, `Listener`.&#xA;* The `Listener` class collects audio data into n-second chunks and checks for human voice.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomsimonschubertkai&#34;&gt;&lt;a href=&#34;https://github.com/SimonSchubert/Kai&#34;&gt;https://github.com/SimonSchubert/Kai&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A cross-platform open-source AI interface that runs on Android, iOS, Windows, Mac, Linux, and Web.&#xA;* https://simonschubert.github.io/Kai&#xA;* Gemini 2.0 Flash, Gemini 1.5 Flash, Gemini 1.5 Flash-8B&#xA;* Llama 3.3, Mixtral, Gemma2...&#xA;* Features:&#xA;+ Chat histories&#xA;+ Voice chat&#xA;* Lottie animation: https://lottiefiles.com/free-animation/loading-wDUukARCPj&#xA;* GroqCloud: https://groq.com&#xA;* Gemini: https://gemini.google.com&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomtilmangrieselchipper&#34;&gt;&lt;a href=&#34;https://github.com/TilmanGriesel/chipper&#34;&gt;https://github.com/TilmanGriesel/chipper&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Chipper provides a web interface, CLI, and simple architecture for embedding pipelines, document chunking, web scraping, and query workflows.&#xA;* Built with Haystack, Ollama, Hugging Face, Docker, Tailwind, and ElasticSearch.&#xA;* Runs locally or scales as a Dockerized service.&#xA;* Started as a project to help author with their book, now growing into a fully dockerized service architecture.&#xA;* Features:&#xA;    + Local Ollama and hosted Hugging Face API&#xA;    + Build powerful knowledge base using ElasticSearch embeddings.&#xA;    + Automatically split documents via Haystack.&#xA;    + Scrape content from web sources.&#xA;    + Transcribe audio files into text.&#xA;    + Access via user-friendly CLI or web client interface.&#xA;    + Deploy effortlessly using Docker.&#xA;* Project is a research project, not built for production.&#xA;* Goals:&#xA;    + Create approachable tools for beginners and helpful for experts.&#xA;    + Provide a framework to teach AI concepts in a manageable way.&#xA;    + Offer a playground for educators, explorers, tinkerers, and companies to experiment and innovate.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpshealeycodescombuilding-game-prototypes-with-love&#34;&gt;&lt;a href=&#34;https://healeycodes.com/building-game-prototypes-with-love&#34;&gt;https://healeycodes.com/building-game-prototypes-with-love&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;This is an article about using the L√ñVE programming framework to build prototypes for game development projects. The author shares their experience and lessons learned from building two prototypes: one for a card game and another for a notebook/pen-based game.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Link List :: 2024-12-31</title>
      <link>/posts/1735636186-linklist-2024-12-31/</link>
      <pubDate>Tue, 31 Dec 2024 09:09:47 +0000</pubDate>
      <guid>/posts/1735636186-linklist-2024-12-31/</guid>
      <description>&lt;h2 id=&#34;httpscratesiocratesnpkl&#34;&gt;&lt;a href=&#34;https://crates.io/crates/npkl&#34;&gt;https://crates.io/crates/npkl&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;httpswwwnuancme&#34;&gt;&lt;a href=&#34;https://www.nuanc.me/&#34;&gt;https://www.nuanc.me/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;httpsgithubcomsturdy-devsemantic-code-search&#34;&gt;&lt;a href=&#34;https://github.com/sturdy-dev/semantic-code-search&#34;&gt;https://github.com/sturdy-dev/semantic-code-search&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* üîç Overview &#xA;*  ‚Ä¢ üîß Installation &#xA;*   pip3 install semantic-code-search&#xA;*  ‚Ä¢ üíª Usage &#xA;*   sem &amp;#39;my query&amp;#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomwangxj03ai-cookbooktreemain&#34;&gt;&lt;a href=&#34;https://github.com/wangxj03/ai-cookbook/tree/main&#34;&gt;https://github.com/wangxj03/ai-cookbook/tree/main&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* wangxj03/ai-cookbook&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomandrewngo-iniagentic_rag&#34;&gt;&lt;a href=&#34;https://github.com/AndrewNgo-ini/agentic_rag&#34;&gt;https://github.com/AndrewNgo-ini/agentic_rag&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* # Project Overview&#xA;* A fully custom chatbot built with Agentic RAG (Retrieval-Augmented Generation), combining OpenAI models with a local knowledge base.&#xA;* Lightweight, dependency-free frontend and streamlined FastAPI backend for complete control and simplicity.&#xA;&#xA;* # Technical Details&#xA;* Pure HTML/CSS/JavaScript frontend with no external dependencies&#xA;* FastAPI backend with OpenAI integration&#xA;* Agentic RAG implementation:&#xA;  * Context retrieval using embeddings and cosine similarity&#xA;  * Step-by-step reasoning with Chain of Thought&#xA;  * Function calling for dynamic context retrieval&#xA;  * Comprehensive error handling and logging&#xA;  * Type-safe implementation with Python type hints&#xA;  * Configurable through environment variables&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpsgithubcomduriantacotreeline&#34;&gt;&lt;a href=&#34;https://github.com/duriantaco/treeline&#34;&gt;https://github.com/duriantaco/treeline&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install treeline &#xA;&#xA;from treeline import treeline &#xA;print(treeline(&amp;#34;/path/to/directory&amp;#34;)) &#xA;treeline(&amp;#34;/path/to/directory&amp;#34;, create_md=True) &#xA;&#xA;from treeline.dependency_analyzer import ModuleDependencyAnalyzer &#xA;from treeline.diff_visualizer import DiffVisualizer &#xA;from pathlib import Path &#xA;&#xA;analyzer = ModuleDependencyAnalyzer() &#xA;analyzer.analyze_directory(Path(&amp;#34;.&amp;#34;)) &#xA;with open(&amp;#34;dependencies.html&amp;#34;, &amp;#34;w&amp;#34;, encoding=&amp;#34;utf-8&amp;#34;) as f: &#xA;    f.write(analyzer.generate_html_visualization()) &#xA;    visualizer = DiffVisualizer() &#xA;    diff_html = visualizer.generate_structural_diff(&amp;#34;HEAD^&amp;#34;, &amp;#34;HEAD&amp;#34;) &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpswwwmacrohistorynetdatabase&#34;&gt;&lt;a href=&#34;https://www.macrohistory.net/database/&#34;&gt;https://www.macrohistory.net/database/&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;This is a list of contributors to the &amp;ldquo;History of Economic Thought&amp;rdquo; dataset, which appears to be an open-access project aimed at providing historical data on economic thought. Here are some observations and insights from reviewing this list:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Link List :: 2024-12-11</title>
      <link>/posts/1733949322-linklist-2024-12-11/</link>
      <pubDate>Wed, 11 Dec 2024 20:35:22 +0000</pubDate>
      <guid>/posts/1733949322-linklist-2024-12-11/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/mljar/supertree&#34;&gt;https://github.com/mljar/supertree&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/rudrankriyam/status/1862597006507876640?s=12&#34;&gt;https://x.com/rudrankriyam/status/1862597006507876640?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.blackpiercapital.com/post/leaning-into-discomfort&#34;&gt;https://www.blackpiercapital.com/post/leaning-into-discomfort&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=F3Ow28ImI5U&#34;&gt;https://m.youtube.com/watch?v=F3Ow28ImI5U&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://optionstradingiq.com/road-trip-trade/#&#34;&gt;https://optionstradingiq.com/road-trip-trade/#&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://robotwealth.com/modelling-uvxy-trading-strategies-with-excel/&#34;&gt;https://robotwealth.com/modelling-uvxy-trading-strategies-with-excel/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://minjunes.ai/posts/sleep/index.html&#34;&gt;https://minjunes.ai/posts/sleep/index.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://steelph0enix.github.io/posts/llama-cpp-guide/&#34;&gt;https://steelph0enix.github.io/posts/llama-cpp-guide/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://journals.sagepub.com/doi/abs/10.1177/09567976211044685?journalCode=pssa&#34;&gt;https://journals.sagepub.com/doi/abs/10.1177/09567976211044685?journalCode=pssa&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/LocalLLaMA/comments/1h3fxey/convert_multimodal_model_to_gguf_to_run_locally/&#34;&gt;https://old.reddit.com/r/LocalLLaMA/comments/1h3fxey/convert_multimodal_model_to_gguf_to_run_locally/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.datacamp.com/blog/mixture-of-million-experts&#34;&gt;https://www.datacamp.com/blog/mixture-of-million-experts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/alexbilz/status/1829229314463932689?s=12&#34;&gt;https://x.com/alexbilz/status/1829229314463932689?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/breezedeus/Pix2Text&#34;&gt;https://github.com/breezedeus/Pix2Text&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://my.hrw.com/nsmedia/intgos/html/igo.htm&#34;&gt;https://my.hrw.com/nsmedia/intgos/html/igo.htm&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/options/comments/122pz4e/what_i_learned_from_citadels_training_software/&#34;&gt;https://www.reddit.com/r/options/comments/122pz4e/what_i_learned_from_citadels_training_software/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rahuljoshi44/GraphVega&#34;&gt;https://github.com/rahuljoshi44/GraphVega&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/phiresky/ripgrep-all&#34;&gt;https://github.com/phiresky/ripgrep-all&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/steel-dev/steel-browser&#34;&gt;https://github.com/steel-dev/steel-browser&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://astral.sh/blog/python-build-standalone&#34;&gt;https://astral.sh/blog/python-build-standalone&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/abus-aikorea/voice-pro&#34;&gt;https://github.com/abus-aikorea/voice-pro&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/hkdobrev/cleanmac&#34;&gt;https://github.com/hkdobrev/cleanmac&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/kevinqhlin/status/1864356752369832327?s=12&#34;&gt;https://x.com/kevinqhlin/status/1864356752369832327?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/maryrosecook/status/1864364847150014926?s=12&#34;&gt;https://x.com/maryrosecook/status/1864364847150014926?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/ruliad_ai/status/1864394941029322890?s=12&#34;&gt;https://x.com/ruliad_ai/status/1864394941029322890?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/physicslog/web-highlighter.user.js&#34;&gt;https://github.com/physicslog/web-highlighter.user.js&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/yeonholee50/AmpyFin&#34;&gt;https://github.com/yeonholee50/AmpyFin&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/prince_canuma/status/1864793820409319502?s=12&#34;&gt;https://x.com/prince_canuma/status/1864793820409319502?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=2flCDStm9ys&#34;&gt;https://m.youtube.com/watch?v=2flCDStm9ys&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/paulgauthier/status/1865048480080892402?s=12&#34;&gt;https://x.com/paulgauthier/status/1865048480080892402?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/jimwaterson/status/1865015304642023800?s=12&#34;&gt;https://x.com/jimwaterson/status/1865015304642023800?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/skynews/status/1864937759577608685?s=12&#34;&gt;https://x.com/skynews/status/1864937759577608685?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://treevis.net/&#34;&gt;https://treevis.net/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/ashpreetbedi/status/1865164275209134411?s=12&#34;&gt;https://x.com/ashpreetbedi/status/1865164275209134411?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/RhetTbull/osxphotos&#34;&gt;https://github.com/RhetTbull/osxphotos&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://openwebui.com/f/latentvariable/o1_at_home&#34;&gt;https://openwebui.com/f/latentvariable/o1_at_home&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://cs.au.dk/news-events/award-success-at-ieee-scivis-contest-2023&#34;&gt;https://cs.au.dk/news-events/award-success-at-ieee-scivis-contest-2023&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/jjleng/copilot-more&#34;&gt;https://github.com/jjleng/copilot-more&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Upsonic/gpt-computer-assistant&#34;&gt;https://github.com/Upsonic/gpt-computer-assistant&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/chisasaw/redsage&#34;&gt;https://github.com/chisasaw/redsage&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/ksidiii/status/1866088473985245220?s=12&#34;&gt;https://x.com/ksidiii/status/1866088473985245220?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/2-fly-4-ai/V0-system-prompt/blob/main/v0-system-prompt(updated%2022-11-2024)#L21&#34;&gt;https://github.com/2-fly-4-ai/V0-system-prompt/blob/main/v0-system-prompt(updated%2022-11-2024)#L21&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Link List :: 2024-11-24</title>
      <link>/posts/1733067199-linklist-2024-12-01/</link>
      <pubDate>Sun, 01 Dec 2024 15:33:19 +0000</pubDate>
      <guid>/posts/1733067199-linklist-2024-12-01/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://alvarezquanttrading.com/blog/spy-sso-and-tlt-strategy/&#34;&gt;https://alvarezquanttrading.com/blog/spy-sso-and-tlt-strategy/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://lihaoyun6.github.io/quickrecorder/&#34;&gt;https://lihaoyun6.github.io/quickrecorder/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.quantum-machines.co/blog/understanding-googles-quantum-error-correction-breakthrough/&#34;&gt;https://www.quantum-machines.co/blog/understanding-googles-quantum-error-correction-breakthrough/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/yannikkellerde/AI-Snip&#34;&gt;https://github.com/yannikkellerde/AI-Snip&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=yjBHheCB6Ek&#34;&gt;https://m.youtube.com/watch?v=yjBHheCB6Ek&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/PMTraders/comments/1gwib1f/delta_hedginggamma_scalping_tips_and_tricks/&#34;&gt;https://www.reddit.com/r/PMTraders/comments/1gwib1f/delta_hedginggamma_scalping_tips_and_tricks/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://colab.research.google.com/gist/virattt/251cfea5e66b21c7b6a58b8952476117/hedge-fund-trading-team.ipynb&#34;&gt;https://colab.research.google.com/gist/virattt/251cfea5e66b21c7b6a58b8952476117/hedge-fund-trading-team.ipynb&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=40033490&#34;&gt;https://news.ycombinator.com/item?id=40033490&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/e2b-dev/secure-computer-use&#34;&gt;https://github.com/e2b-dev/secure-computer-use&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://glama.ai/blog/2024-11-25-model-context-protocol-quickstart&#34;&gt;https://glama.ai/blog/2024-11-25-model-context-protocol-quickstart&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.viksnewsletter.com/p/short-intro-to-automotive-lidar&#34;&gt;https://www.viksnewsletter.com/p/short-intro-to-automotive-lidar&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/kolibril13/status/1861180037837287656?s=12&#34;&gt;https://x.com/kolibril13/status/1861180037837287656?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/freeCodeCamp/devdocs&#34;&gt;https://github.com/freeCodeCamp/devdocs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/LocalLLaMA/comments/192h50w/small_ai_dev_tools_pt_1_context_manager/&#34;&gt;https://www.reddit.com/r/LocalLLaMA/comments/192h50w/small_ai_dev_tools_pt_1_context_manager/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Utq-4KgDBEU&#34;&gt;https://www.youtube.com/watch?v=Utq-4KgDBEU&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://codeium.com/windsurf&#34;&gt;https://codeium.com/windsurf&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.diigo.com/profile/garrygolden?page=3&#34;&gt;https://www.diigo.com/profile/garrygolden?page=3&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/spaces/fffiloni/FlipSketch&#34;&gt;https://huggingface.co/spaces/fffiloni/FlipSketch&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/alma18499/status/1861351774604439634?s=12&#34;&gt;https://x.com/alma18499/status/1861351774604439634?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/chartmuse/status/1861081940297707586?s=12&#34;&gt;https://x.com/chartmuse/status/1861081940297707586?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://ollama.com/blog/functions-as-tools&#34;&gt;https://ollama.com/blog/functions-as-tools&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/alonsosilva/status/1861414079505564116?s=12&#34;&gt;https://x.com/alonsosilva/status/1861414079505564116?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://blog.sshh.io/p/building-v0-in-a-weekend&#34;&gt;https://blog.sshh.io/p/building-v0-in-a-weekend&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/tjmlabs/AgentRun&#34;&gt;https://github.com/tjmlabs/AgentRun&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/volatilitywiz/status/1861534082611515548?s=12&#34;&gt;https://x.com/volatilitywiz/status/1861534082611515548?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://discord.com/channels/751429073770643466/809068063411404810/1309442796746182667&#34;&gt;https://discord.com/channels/751429073770643466/809068063411404810/1309442796746182667&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/kevinqhlin/status/1861664707654099114?s=12&#34;&gt;https://x.com/kevinqhlin/status/1861664707654099114?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://qwenlm.github.io/blog/qwq-32b-preview/&#34;&gt;https://qwenlm.github.io/blog/qwq-32b-preview/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/ollama/status/1861860394262016036?s=12&#34;&gt;https://x.com/ollama/status/1861860394262016036?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/shortbelly/status/1860971025695170801?s=12&#34;&gt;https://x.com/shortbelly/status/1860971025695170801?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://reasonabledeviations.com/2020/10/01/option-implied-pdfs/&#34;&gt;https://reasonabledeviations.com/2020/10/01/option-implied-pdfs/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/stocks/comments/1h1cds4/if_you_could_only_buy_one_stock_now_what_would_it/&#34;&gt;https://old.reddit.com/r/stocks/comments/1h1cds4/if_you_could_only_buy_one_stock_now_what_would_it/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://restofworld.org/2024/china-tech-tariffs-which-countries-will-impose/?utm_source=rss&amp;amp;utm_medium=rss&amp;amp;utm_campaign=feeds&#34;&gt;https://restofworld.org/2024/china-tech-tariffs-which-countries-will-impose/?utm_source=rss&amp;amp;utm_medium=rss&amp;amp;utm_campaign=feeds&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/Python/comments/1h1ecw7/opennb_open_jupyter_notebooks_from_github_with/&#34;&gt;https://www.reddit.com/r/Python/comments/1h1ecw7/opennb_open_jupyter_notebooks_from_github_with/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/macapps/comments/1h11c8z/is_there_any_tool_to_securely_store_api_keys/&#34;&gt;https://old.reddit.com/r/macapps/comments/1h11c8z/is_there_any_tool_to_securely_store_api_keys/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/bbcarchive/status/1862043757711081952?s=12&#34;&gt;https://x.com/bbcarchive/status/1862043757711081952?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rfgqiUzZHK4&#34;&gt;https://www.youtube.com/watch?v=rfgqiUzZHK4&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eOjCm5J6DUE&#34;&gt;https://www.youtube.com/watch?v=eOjCm5J6DUE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=HDX7Y1eUwSI&#34;&gt;https://www.youtube.com/watch?v=HDX7Y1eUwSI&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5pfCTdwSONw&#34;&gt;https://www.youtube.com/watch?v=5pfCTdwSONw&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/bytefer/ollama-ocr&#34;&gt;https://github.com/bytefer/ollama-ocr&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/ChatGPTCoding/comments/1h1s1ub/open_source_qwen_25_coder_32b_aider_desktop_app/&#34;&gt;https://old.reddit.com/r/ChatGPTCoding/comments/1h1s1ub/open_source_qwen_25_coder_32b_aider_desktop_app/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/LETFs/comments/1h22xgm/how_does_a_100_index_fund_rotation_to_upro_200/&#34;&gt;https://old.reddit.com/r/LETFs/comments/1h22xgm/how_does_a_100_index_fund_rotation_to_upro_200/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/tonghohin/screen-sharing&#34;&gt;https://github.com/tonghohin/screen-sharing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/thorvg/thorvg&#34;&gt;https://github.com/thorvg/thorvg&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/options/comments/1fj1t9e/i_tested_7_strategies_on_spy_so_you_dont_have_to/&#34;&gt;https://www.reddit.com/r/options/comments/1fj1t9e/i_tested_7_strategies_on_spy_so_you_dont_have_to/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/thetagang/comments/wnt1i5/wheel_golden_rules/&#34;&gt;https://old.reddit.com/r/thetagang/comments/wnt1i5/wheel_golden_rules/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/thetagang/comments/n6ggo7/quick_tip_the_wheel_whats_delta_got_to_do_with_it/&#34;&gt;https://old.reddit.com/r/thetagang/comments/n6ggo7/quick_tip_the_wheel_whats_delta_got_to_do_with_it/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/thetagang/comments/wzwoz0/lets_talk_more_about_the_hyperwheel/&#34;&gt;https://www.reddit.com/r/thetagang/comments/wzwoz0/lets_talk_more_about_the_hyperwheel/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/thetagang/comments/12wv6i0/my_results_for_the_2nd_week_of_trading_1_dte_spx/&#34;&gt;https://old.reddit.com/r/thetagang/comments/12wv6i0/my_results_for_the_2nd_week_of_trading_1_dte_spx/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/kolibril13/status/1862520992381210656?s=12&#34;&gt;https://x.com/kolibril13/status/1862520992381210656?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen-Agent&#34;&gt;https://github.com/QwenLM/Qwen-Agent&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://sive.rs/kimo&#34;&gt;https://sive.rs/kimo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://ollama.com/library/nemotron-mini&#34;&gt;https://ollama.com/library/nemotron-mini&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://simonwillison.net/2024/Nov/29/structured-generation-smollm2-webgpu/&#34;&gt;https://simonwillison.net/2024/Nov/29/structured-generation-smollm2-webgpu/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Link List :: 2024-11-24</title>
      <link>/posts/1732465541-linklist-2024-11-24/</link>
      <pubDate>Sun, 24 Nov 2024 16:25:42 +0000</pubDate>
      <guid>/posts/1732465541-linklist-2024-11-24/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/coleam00/bolt.new-any-llm&#34;&gt;https://github.com/coleam00/bolt.new-any-llm&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://phet.colorado.edu/&#34;&gt;https://phet.colorado.edu/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/zeitlings/alfred-unified-search&#34;&gt;https://github.com/zeitlings/alfred-unified-search&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/Python/comments/1gthdpy/deply_keep_your_python_architecture_clean/&#34;&gt;https://old.reddit.com/r/Python/comments/1gthdpy/deply_keep_your_python_architecture_clean/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=zLEt5oz5Mr8&#34;&gt;https://m.youtube.com/watch?v=zLEt5oz5Mr8&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/ChatGPTPro/comments/1gu2xpq/essential_microservices_10_core_utility_prompts/&#34;&gt;https://old.reddit.com/r/ChatGPTPro/comments/1gu2xpq/essential_microservices_10_core_utility_prompts/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://museumofbadart.org/&#34;&gt;https://museumofbadart.org/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/poe_platform/status/1858605611208110126?s=12&#34;&gt;https://x.com/poe_platform/status/1858605611208110126?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.thepythoncodingstack.com/p/python-turtle-lunar-lander-game-1969-land-on-the-moon&#34;&gt;https://www.thepythoncodingstack.com/p/python-turtle-lunar-lander-game-1969-land-on-the-moon&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/msoedov/Alfred-collection/blob/master/Readme.md&#34;&gt;https://github.com/msoedov/Alfred-collection/blob/master/Readme.md&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://blog.harbourfronts.com/2024/11/17/making-use-of-information-embedded-in-vix-futures-term-structures/&#34;&gt;http://blog.harbourfronts.com/2024/11/17/making-use-of-information-embedded-in-vix-futures-term-structures/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://labs.leaningtech.com/blog/webvm-20&#34;&gt;https://labs.leaningtech.com/blog/webvm-20&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://llmstxt.org&#34;&gt;https://llmstxt.org&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/granthawkridge/status/1859170487320080522?s=12&#34;&gt;https://x.com/granthawkridge/status/1859170487320080522?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/betterhn50/status/1859075443489456597?s=12&#34;&gt;https://x.com/betterhn50/status/1859075443489456597?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/Python/comments/1gvnfvi/migrating_from_black_and_flake8_to_ruff/&#34;&gt;https://old.reddit.com/r/Python/comments/1gvnfvi/migrating_from_black_and_flake8_to_ruff/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/LocalLLaMA/comments/1gvlzug/i_created_an_ai_research_assistant_that_actually/&#34;&gt;https://old.reddit.com/r/LocalLLaMA/comments/1gvlzug/i_created_an_ai_research_assistant_that_actually/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=lbUhVLi9X7M&#34;&gt;https://m.youtube.com/watch?v=lbUhVLi9X7M&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.astralcodexten.com/p/how-did-you-do-on-the-ai-art-turing&#34;&gt;https://www.astralcodexten.com/p/how-did-you-do-on-the-ai-art-turing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://motion.dev/docs/quick-start&#34;&gt;https://motion.dev/docs/quick-start&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2024/11/alternatives-typical-technical-illustrations-data-visualisations/&#34;&gt;https://www.smashingmagazine.com/2024/11/alternatives-typical-technical-illustrations-data-visualisations/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sliday/AI-Auto-Completion-Editor&#34;&gt;https://github.com/sliday/AI-Auto-Completion-Editor&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/langrocks/langrocks&#34;&gt;https://github.com/langrocks/langrocks&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/timhwang/status/1859347800129143162?s=12&#34;&gt;https://x.com/timhwang/status/1859347800129143162?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/LocalLLaMA/comments/1gwe7gt/samsung_tinyclick_singleturn_agent_for_empowering/&#34;&gt;https://old.reddit.com/r/LocalLLaMA/comments/1gwe7gt/samsung_tinyclick_singleturn_agent_for_empowering/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://quant.stackexchange.com/questions/75164/questions-on-options-cost-of-carry-and-relationship-to-futures-cost-of-carry&#34;&gt;https://quant.stackexchange.com/questions/75164/questions-on-options-cost-of-carry-and-relationship-to-futures-cost-of-carry&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://money.stackexchange.com/questions/120487/how-to-compute-ivx-implied-volatility-for-a-specific-expiration-and-the-expect&#34;&gt;https://money.stackexchange.com/questions/120487/how-to-compute-ivx-implied-volatility-for-a-specific-expiration-and-the-expect&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Link List :: 2024-11-18</title>
      <link>/posts/1731923597-linklist-2024-11-18/</link>
      <pubDate>Mon, 18 Nov 2024 09:53:17 +0000</pubDate>
      <guid>/posts/1731923597-linklist-2024-11-18/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/cline/cline&#34;&gt;https://github.com/cline/cline&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/volatilityvix/status/1854543629219438702?s=12&#34;&gt;https://x.com/volatilityvix/status/1854543629219438702?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://onlinelibrary.wiley.com/doi/full/10.1002/fut.22502&#34;&gt;https://onlinelibrary.wiley.com/doi/full/10.1002/fut.22502&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://openrouter.ai/&#34;&gt;https://openrouter.ai/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.answer.ai/posts/2024-11-07-solveit.html&#34;&gt;https://www.answer.ai/posts/2024-11-07-solveit.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/denser-org/denser-chat&#34;&gt;https://github.com/denser-org/denser-chat&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.ideogram.ai/using-ideogram/prompting-tips/text-and-typography&#34;&gt;https://docs.ideogram.ai/using-ideogram/prompting-tips/text-and-typography&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.pybroker.com/en/latest/notebooks/9.%20Rebalancing%20Positions.html&#34;&gt;https://www.pybroker.com/en/latest/notebooks/9.%20Rebalancing%20Positions.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://simonwillison.net/2024/Nov/8/chainforge/&#34;&gt;https://simonwillison.net/2024/Nov/8/chainforge/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/thewh1teagle/vibe&#34;&gt;https://github.com/thewh1teagle/vibe&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://londonist.com/2015/10/how-deep-does-london-go&#34;&gt;https://londonist.com/2015/10/how-deep-does-london-go&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://objective-see.org/tools.html&#34;&gt;https://objective-see.org/tools.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/alienator88/Pearcleaner&#34;&gt;https://github.com/alienator88/Pearcleaner&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://vitalik.eth.limo/general/2024/11/09/infofinance.html&#34;&gt;https://vitalik.eth.limo/general/2024/11/09/infofinance.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/moviepy/comments/1c90613/how_can_i_draw_a_line_on_center_of_video_clip/&#34;&gt;https://www.reddit.com/r/moviepy/comments/1c90613/how_can_i_draw_a_line_on_center_of_video_clip/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://zulko.github.io/moviepy/_modules/moviepy/video/tools/drawing.html&#34;&gt;https://zulko.github.io/moviepy/_modules/moviepy/video/tools/drawing.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/tobim/status/1855655639508287627?s=12&#34;&gt;https://x.com/tobim/status/1855655639508287627?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/spaces/Qwen/Qwen2.5-Coder-Artifacts&#34;&gt;https://huggingface.co/spaces/Qwen/Qwen2.5-Coder-Artifacts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://blog.quantinsti.com/calendar-spread-options-trading-strategy/&#34;&gt;https://blog.quantinsti.com/calendar-spread-options-trading-strategy/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/QuantConnect/Lean/tree/master&#34;&gt;https://github.com/QuantConnect/Lean/tree/master&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/lukeed/awesome-cloudflare-workers&#34;&gt;https://github.com/lukeed/awesome-cloudflare-workers&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/adamschwartz/generate.invoice.workers.dev&#34;&gt;https://github.com/adamschwartz/generate.invoice.workers.dev&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://grantslatton.com/software-pathfinding#algorithms-we-develop-software-by&#34;&gt;https://grantslatton.com/software-pathfinding#algorithms-we-develop-software-by&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/TinyTroupe&#34;&gt;https://github.com/microsoft/TinyTroupe&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/volatilityvix/status/1856716643583599010?s=12&#34;&gt;https://x.com/volatilityvix/status/1856716643583599010?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://appahead.studio/apps/polycapture/&#34;&gt;https://appahead.studio/apps/polycapture/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/hkproj/status/1856660077492474211?s=12&#34;&gt;https://x.com/hkproj/status/1856660077492474211?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://jan.miksovsky.com/posts/2024/11-12-momboard&#34;&gt;https://jan.miksovsky.com/posts/2024/11-12-momboard&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=42135520&#34;&gt;https://news.ycombinator.com/item?id=42135520&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://news.virginmediao2.co.uk/o2-unveils-daisy-the-ai-granny-wasting-scammers-time/&#34;&gt;https://news.virginmediao2.co.uk/o2-unveils-daisy-the-ai-granny-wasting-scammers-time/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=NJ1jAfWR84k&#34;&gt;https://m.youtube.com/watch?v=NJ1jAfWR84k&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/meysamhadeli/codai&#34;&gt;https://github.com/meysamhadeli/codai&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/zeitlings/alfred-workflows/tree/main?tab=readme-ov-file#16-alfredocr&#34;&gt;https://github.com/zeitlings/alfred-workflows/tree/main?tab=readme-ov-file#16-alfredocr&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gist.github.com/jonashaag/95e8b75ed44cc5b93cbc5d4599e3803a&#34;&gt;https://gist.github.com/jonashaag/95e8b75ed44cc5b93cbc5d4599e3803a&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/eduardohleite/applepy&#34;&gt;https://github.com/eduardohleite/applepy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.alfredapp.com/help/workflows/utilities/transform/&#34;&gt;https://www.alfredapp.com/help/workflows/utilities/transform/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Link List :: 2024-11-08</title>
      <link>/posts/1731923520-linklist-2024-11-08/</link>
      <pubDate>Mon, 18 Nov 2024 09:52:01 +0000</pubDate>
      <guid>/posts/1731923520-linklist-2024-11-08/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://simonwillison.net/2024/Oct/16/sqlite-rails/&#34;&gt;https://simonwillison.net/2024/Oct/16/sqlite-rails/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://time.com/7093536/surgeons-apple-vision-pro/&#34;&gt;https://time.com/7093536/surgeons-apple-vision-pro/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://jonathan-adly.github.io/AgentRun/examples/ollama_llama3/&#34;&gt;https://jonathan-adly.github.io/AgentRun/examples/ollama_llama3/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/alexalbert__/status/1848743018075189719?s=12&#34;&gt;https://x.com/alexalbert__/status/1848743018075189719?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/pengfeng/ask.py&#34;&gt;https://github.com/pengfeng/ask.py&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gemoo.com/compare/screen-studio-alternative.htm&#34;&gt;https://gemoo.com/compare/screen-studio-alternative.htm&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/fraser_drops/status/1846294412701454674?s=12&#34;&gt;https://x.com/fraser_drops/status/1846294412701454674?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://dottxt-ai.github.io/outlines/latest/cookbook/chain_of_thought/&#34;&gt;https://dottxt-ai.github.io/outlines/latest/cookbook/chain_of_thought/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/LocalLLaMA/comments/1ga25gj/introducing_fast_apply_replicate_cursors_instant/&#34;&gt;https://old.reddit.com/r/LocalLLaMA/comments/1ga25gj/introducing_fast_apply_replicate_cursors_instant/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://xbarapp.com/&#34;&gt;https://xbarapp.com/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/jxnlco/status/1848804495993561349?s=12&#34;&gt;https://x.com/jxnlco/status/1848804495993561349?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=l8pRSuU81PU&amp;amp;t=9963s&amp;amp;pp=2AHrTZACAQ%3D%3D&#34;&gt;https://m.youtube.com/watch?v=l8pRSuU81PU&amp;amp;t=9963s&amp;amp;pp=2AHrTZACAQ%3D%3D&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/simonw/status/1849333512991900125?s=12&#34;&gt;https://x.com/simonw/status/1849333512991900125?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gist.github.com/wong2/47bb82e9cd6d1e5d81de1ca6e8618880&#34;&gt;https://gist.github.com/wong2/47bb82e9cd6d1e5d81de1ca6e8618880&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/volatilityvix/status/1849455268645449741?s=12&#34;&gt;https://x.com/volatilityvix/status/1849455268645449741?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/vanstriendaniel/status/1849533601895022926?s=12&#34;&gt;https://x.com/vanstriendaniel/status/1849533601895022926?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.davidreis.me/2024/what-happens-when-you-make-a-move-in-lichess&#34;&gt;https://www.davidreis.me/2024/what-happens-when-you-make-a-move-in-lichess&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://old.reddit.com/r/options/comments/1gazw9g/seeking_ideas_for_options_trading_tools_and/&#34;&gt;https://old.reddit.com/r/options/comments/1gazw9g/seeking_ideas_for_options_trading_tools_and/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/gradio/status/1849828584720040424?s=12&#34;&gt;https://x.com/gradio/status/1849828584720040424?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/meta-llama/llama-recipes/tree/main/recipes/quickstart/NotebookLlama&#34;&gt;https://github.com/meta-llama/llama-recipes/tree/main/recipes/quickstart/NotebookLlama&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/meta-llama/llama-recipes/tree/main/recipes/quickstart/NotebookLlama&#34;&gt;https://github.com/meta-llama/llama-recipes/tree/main/recipes/quickstart/NotebookLlama&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://londonsono.com/full-body-ultrasound-scan/&#34;&gt;https://londonsono.com/full-body-ultrasound-scan/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://simonwillison.net/2024/Oct/27/llm-jq/&#34;&gt;https://simonwillison.net/2024/Oct/27/llm-jq/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/mikelikesdesign/SwiftUI-experiments/tree/main/dots%20interaction&#34;&gt;https://github.com/mikelikesdesign/SwiftUI-experiments/tree/main/dots%20interaction&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://labs.google/&#34;&gt;https://labs.google/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/options/comments/1fsbsq5/needed_a_better_options_trading_tool_made_a/&#34;&gt;https://www.reddit.com/r/options/comments/1fsbsq5/needed_a_better_options_trading_tool_made_a/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/options/comments/sd6hih/i_made_a_tool_to_learn_and_visualize_option/&#34;&gt;https://www.reddit.com/r/options/comments/sd6hih/i_made_a_tool_to_learn_and_visualize_option/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://optionstradingiq.com/theta-delta-ratio/&#34;&gt;https://optionstradingiq.com/theta-delta-ratio/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/cocktailpeanut/status/1844408840059506863?s=12&#34;&gt;https://x.com/cocktailpeanut/status/1844408840059506863?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=h9Z4oGN89MU&#34;&gt;https://m.youtube.com/watch?v=h9Z4oGN89MU&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Acreom/app&#34;&gt;https://github.com/Acreom/app&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sgoedecke/fish-tank&#34;&gt;https://github.com/sgoedecke/fish-tank&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/johnmai_it/status/1851341001442673025?s=12&#34;&gt;https://x.com/johnmai_it/status/1851341001442673025?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/elder_plinius/status/1851415257517826147?s=12&#34;&gt;https://x.com/elder_plinius/status/1851415257517826147?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://simonwillison.net/2024/Oct/30/copilot-models/&#34;&gt;https://simonwillison.net/2024/Oct/30/copilot-models/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://githubnext.com/projects/github-spark/&#34;&gt;https://githubnext.com/projects/github-spark/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://deepmind.google/discover/blog/pushing-the-frontiers-of-audio-generation/?utm_source=x&amp;amp;utm_medium=social&amp;amp;utm_campaign=&amp;amp;utm_content=&#34;&gt;https://deepmind.google/discover/blog/pushing-the-frontiers-of-audio-generation/?utm_source=x&amp;amp;utm_medium=social&amp;amp;utm_campaign=&amp;amp;utm_content=&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/frnknlsn/status/1851798106834375057?s=12&#34;&gt;https://x.com/frnknlsn/status/1851798106834375057?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/okazz_/status/1851645865292878166?s=12&#34;&gt;https://x.com/okazz_/status/1851645865292878166?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/cocktailpeanut/status/1851807225888571427?s=12&#34;&gt;https://x.com/cocktailpeanut/status/1851807225888571427?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/kestra-io/kestra?tab=readme-ov-file&#34;&gt;https://github.com/kestra-io/kestra?tab=readme-ov-file&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/paulbrodersen/netgraph&#34;&gt;https://github.com/paulbrodersen/netgraph&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/gabotechs/dep-tree&#34;&gt;https://github.com/gabotechs/dep-tree&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=SqbP5IemmZ0&#34;&gt;https://m.youtube.com/watch?v=SqbP5IemmZ0&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/xenovacom/status/1852251703791288469?s=12&#34;&gt;https://x.com/xenovacom/status/1852251703791288469?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sirnfs/OptionSuite&#34;&gt;https://github.com/sirnfs/OptionSuite&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/DS4SD/docling&#34;&gt;https://github.com/DS4SD/docling&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gist.github.com/N8python/b31c84d04caca53e0de3361161646883&#34;&gt;https://gist.github.com/N8python/b31c84d04caca53e0de3361161646883&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/volfpeter/fastapi-htmx-tailwind-example&#34;&gt;https://github.com/volfpeter/fastapi-htmx-tailwind-example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://blog.entropy.observer/sorting-400-tabs-in-60-seconds/&#34;&gt;https://blog.entropy.observer/sorting-400-tabs-in-60-seconds/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://drew.silcock.dev/blog/everything-you-need-to-know-about-python-3-13/&#34;&gt;https://drew.silcock.dev/blog/everything-you-need-to-know-about-python-3-13/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://brooker.co.za/blog/2023/04/20/hobbies.html&#34;&gt;https://brooker.co.za/blog/2023/04/20/hobbies.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://newsletter.maartengrootendorst.com/p/a-visual-guide-to-quantization&#34;&gt;https://newsletter.maartengrootendorst.com/p/a-visual-guide-to-quantization&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/jaredhstocks/status/1852811651554443760?s=12&#34;&gt;https://x.com/jaredhstocks/status/1852811651554443760?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://dampedspring.com/wp-content/uploads/2024/11/Warning.pdf&#34;&gt;https://dampedspring.com/wp-content/uploads/2024/11/Warning.pdf&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/emollick/status/1853255574843982241?s=12&#34;&gt;https://x.com/emollick/status/1853255574843982241?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ahmetsait/toolgit&#34;&gt;https://github.com/ahmetsait/toolgit&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/hyperfield/yt-channel-downloader&#34;&gt;https://github.com/hyperfield/yt-channel-downloader&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://eieio.games/nonsense/game-16-paccam-pacman-with-your-face/&#34;&gt;https://eieio.games/nonsense/game-16-paccam-pacman-with-your-face/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://dampedspring.com/wp-content/uploads/2024/11/Warning.pdf&#34;&gt;https://dampedspring.com/wp-content/uploads/2024/11/Warning.pdf&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/bartowski/SuperNova-Medius-GGUF&#34;&gt;https://huggingface.co/bartowski/SuperNova-Medius-GGUF&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/dottxt-ai/demos/tree/main/its-a-smol-world&#34;&gt;https://github.com/dottxt-ai/demos/tree/main/its-a-smol-world&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.optionstocksmachines.com/post/2024-11-04-day-12-iteration/&#34;&gt;https://www.optionstocksmachines.com/post/2024-11-04-day-12-iteration/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/huggingface/smollm&#34;&gt;https://github.com/huggingface/smollm&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Link List :: 2024-10-14</title>
      <link>/posts/1728891496-linklist-2024-10-13/</link>
      <pubDate>Mon, 14 Oct 2024 08:38:16 +0100</pubDate>
      <guid>/posts/1728891496-linklist-2024-10-13/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/options/wiki/toolbox/links/&#34;&gt;https://www.reddit.com/r/options/wiki/toolbox/links/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here are some resources for option trading:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;**Backtesting Tools**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* OptionStack (backtesting tool, free trial)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* thinkorswim &amp;#34;thinkBack&amp;#34; (backtesting tool within a broker&amp;#39;s platform)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* TradeMachine Pro (paid only, but has 30-day free trial)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Tastylive backtesting webapp (free, with account registration)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;**Technical Analysis**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Daytrading Simulator article on TA for options&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Fidelity TA for options trading Webinar PDF&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Investopedia top technical indicators for options trading&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* TDA three indicators to check before the trade&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;**Research &amp;amp; Indicators**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Finlo (research and portfolio tracking, free 7-day trial)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Predicting Alpha (volatility forecasting and strategy-focused dashboard, requires registration)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Qwidgets customizable dashboard for researching options trades (free, requires registration)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Simpler Trading (research, analysis, and education, mostly paid but some free resources)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;**Screeners &amp;amp; Scanners**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Barchart options screener&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* CME Open Interest heatmap for CME options/futures products&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* FDScanner&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Golden Sweeps (freemium web site)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Market Chameleon options screener&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Option Samurai (paid subscription only)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Option Sonar unusual activity scanner (free alerts are delayed, paid subscriptions are real-time)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;**Option Trading Blogs, Video and Podcast Channels**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* InTheMoney YouTube channel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Option Alpha YouTube channel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Poor vs. Standard podcast&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* projectoption YouTube channel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Sky View Trading YouTube channel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Start Options tutorial blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Tastytrade YouTube channel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* TrackingStockPundits options analysis and blogs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;**Other Resources**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* ORATS backtesting blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Spintwig (mostly credit trading strategies)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Thinkorswim&amp;#39;s &amp;#34;How to Trade&amp;#34; section&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sliday/stupid-ai-coder&#34;&gt;https://github.com/sliday/stupid-ai-coder&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Python script for AI-powered code generation and improvement&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Supports multiple AI models (Claude, GPT-4, Llama)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Iterative code improvement with diff visualization&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Automatic error detection and correction&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Generates complete project folder structure&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Creates README and requirements.txt files&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Colorful console output with progress indicators&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Option to input task description from a file&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Requires Python 3.7+ and installation of dependencies&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Usage: `python ai-coder.py` or `python ai-coder.py -f path/to/task_description.txt`&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Prompts user for task description, number of iterations, and AI model choice&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Generates project folder with final code, README, requirements.txt, .gitignore, and versions subfolder&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Customizable for AI models, iterations, error handling, and logging verbosity&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Quality depends on chosen AI model and task description clarity&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Requires internet connection for AI model communication&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Review and test generated code before production use&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/PsyChip/machina&#34;&gt;https://github.com/PsyChip/machina&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- MACHINA: CCTV viewer with realtime object tagger [WIP]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Uses LLAVA, YOLO 11, OpenCV, and FAISS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Connects to high-resolution RTSP stream, queues frames, and resamples for processing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- YOLO detects objects, assigns IDs based on coordinates, size, and timestamp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Background thread makes LLM requests to Ollama server for object tagging&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Object matching uses center of detection boxes with 16px tolerance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Test environment: 640x480 processing, 20ms inference time on GTX 1060&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Stream delays 1-2 seconds every ~10 minutes, frame skip mechanism implemented&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Prerequisites:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Python 3.12.x&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Ollama server with LLAVA model&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Compatible PyTorch version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Dependencies from requirements.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Usage:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - S: snapshot&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - R: start/stop recording&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Q: quit app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Left mouse: select&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Middle mouse: zoom&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Right mouse: pan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Project aims to create a complete headless security system&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- TODO:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Additional UI Layer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - RTS style object selection box with detailed information&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Detection of crowds, car crashes, police, ambulance, running humans&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Webhook callbacks for new/disappeared objects and movement after long stays&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ekiefl/pooltool&#34;&gt;https://github.com/ekiefl/pooltool&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Pooltool is a general purpose billiards simulator crafted specifically for science and engineering.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Its core design principles focus on speed, flexibility, and the ease of visualization and analysis. With an interactive 3D interface, a robust API, and extensive documentation, pooltool aims to be a systemic tool in billiards-related research. Continuously evolving through active maintenance and bolstered by a growing community, this vision for pooltool emphasizes not just its current capabilities, but also its potential for growth and adaptation within billiards simulation.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Pooltool is peer-reviewed and published in the Journal of Open Source Software (JOSS) and pyOpenSci.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/souzatharsis/podcastfy-demo?tab=readme-ov-file&#34;&gt;https://github.com/souzatharsis/podcastfy-demo?tab=readme-ov-file&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Transforming Multi-Sourced Text into Captivating Multi-Lingual Audio Conversations with GenAI&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/LocalLLaMA/comments/1fzx8t5/what_is_a_good_first_project_to_learn_how_llms/&#34;&gt;https://www.reddit.com/r/LocalLLaMA/comments/1fzx8t5/what_is_a_good_first_project_to_learn_how_llms/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Watch YouTube videos on how transformers and LLMs work:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - 3Blue1Brown&amp;#39;s video on transformers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Sebastian Raschka&amp;#39;s &amp;#34;Build a Large Language Model From Scratch&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Andrej Karpathy&amp;#39;s &amp;#34;Neural Networks: Zero to Hero&amp;#34; playlist&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Start with understanding embeddings:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Use SentenceTransformer to embed texts and visualize vectors&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Learn fundamentals of neural networks:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Implement a basic feed-forward network (e.g. for MNIST)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Understand backpropagation algorithm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Study simpler language models:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Character-level prediction with RNNs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Word embeddings like word2vec&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Implement a small transformer from scratch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Read architecture papers on models like T5, BERT, GPT-2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Try recreating a minimal LLM implementation:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Karpathy&amp;#39;s llama2.c as a starting point&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Explore &amp;#34;Spreadsheets are all you need&amp;#34; Excel implementation&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Review detailed LLM architecture diagrams&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Link List :: 2024-10-08</title>
      <link>/posts/1728891487-linklist-2024-10-06/</link>
      <pubDate>Tue, 08 Oct 2024 08:38:07 +0100</pubDate>
      <guid>/posts/1728891487-linklist-2024-10-06/</guid>
      <description>&lt;p&gt;&lt;em&gt;Last 7 days (as of 2024-10-08 10:10)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://markrbest.github.io/reading-list/&#34;&gt;https://markrbest.github.io/reading-list/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Book list covers various topics in trading, finance, and programming&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- General trading books:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Advances in Financial Machine Learning&amp;#34; by Marcos Lopez de Prado&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Trading Systems and Methods&amp;#34; by Perry J. Kaufman&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Ernie Chan&amp;#39;s books on algorithmic trading&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Portfolio management:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Quantitative Portfolio Management&amp;#34; by Michael Isichenko&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Advanced Portfolio Management&amp;#34; by Giuseppe A. Paleologo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Market making and trade cost analysis:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Algorithmic Trading: A Practitioner&amp;#39;s Guide&amp;#34; by Rishi K. Narang&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Strategy optimization:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Experimentation for Engineers&amp;#34; by Aparna Oruganti&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Timothy Master&amp;#39;s books on statistically sound trading strategies&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Statistical arbitrage:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Statistical Arbitrage&amp;#34; by Andrew Pole&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;The Modern Spirit of Statistical Arbitrage&amp;#34; (article)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Volume price analysis:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;A Complete Guide To Volume Price Analysis&amp;#34; by Anna Coulling&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Books on order flow and volume profile trading&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Macro/cycle analysis:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Mastering The Market Cycle&amp;#34; by Howard Marks&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Risk management:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Value at Risk&amp;#34; by Philippe Jorion&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Regime change:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Detecting Regime Change in Computational Finance&amp;#34; by Carl Chiarella et al.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Books about traders:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;The New Market Wizards&amp;#34; by Jack D. Schwager&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Pit Bull&amp;#34; by Martin Schwartz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Reminiscences of a Stock Operator&amp;#34; by Edwin Lef√®vre&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Peter L. Bernstein&amp;#39;s books on economic history and risk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Tail risk management books by Vineer Bhansali&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Trading platform and HPC:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Developing High-Frequency Trading Systems&amp;#34; by Juanjo Ruiz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;The Art of Writing Efficient Programs&amp;#34; by Fedor G. Pikus&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- General programming:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Joel on Software&amp;#34; by Joel Spolsky&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Refactoring:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Tidy First&amp;#34; by Kent Beck&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Five Lines of Code&amp;#34; by Christian Clausen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Naming Things&amp;#34; by Sergey Golitsynskiy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Rust programming:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Rust Brain Teasers&amp;#34; by Ferris the Crab&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;Rust Atomics and Locks&amp;#34; by Mara Bos&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &amp;#34;The Rust Programming Language&amp;#34; by Steve Klabnik and Carol Nichols&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/mickcolburn_/status/1840421695099691409?s=12&#34;&gt;https://x.com/mickcolburn_/status/1840421695099691409?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Mick Colburn, a trader on X, shared an interview he liked with @TradesTurbo and @RealSimpleAriel. The interview discussed a trading strategy that uses a 50-day Moving Average (MA) / ATR multiple rule, which reminds him of what @jfsrevg speaks about. Colburn believes it&amp;#39;s worth looking into as multiple successful traders have endorsed the strategy. He shared the tweet with his followers and encouraged them to check out the interview on youtube.com.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://mathspp.com/blog/how-i-prepare-a-technical-talk&#34;&gt;https://mathspp.com/blog/how-i-prepare-a-technical-talk&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Slide design:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Minimize text, use bullet points&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Large font size&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Avoid distractions and animations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Simplify and enlarge code samples&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Use high-contrast, light theme for code&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Audience engagement:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Interact with audience&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Use shows of hands&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Ask simple questions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Ask questions you know the answer to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Talk delivery:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Use humor&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Be cautious with live coding&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Manage voice rhythm and tone&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Have fun while presenting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Practice:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Practice repeatedly&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Record and critique yourself&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Practice standing up&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Learn key points instead of scripting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Use speaker notes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Practice timing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Managing Q&amp;amp;A:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Be comfortable saying &amp;#34;I don&amp;#39;t know&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Suggest private conversations for complex questions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Politely dismiss inappropriate questions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Content preparation:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Brainstorm ideas&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Organize thoughts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Write a blog article as reference&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Create slides last&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Remember:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Guidelines are subjective&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Experiment to find what works for you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=8UuW8o4bHbw&#34;&gt;https://m.youtube.com/watch?v=8UuW8o4bHbw&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- UV is a Python packaging tool written in Rust&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Aims to be blazingly fast and a single binary blob&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Goal: become the only tool needed for Python projects&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Initially reimplemented virtualenv, pip, and pip-tools functionality&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Kept core features in UV pip and UV VF namespaces&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Version 0.3.0 aims to replace workflow tools like PDM, Poetry, or Rye&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Now a complete workflow tool, addressing Python&amp;#39;s biggest criticism&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Can potentially be the only tool needed to work with Python projects&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Downloads Python interpreters from Gregory Szorc&amp;#39;s standalone builds&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Standalone builds are single directories with complete Python installations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- UV uses Python installations transparently for virtual environments and commands&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Aims to simplify Python environment management for new programmers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Standalone builds may have quirks due to Python&amp;#39;s resistance to such builds&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- UV allows running a local mirror of Python versions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Some users may prefer official Python builds for production environments&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/TeamCinco/Quant-Tools&#34;&gt;https://github.com/TeamCinco/Quant-Tools&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Repository of quantitative analysis tools for financial markets&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Covers backtesting, options analysis, correlation studies, and Monte Carlo simulations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Includes tools for:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Backtesting trading strategies&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Correlation analysis between financial instruments&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Financial analysis and visualizations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Macroeconomic analysis&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Options analysis and Greeks calculations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Monte Carlo simulations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Stock performance analysis&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Each script can be run independently&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Most scripts prompt for user input (e.g., ticker symbols, date ranges, parameters)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Requires Python 3.x and libraries:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - yfinance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - pandas&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - numpy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - matplotlib&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - scipy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - scikit-learn&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - pandas_datareader&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - backtesting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Dependencies can be installed using pip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Open for contributions and improvements&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/awnihannun/status/1841109315383648325?s=12&#34;&gt;https://x.com/awnihannun/status/1841109315383648325?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/images/2024/10/14/1728894852.png&#34; alt=&#34;images/2024/10/14/1728894852.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Link List :: 2024-09-30</title>
      <link>/posts/1727687969-linklist-2024-09-30/</link>
      <pubDate>Mon, 30 Sep 2024 10:19:29 +0100</pubDate>
      <guid>/posts/1727687969-linklist-2024-09-30/</guid>
      <description>&lt;p&gt;&lt;em&gt;Last 7 days (as of 2024-09-28 18:57)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/michaelchu/optopsy/wiki&#34;&gt;https://github.com/michaelchu/optopsy/wiki&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Optopsy is an open-source backtesting library for option strategies.&#xA;* The library focuses on answering core questions about option strategies, rather than simulating every possible scenario.&#xA;* The backtesting algorithm involves:&#xA;    * Evaluating option chains within specified entry and exit dates.&#xA;    * Grouping evaluated chains into buckets based on Days to Expiration (DTE) and delta or strike distance percent.&#xA;    * Constructing option strategy legs and calculating profit/loss.&#xA;    * Aggregating results to show average profit/loss for each bucket combination.&#xA;* The algorithm uses bucketing and approximations for performance, so results shouldn&amp;#39;t be the sole basis for trade decisions.&#xA;* The library&amp;#39;s methodology is transparently explained.&#xA;* Contributions (pull requests, comments, suggestions) are welcome.&#xA;* Copyright ¬© 2020 Michael Chu.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/MightyMoud/sidekick&#34;&gt;https://github.com/MightyMoud/sidekick&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* Sidekick is a CLI tool for deploying applications to a VPS, aiming for Fly.io-like simplicity.&#xA;* **Features:**&#xA;    * One-command VPS setup (Docker, Traefik, sOPS, age).&#xA;    * Deploys applications from a Dockerfile.&#xA;    * Zero-downtime deployments.&#xA;    * High availability and load balancing.&#xA;    * Zero-config SSL certificates.&#xA;    * sslip.io integration.&#xA;    * Built-in SOPS integration for secure secret management.&#xA;* **Installation:** `brew install sidekick` (macOS) or `go install github.com/mightymoud/sidekick@latest` (Linux/Windows).&#xA;* **Requires:** Ubuntu LTS VPS (DigitalOcean or Hetzner recommended), SSH key access.&#xA;* **`sidekick init`:** Sets up the VPS: creates a user, disables root login, updates the system, installs Docker, Traefik, sOPS, age, and configures SSL certificates.&#xA;* **`sidekick launch`:** Deploys an application: requires a Dockerfile and specifies the app name, exposed port, and domain (can use sslip.io).  Handles encryption of `.env` files using sOPS.&#xA;* **`sidekick deploy`:** Deploys a new version of an application with zero downtime.  Checks for `.env` file changes and re-encrypts if necessary.&#xA;* **`sidekick deploy preview`:** Deploys a preview environment tied to the current git commit.&#xA;* **Roadmap:**  Includes features like docker-compose support, improved zero-downtime deploys, firewall setup, multi-VPS management, database deployment, a TUI, and CI/CD integration.&#xA;* **License:** GPL-3.0&#xA;* **Website:** www.sidekickdeploy.com&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://studio.langchain.com/&#34;&gt;https://studio.langchain.com/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* LangGraph Studio is a desktop application for prototyping and debugging LangGraph applications locally.  Available for MacOS.&#xA;* Offers various templates to jumpstart development:&#xA;    * LangGraph ReAct Agent Template: A simple ReAct agent chatbot with persistent chat memory. ([langchain-ai/react-agent](https://github.com/langchain-ai/react-agent))&#xA;    * LangGraph Data Enrichment Template:  For building data enrichment agents. ([langchain-ai/data-enrichment](https://github.com/langchain-ai/data-enrichment))&#xA;    * LangGraph Retrieval Agent Template: A basic question-answering agent using a retriever. ([langchain-ai/retrieval-agent-template](https://github.com/langchain-ai/retrieval-agent-template))&#xA;    * LangGraph.js Data Enrichment Template:  Similar to the above, but using LangGraph.js. ([langchain-ai/data-enrichment-js](https://github.com/langchain-ai/data-enrichment-js))&#xA;    * LangGraph.js Retrieval Agent Template:  A basic question-answering agent using LangGraph.js and a retriever. ([langchain-ai/retrieval-agent-template-js](https://github.com/langchain-ai/retrieval-agent-template-js))&#xA;    * LangGraph.js ReAct Agent Template: A ReAct agent using LangGraph.js. ([langchain-ai/react-agent-js](https://github.com/langchain-ai/react-agent-js))&#xA;    * New LangGraph Project: A blank template to start a new project. ([langchain-ai/new-langgraph-project](https://github.com/langchain-ai/new-langgraph-project))&#xA;    * New LangGraph.js Project: A blank template to start a new LangGraph.js project. ([langchain-ai/new-langgraphjs-project](https://github.com/langchain-ai/new-langgraphjs-project))&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/tcsenpai/multi1&#34;&gt;https://github.com/tcsenpai/multi1&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* **multi1:** Creates o1-like reasoning chains using multiple AI providers (locally and remotely).&#xA;* **Supports LiteLLM:**  Enables access to 100+ providers.&#xA;* **Key Features:** Unified interface, LiteLLM default provider (local &amp;amp; remote), configurable sidebar, modular design for easy provider addition.&#xA;* **Supported Providers:** LiteLLM (local &amp;amp; remote), Ollama (local), Perplexity (remote, API key required), Groq (remote, API key required).&#xA;* **Reasoning Chains:** Improves LLM reasoning by creating dynamic Chain of Thought, prompting the model to explore multiple methods and alternative answers.&#xA;* **Improved Accuracy:** Achieves ~70% accuracy on the Strawberry problem (compared to 0% for Llama-3.1-70b and 30% for ChatGPT-4o without prompting).&#xA;* **Open Source and Experimental:** Aims to inspire development of new reasoning strategies.  Not a replication of OpenAI&amp;#39;s o1, which uses different training techniques.&#xA;* **Quickstart:** Requires Python 3, `venv` (optional), and `pip`.  Installation via `pip install -r requirements.txt`. API keys needed for some providers.  Runs using `streamlit run app/main.py`.&#xA;* **Contributing:**  Contributions welcome!  Fork the repo, create a branch, make changes, and submit a pull request.&#xA;* **Derived from g1:**  Originally developed by Benjamin Klieger.&#xA;* **License:** MIT license.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/dena-sohrabi/There?tab=readme-ov-file&#34;&gt;https://github.com/dena-sohrabi/There?tab=readme-ov-file&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* A native macOS menubar app to track time zones for friends, teammates, or cities.&#xA;* Installation via Homebrew: `brew install --cask there`&#xA;* Add people from X (Twitter), Telegram, or local photos.&#xA;* Add cities without needing to know the time zone.&#xA;* Supports raw UTC offsets.&#xA;* Ultra-low resource usage (CPU and memory).&#xA;* Built with SwiftUI.&#xA;* Requires macOS 13+.&#xA;* Roadmap: Widgets, time slider, auto-update, AppleScript API.&#xA;* Contributions welcome (PRs for small fixes, issues for larger features).&#xA;* Licensed under the MIT License.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=5V6Lam8GZo4&amp;amp;list=PLjTveVh7FakJOoY6GPZGWHHl4shhDT8iV&amp;amp;index=1&#34;&gt;https://m.youtube.com/watch?v=5V6Lam8GZo4&amp;amp;list=PLjTveVh7FakJOoY6GPZGWHHl4shhDT8iV&amp;amp;index=1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Link List :: 2024-09-23</title>
      <link>/posts/1727117710-linklist-2024-09-23/</link>
      <pubDate>Mon, 23 Sep 2024 19:55:10 +0100</pubDate>
      <guid>/posts/1727117710-linklist-2024-09-23/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Prompt used for generating summary of each page in Poe&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;As instructed before, Summarise it using only bullet points in markdown syntax.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;No headings, just bullet points.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I want it as raw markdown so that I can use it in README.md file&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{clipboard}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/michaelchu/optopsy/wiki&#34;&gt;https://github.com/michaelchu/optopsy/wiki&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Optopsy is an open source Python library for backtesting options trading strategies&#xA;- Created by Michael Chu and hosted on GitHub&#xA;- Uses a bucketing methodology to group option chains&#xA;- Groups option chains by days to expiration and delta/strike distance from current price&#xA;- Evaluates profit/loss of each option chain and aggregates results into buckets&#xA;- Generates statistics including average profit/loss, minimum, maximum, and distributions&#xA;- Focuses on answering core questions rather than fully replicating real-world events&#xA;- Results are meant for theoretical understanding, not actual trade recommendations&#xA;- Does not factor in external events or sequence of events over time&#xA;- Accuracy can be improved by refining bucket intervals&#xA;- Wiki covers methodology, API reference, data feeds, usage, and contributing&#xA;- Feedback and contributions are welcomed by the developer&#xA;- Allows programmatic backtesting of options strategies in Python&#xA;- Analyzes statistical outcomes across different implied market states&#xA;- Goal is insight into potential performance rather than replicating real events&#xA;- Available open source on GitHub for use, learning, and contribution&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://compute.hyper.space/&#34;&gt;https://compute.hyper.space/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Compute by hyperspace is an agent-driven research engine for power AI users&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/phiresky/thought-forge-ai&#34;&gt;https://github.com/phiresky/thought-forge-ai&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Project: thought-forge-ai&#xA;- Created by: phiresky&#xA;- Purpose: Generate 30-60 second &amp;#34;deep thought&amp;#34; TikTok-style videos&#xA;- Video components:&#xA;    - Spoken monologue&#xA;    - Moving video scenes&#xA;    - Background music&#xA;    - Subtitles&#xA;&#xA;- Key features:&#xA;    - Fully automated content creation&#xA;    - Uses various AI tools and custom code&#xA;    - Generates philosophical and self-improvement content&#xA;&#xA;- Process steps:&#xA;    1. Choose topics, voice, and clickbait title&#xA;    2. Write monologue script&#xA;    3. Convert text to speech&#xA;    4. Split monologue into scenes and create image prompts&#xA;    5. Generate starting images for each scene&#xA;    6. Create scene videos&#xA;    7. Generate music prompt and create music&#xA;    8. Create subtitles&#xA;    9. Merge and finalize video&#xA;&#xA;- Tools used:&#xA;    - LLM (Claude 3.5 or Llama 3.1)&#xA;    - Text-to-Speech (Elevenlabs or coqui-ai)&#xA;    - Text-to-Image (Flux.1 Pro)&#xA;    - Image-to-Video (RunwayML Gen-3 Alpha)&#xA;    - Text-to-Audio for music (MusicGen)&#xA;    - FFmpeg for video processing&#xA;&#xA;- Setup:&#xA;    - Uses pnpm for dependency management&#xA;    - Requires multiple API keys for various services&#xA;    - Provides commands for generating topics and videos&#xA;&#xA;- Current state:&#xA;    - Quality varies from mediocre to surprisingly good&#xA;    - Potential for improvement with better prompts or human input&#xA;    - Video generation is the most expensive and challenging part&#xA;&#xA;- License: Included but not specified in the summary&#xA;- Language: 100% TypeScript&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Doriandarko/maestro&#34;&gt;https://github.com/Doriandarko/maestro&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Maestro is a framework for AI models to orchestrate subagents for task breakdown and execution&#xA;- Breaks down objectives into sub-tasks, executes them, and refines results into a final output&#xA;- Supports multiple AI providers (Anthropic, OpenAI, Google, etc.)&#xA;- Can run locally with LMStudio or Ollama&#xA;- Generates detailed exchange logs&#xA;- Recently added support for Claude 3.5 Sonnet&#xA;- Integrates with LiteLLM for easier model selection&#xA;- Supports GPT-4 and GPT-4o&#xA;- Includes Groq API integration for faster responses&#xA;- Features search capability using Tavily API&#xA;- Requires Python and relevant API keys to run&#xA;- Main script is `python maestro.py`, with variants for different providers&#xA;- Uses orchestrator, sub-agent, and refiner models&#xA;- Allows customization of token limits, model selection, and console output formatting&#xA;- Creates code files and folders for coding projects&#xA;- Generates Markdown log files&#xA;- Released under the MIT License&#xA;- Has 4.1k stars and 640 forks on GitHub&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Blaizzy/fastmlx&#34;&gt;https://github.com/Blaizzy/fastmlx&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- FastMLX is a high-performance, production-ready API for hosting MLX models&#xA;- Supports Vision Language Models (VLMs) and Language Models (LMs)&#xA;- Licensed under Apache Software License 2.0&#xA;- Features include:&#xA;    - OpenAI-compatible API&#xA;    - Dynamic model loading&#xA;    - Support for multiple model types&#xA;    - Image processing capabilities&#xA;    - Efficient resource management&#xA;    - Robust error handling&#xA;    - Customizable and extendable&#xA;- Installation via pip: `pip install fastmlx`&#xA;- Can be run with `fastmlx` command or using uvicorn&#xA;- Supports multiple workers for parallel processing&#xA;- Allows setting number of workers via command line or environment variable&#xA;- API calls similar to OpenAI&amp;#39;s chat completions&#xA;- Supports both Vision Language Models and Language Models&#xA;- Enables streaming responses&#xA;- Implements function calling for specific models (e.g., Llama 3.1, Arcee Agent)&#xA;- Provides endpoints for listing available models&#xA;- Allows adding new models to the API&#xA;- Offers functionality to delete models from memory&#xA;- Has 170 stars and 14 forks on GitHub&#xA;- Latest release is v0.2.1 (as of August 10, 2024)&#xA;- Written primarily in Python (89.1%) and Jinja (10.9%)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/kturung/langgraph_streamlit_codeassistant&#34;&gt;https://github.com/kturung/langgraph_streamlit_codeassistant&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- AI-powered assistant integrating Python execution and React component rendering&#xA;- Utilizes Claude 3.5 Sonnet AI model from Anthropic&#xA;- Key features:&#xA;    - Intelligent chat interface&#xA;    - Python code execution in a secure Jupyter notebook environment&#xA;    - Dynamic React component creation and rendering&#xA;    - Integrated file operations (upload, download, management)&#xA;    - Advanced data visualization using matplotlib and other libraries&#xA;    - LangGraph-based workflow with real-time Mermaid diagram&#xA;    - Streamlit interface for user-friendly interaction&#xA;    - Adaptive tool utilization (Python, React, file operations)&#xA;    - Flexible package management&#xA;    - Web resource access capabilities&#xA;    - Robust error handling&#xA;- New feature (03.07.2024): Multimodal support with vision capability&#xA;    - Processes and analyzes images alongside text and code&#xA;    - AI generates content from referenced images&#xA;- Setup instructions provided for Python and Node.js environments&#xA;- Application started using `streamlit run main.py`&#xA;- Automatically initiates React development server in a subprocess&#xA;- Licensed under MIT license&#xA;- Has 451 stars and 92 forks on GitHub&#xA;- Latest release is v0.1.0 (as of July 7, 2024)&#xA;- Written primarily in Python (78.0%), JavaScript (11.1%), HTML (8.0%), and CSS (2.9%)&#xA;- 2 contributors to the project&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/PatrickJS/awesome-cursorrules&#34;&gt;https://github.com/PatrickJS/awesome-cursorrules&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Curated list of awesome .cursorrules files for enhancing Cursor AI experience&#xA;- Cursor AI is an AI-powered code editor&#xA;- .cursorrules files define custom rules for Cursor AI to follow when generating code&#xA;- Benefits of using .cursorrules:&#xA;    - Customized AI behavior&#xA;    - Consistency in coding standards&#xA;    - Context awareness for projects&#xA;    - Improved productivity&#xA;    - Team alignment&#xA;    - Project-specific knowledge integration&#xA;- Contains rules for various categories:&#xA;    - Frontend Frameworks and Libraries&#xA;    - Backend and Full-Stack&#xA;    - Mobile Development&#xA;    - CSS and Styling&#xA;    - State Management&#xA;    - Database and API&#xA;    - Testing&#xA;    - Build Tools and Development&#xA;    - Language-Specific&#xA;    - Other&#xA;- How to use:&#xA;    - Install Cursor AI&#xA;    - Browse and choose a .cursorrules file&#xA;    - Copy it to your project&amp;#39;s root directory&#xA;    - Customize as needed&#xA;- Contributions are welcome:&#xA;    - Fork the repository&#xA;    - Create a new folder in the rules directory&#xA;    - Add your .cursorrules file&#xA;    - Update the main README.md&#xA;    - Submit a pull request&#xA;- Licensed under CC0-1.0&#xA;- Has 469 stars and 20 forks on GitHub&#xA;- 2 contributors to the project&#xA;- Topics: awesome, awesome-list, cursor, cursorrules, cursor-ai-editor&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/finic-ai/finic&#34;&gt;https://github.com/finic-ai/finic&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- Finic is a cloud platform for deploying and managing browser-based automation agents&#xA;- Focuses on fault-tolerant execution of bots, scrapers, and RPA integrations&#xA;- Designed to be unopinionated about development process&#xA;- Currently supports Playwright for DOM interactions and recommends BeautifulSoup for HTML parsing&#xA;- Key features:&#xA;    - Cloud Deployment: Deploy Playwright containers to Finic Cloud&#xA;    - Secure Credential Management: Built-in secret manager&#xA;    - Monitoring: Track agent execution and view logs through dashboard&#xA;- Quickstart:&#xA;    - Install via `pip install finicapi`&#xA;    - Create new agent with `create-finic-app example-project`&#xA;    - Run locally with Poetry&#xA;    - Deploy to Finic Cloud with `finic-deploy`&#xA;- Roadmap includes:&#xA;    - Automated deployment from GitHub&#xA;    - Containers with X11 for advanced UI automation&#xA;    - Session impersonation&#xA;    - Self-healing selectors using LLMs&#xA;    - Scheduling and orchestration features&#xA;    - Automatic rate limit detection&#xA;    - Custom timeouts for long-running tasks&#xA;- Open-source project under Apache-2.0 license&#xA;- 2.1k stars and 117 forks on GitHub&#xA;- Written primarily in TypeScript (80.5%) and Python (15.9%)&#xA;- 10 contributors to the project&#xA;- Topics: integrations, scraper, automation, rpa, generative-ai&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://x.com/linoy_tsaban/status/1836313928940556550?s=12&#34;&gt;https://x.com/linoy_tsaban/status/1836313928940556550?s=12&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Link List :: 2024-09-16</title>
      <link>/posts/1726471582-linklist-2024-09-16/</link>
      <pubDate>Mon, 16 Sep 2024 08:26:22 +0100</pubDate>
      <guid>/posts/1726471582-linklist-2024-09-16/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/michaelchu/optopsy/wiki&#34;&gt;https://github.com/michaelchu/optopsy/wiki&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://algorithms-tour.stitchfix.com/&#34;&gt;https://algorithms-tour.stitchfix.com/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.r2d3.us/visual-intro-to-machine-learning-part-1/&#34;&gt;http://www.r2d3.us/visual-intro-to-machine-learning-part-1/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://vallandingham.me/scroller.html&#34;&gt;https://vallandingham.me/scroller.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.joelonsoftware.com/2002/01/06/fire-and-motion/&#34;&gt;https://www.joelonsoftware.com/2002/01/06/fire-and-motion/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/blotterfyi/velocity&#34;&gt;https://github.com/blotterfyi/velocity&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/aorwall/moatless-tools&#34;&gt;https://github.com/aorwall/moatless-tools&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/morishin/XDeck&#34;&gt;https://github.com/morishin/XDeck&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://compute.hyper.space/&#34;&gt;https://compute.hyper.space/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/phiresky/thought-forge-ai?tab=readme-ov-file&#34;&gt;https://github.com/phiresky/thought-forge-ai?tab=readme-ov-file&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Doriandarko/maestro&#34;&gt;https://github.com/Doriandarko/maestro&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Blaizzy/fastmlx&#34;&gt;https://github.com/Blaizzy/fastmlx&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/kturung/langgraph_streamlit_codeassistant&#34;&gt;https://github.com/kturung/langgraph_streamlit_codeassistant&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Link List :: 2024-09-07</title>
      <link>/posts/1726471302-linklist-2024-09-07/</link>
      <pubDate>Sat, 07 Sep 2024 08:21:43 +0100</pubDate>
      <guid>/posts/1726471302-linklist-2024-09-07/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/roboflow/sports&#34;&gt;https://github.com/roboflow/sports&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/raznem/parsera&#34;&gt;https://github.com/raznem/parsera&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/Peng-YM/LeetCode-Anki&#34;&gt;https://github.com/Peng-YM/LeetCode-Anki&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/ading2210/poe-api&#34;&gt;https://github.com/ading2210/poe-api&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/linyimin0812/spring-startup-analyzer&#34;&gt;https://github.com/linyimin0812/spring-startup-analyzer&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://optionalpha.com/blog/0dte-options-strategy-performance&#34;&gt;https://optionalpha.com/blog/0dte-options-strategy-performance&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/paul-gauthier/aider/blob/main/benchmark/README.md&#34;&gt;https://github.com/paul-gauthier/aider/blob/main/benchmark/README.md&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/michaelchu/optopsy/wiki&#34;&gt;https://github.com/michaelchu/optopsy/wiki&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/simonw/tools&#34;&gt;https://github.com/simonw/tools&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/geographyclub/qgis-expressions/tree/main/screens&#34;&gt;https://github.com/geographyclub/qgis-expressions/tree/main/screens&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://www.gpu-mart.com/blog/import-models-from-huggingface-to-ollama&#34;&gt;https://www.gpu-mart.com/blog/import-models-from-huggingface-to-ollama&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/LocalLLaMA/comments/1exe1lu/tutorial_getting_phi_35_mini_running_locally_in/&#34;&gt;https://www.reddit.com/r/LocalLLaMA/comments/1exe1lu/tutorial_getting_phi_35_mini_running_locally_in/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
