<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>api on deskriders</title>
    <link>/tags/api/</link>
    <description>Recent content in api on deskriders</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 16 Nov 2019 16:24:01 +0000</lastBuildDate>
    
	<atom:link href="/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Performance testing with HttpRider</title>
      <link>/posts/004-httprider-performance-testing/</link>
      <pubDate>Sat, 16 Nov 2019 16:24:01 +0000</pubDate>
      
      <guid>/posts/004-httprider-performance-testing/</guid>
      <description>The title is a bit misleading as HttpRider can&amp;rsquo;t run performance tests (as of now), however it can be used to generate performance tests using a couple of different approach.
Slow cooker: SlowCooker is a command line tool for load testing. Here is an excellent blog post about the background and difference from other similar tools.
Generating code to run slow cooker is as simple as selecting an API call and click on the export button to generate code.</description>
    </item>
    
    <item>
      <title>Generating BDD tests with HttpRider</title>
      <link>/posts/003-httprider-generating-bdd-tests/</link>
      <pubDate>Mon, 28 Oct 2019 11:30:47 +0000</pubDate>
      
      <guid>/posts/003-httprider-generating-bdd-tests/</guid>
      <description>In this post, we&amp;rsquo;ll see how we can easily generate BDD tests with HttpRider.
Instead of writing the code behind the REST api calls, we&amp;rsquo;ll use an open source framework called Apickli to do the heavy lifting. Apickli is based on cucumber.js and defines a number of pre-built Gherkin expressions.
I&amp;rsquo;ve also created a sample project using Apicki framework to make it easy to get it up and running.
Let&amp;rsquo;s start with a few API calls using the sample database provided with source.</description>
    </item>
    
    <item>
      <title>Generating Runscope monitoring tests with HttpRider</title>
      <link>/posts/002-httprider-generating-runscope-monitoring-tests/</link>
      <pubDate>Sun, 27 Oct 2019 11:30:15 +0000</pubDate>
      
      <guid>/posts/002-httprider-generating-runscope-monitoring-tests/</guid>
      <description>Runscope (Now Part of BlazeMeter) is a well known service for API Monitoring. This post covers generating Runscope monitoring tests from HttpRider.
We start with API definitions in HttpRider, make sure you run them at least once as some of the exporters use the data from the response.
Along with API definitions, it also generates Runscope environments with placeholders for any variables used from environment.
Once the tests have successfully finished, click on the export/export all button to display the code generator.</description>
    </item>
    
    <item>
      <title>Generating sequence diagrams with HttpRider</title>
      <link>/posts/001-httprider-generating-sequence-diagrams/</link>
      <pubDate>Sun, 13 Oct 2019 07:45:14 +0000</pubDate>
      
      <guid>/posts/001-httprider-generating-sequence-diagrams/</guid>
      <description>Most tools consider an HTTP API call as a single request but that is not usually the case. An API call is surrounded by a sequence of other APIs which makes it easy to understand the context of the use case.
In HttpRider, I&amp;rsquo;ve recently introduced an exporter for sequence diagrams. So a collection of HTTP calls can be easily exported to sequence diagrams using PlantUML/MermaidJS.
 HttpRider is an open source cross platform desktop client for working with JSON APIs</description>
    </item>
    
  </channel>
</rss>